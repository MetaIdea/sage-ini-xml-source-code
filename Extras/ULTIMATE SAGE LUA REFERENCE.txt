----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
--ULTIMATE SAGE LUA REFERENCE 1.03 by Mjjstral (Contact: Discord @Mjjstral#1157)--
----------------------------------------------------------------------------------
---GAMES:LOTR-BFME1,LOTR-BFME2,LOTR-BFME2ROTWK,CNC3,CNC3KW,CNCRA3,CNCRA3U,CNC4----
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

CONTENT:
1. NATIVE SAGE LUA GAMESCRIPT FUNCTIONS
2. LUA SCRIPTS IN OBJECT DEFINITIONS
3. EXECUTEACTION WITH PARAMETERS
4. EVALUATECONDITION WITH PARAMETERS
5. PARAMETER TYPES FOR EXECUTEACTION AND EVALUATECONDITION
6. NATIVE LUA FUNCTIONS
7. LUA GAME SCRIPT EVENTS

----------------------------------------
--NATIVE SAGE LUA GAMESCRIPT FUNCTIONS--
----------------------------------------

ExecuteAction(mapScriptAction, parameter1, parameter2,...)
EvaluateCondition(mapScriptCondition, parameter1, parameter2,...)
ObjectDoSpecialPower(object, specialpower)
ObjectCreateAndFireTempWeapon(object, weapon)
ObjectGrantUpgrade(object, upgrade)
ObjectRemoveUpgrade(object, upgrade)
ObjectHasUpgrade(object, upgrade)
ObjectSetObjectStatus(object, status)
ObjectTestModelCondition(object, modelcondition)
ObjectPlaySound(object, sound)
ObjectSetDelayedDeath(object?, delay?)
ObjectChangeAllegianceFromNonPlayablePlayer(object1, object2)
ObjectForbidPlayerCommands(object, true/false)
ObjectSetGeometryActive(object, geometryname, true/false)
ObjectHideSubObject(object,subobjectname, true/false)
ObjectHideSubObjectPermanently(object, subobjectname, true/false)
ObjectCountNearbyEnemies(object, radius)
ObjectDescription(object)
ObjectTeamName(object)
ObjectPlayerSide(object)
ObjectCapturingObjectPlayerSide(object)
ObjectTemplateName(object)
ObjectDispatchEvent(object, eventname, radius)
ObjectSpy()
HordeBroadcastEventToMembers(object?, eventname?)
ObjectBroadcastEventToEnemies(object, eventname, radius)
ObjectBroadcastEventToAllies(object, eventname, radius)
ObjectBroadcastEventToUnits(object, eventname, radius)
ObjectBroadcastEventToCivilians(object, eventname, radius)
ObjectSetChanting(object, true/false)
ObjectSetFearFactor(object?, fearfactor?)
ObjectTestCanSufferFear(object)
ObjectEnterFearState(object1, object2, true/false)
ObjectEnterAlertState(object)
ObjectEnterCowerState(object1, object2)
ObjectEnterRampageState(object)
ObjectEnterRunAwayPanicState(object1, object2)
ObjectEnterUncontrollableCowerState(object1, object2)
GetRandomNumber()
GetFrame()

--CNC4--
ObjectClearModelCondition(object, modelcondition)  
ObjectSetModelCondition(object, modelcondition)
ObjectGetHealthFraction(object)
ObjectClearObjectStatus(object, status)

-----------------------------------------------------------------
--ONLY FOR LUA SCRIPTS IN OBJECT DEFINITIONS (->AnimationState)--
-----------------------------------------------------------------

CurDrawableObjectStatus()
CurDrawableModelcondition()
CurDrawableGetCurrentTargetBearing()
CurDrawableGetCurrentTargetHeight()
CurDrawableGetCurrentTargetDistance()
CurDrawableIsCurrentTargetKindof(kindof)
CurDrawablePrevAnimation()
CurDrawablePrevAnimationState()
CurDrawablePrevAnimFraction()
GetClientRandomNumberReal()
GetFrame()
CurDrawablePlaySound(sound)
CurDrawableAllowToContinue()
CurDrawableSetTransitionAnimState(transitionstate)
CurDrawableShowModule(moduletag)
CurDrawableHideModule(moduletag)
CurDrawableHideSubObjectPermanently(subobjectname)
CurDrawableShowSubObjectPermanently(subobjectname)
CurDrawableShowSubObject(subobjectname)
CurDrawableHideSubObject(subobjectname)

-----------------
--EXECUTEACTION--
-----------------

ExecuteAction("DEBUG_MESSAGE_BOX", Text)
Show debug string and pause: <Text>
Scripting_/Debug/Display message and pause

ExecuteAction("DEBUG_STRING", Text)
Show debug string without pausing: <Text>
Scripting_/Debug/Display string

ExecuteAction("DEBUG_CRASH_BOX", Text)
Display a crash box with the text: <Text>
{INTERNAL}_/Debug/Display a crash box (debug/internal builds only).

ExecuteAction("SET_FLAG", FLAG, BOOLEAN)
Set <FLAG> to <BOOLEAN>
Scripting_/Flags/Set flag to value.

ExecuteAction("SET_FLAG_TO_FLAG", FLAG, FLAG)
Set <FLAG> to <FLAG>
Scripting_/Flags/Set flag to another flag.

ExecuteAction("SET_COUNTER", COUNTER, INT)
Set <COUNTER> to <INT>
Scripting_/Counters/Set counter to a value.

ExecuteAction("SET_COUNTER_TO_COUNTER", COUNTER, COUNTER)
Set <COUNTER> to <COUNTER>
Scripting_/Counters/Set counter to another counter.

ExecuteAction("SET_RANDOM_COUNTER", COUNTER, INT, INT)
Set Counter <COUNTER> randomly between <INT> and <INT>.
Scripting_/Counters/Set a random counter.

ExecuteAction("SET_COUNTER_TO_CLIENT_RANDOM_VALUE", COUNTER, INT, INT)
Set Counter <COUNTER> to a CLIENT-SIDE random between <INT> and <INT>. WARNING: Will cause desyncs if used for multiplayer maps! Don't use unless you have a good reason!
Scripting_/Counters/Set a counter to a random CLIENT-SIDE value.

ExecuteAction("SET_COUNTER_IN_SECONDS", COUNTER, REAL)
Set <COUNTER> to <REAL> seconds. 
Scripting_/Counters/Set counter to a time in seconds.

ExecuteAction("SET_RANDOM_COUNTER_IN_SECONDS", COUNTER, REAL, REAL)
Set Counter <COUNTER> randomly between <REAL> and <REAL> seconds.
Scripting_/Counters/Set a random counter in seconds.

ExecuteAction("SET_TREE_SWAY", ANGLE, ANGLE, ANGLE, INT, REAL)
Set wind direction to <ANGLE>, amount to sway <ANGLE>, amount to lean with the wind <ANGLE>, frames to take to sway once <INT>, randomness <REAL>(0=lock step, 1=large random variation).
Map_/Environment/Set wind sway amount and direction.

ExecuteAction("SET_CAMERA_CLIP_DEPTH_MULTIPLIER", REAL)
Modify normal depth of Frustrum by <REAL> (1.0 = normal, < 1.0 shortens frustrum, > 1.0 lengthens.)
Camera/Adjust/Change the camera depth of field.

ExecuteAction("QUICKVICTORY")
End game in victory immediately.
User_/ Announce quick win

ExecuteAction("VICTORY")
Announce win.
User_/ Announce win

ExecuteAction("VICTORY_SCREEN")
Shows the victory screen, but does not behave as a victory.
User_/ Show Victory Screen

ExecuteAction("DEFEAT")
Announce lose.
User_/ Announce lose

ExecuteAction("NO_OP")
Null operation. (Does nothing.)
Scripting_/Debug/Null operation.

ExecuteAction("SET_TIMER", COUNTER, INT)
Set timer <COUNTER> to expire in <INT> frames.
Scripting_/Timer/Frame countdown timer -- set.

ExecuteAction("SET_RANDOM_TIMER", COUNTER, INT, INT)
Set timer <COUNTER> to expire between <INT> and <INT> frames.
Scripting_/Timer/Frame countdown timer -- set random.

ExecuteAction("STOP_TIMER", COUNTER)
Stop timer <COUNTER>
Scripting_/Timer/Timer -- stop.

ExecuteAction("RESTART_TIMER", COUNTER)
Restart timer <COUNTER>
Scripting_/Timer/Timer -- restart stopped.

ExecuteAction("PLAY_SOUND_EFFECT", SOUND)
Play <SOUND> as though it was a 2D sound (NOT RECOMMENDED for 3D sounds).
Multimedia_/Sound Effect/Play 2D sound effect.

ExecuteAction("ENABLE_SCRIPT", SCRIPT)
Enable <SCRIPT>.
Scripting_/Script/Enable Script.

ExecuteAction("DISABLE_SCRIPT", SCRIPT)
Disable <SCRIPT>.
Scripting_/Script/Disable script.

ExecuteAction("CALL_SUBROUTINE", SCRIPT_SUBROUTINE)
Run <SCRIPT_SUBROUTINE>.
Scripting_/Script/Run subroutine script.

ExecuteAction("PLAY_SOUND_EFFECT_AT", SOUND, WAYPOINT)
Play <SOUND> at <WAYPOINT>.
Multimedia_/Sound Effect/Play sound effect at waypoint.

ExecuteAction("DAMAGE_MEMBERS_OF_TEAM", TEAM, REAL)
Damage <TEAM>, amount=<REAL> (-1==kill).
Team_/Damage/Damage the members of a team.

ExecuteAction("TEAM_SET_HEALTH", TEAM, REAL)
Set health of <TEAM> to percentage (0.0 - 100.0) <REAL>
Team_/Health/Set the health of the team members (in percentage).

ExecuteAction("MOVE_TEAM_TO", TEAM, WAYPOINT)
Move <TEAM> to <WAYPOINT>.
Team_/Move/Set to move to a location.

ExecuteAction("ATTACK_MOVE_TEAM_TO", TEAM, WAYPOINT)
AttackMove <TEAM> to <WAYPOINT>.
Team_/AttackMove/Set to move to a location.

ExecuteAction("ATTACK_MOVE_TEAM_TO_NAMED_OBJECT", TEAM, UNIT)
AttackMove <TEAM> to <UNIT>.
Team_/AttackMove/Attack move a team to a named object.

ExecuteAction("MOVE_TEAM_HOME", TEAM)
Move <TEAM> Home. 
Team_/Move/Set to move home.

ExecuteAction("TEAM_FOLLOW_WAYPOINTS", TEAM, WAYPOINT_PATH, BOOLEAN, BOOLEAN)
Have <TEAM> follow <WAYPOINT_PATH> , as a team is <BOOLEAN> , in formation is <BOOLEAN>
Team_/Move/Set to follow a waypoint path.

ExecuteAction("TEAM_ATTACK_MOVE_FOLLOW_WAYPOINTS", TEAM, WAYPOINT_PATH, BOOLEAN, BOOLEAN)
Have <TEAM> AttackMove follow <WAYPOINT_PATH> , as a team is <BOOLEAN> , in formation is <BOOLEAN>
Team_/AttackMove/Set to follow a waypoint path.

ExecuteAction("TEAM_FOLLOW_WAYPOINTS_EXACT", TEAM, WAYPOINT_PATH, BOOLEAN)
Have <TEAM> EXACTLY follow <WAYPOINT_PATH> , as a team is <BOOLEAN>
Team_/Move/Set to EXACTLY follow a waypoint path.

ExecuteAction("TEAM_WANDER_IN_PLACE", TEAM)
Have <TEAM> wander around it's current location.
Team_/Move/Set to wander around current location.

ExecuteAction("TEAM_INCREASE_PRIORITY", TEAM)
Increase the AI priority for<TEAM>  by its Success Priority Increase amount.
Team_/AI/Increase priority by Success Priority Increase amount.

ExecuteAction("TEAM_INCREASE_PRIORITY_BY_VALUE", TEAM, INT)
Increase the AI priority for<TEAM>  by <INT> .
Team_/AI/Increase priority by a specific value.

ExecuteAction("TEAM_DECREASE_PRIORITY", TEAM)
Reduce the AI priority for<TEAM>  by its Failure Priority Decrease amount.
Team_/AI/Reduce priority by Failure Priority Decrease amount.

ExecuteAction("TEAM_DECREASE_PRIORITY_BY_VALUE", TEAM, INT)
Decrease the AI priority for<TEAM>  by <INT> .
Team_/AI/Increase priority by a specific value.

ExecuteAction("TEAM_WANDER", TEAM, WAYPOINT_PATH)
Have <TEAM> wander along <WAYPOINT_PATH>
Team_/Move/Set to follow a waypoint path -- wander.

ExecuteAction("TEAM_PANIC", TEAM, WAYPOINT_PATH)
Have <TEAM> move in panic along <WAYPOINT_PATH>
Team_/Move/Set to follow a waypoint path -- panic.

ExecuteAction("MOVE_NAMED_UNIT_TO", UNIT, WAYPOINT)
Move <UNIT> to <WAYPOINT>.
Unit_/Move/Move a specific unit to a location.

ExecuteAction("ATTACK_MOVE_NAMED_UNIT_TO", UNIT, WAYPOINT)
AttackMove <UNIT> to <WAYPOINT>.
Unit_/AttackMove/AttackMove a specific unit to a location.

ExecuteAction("TEAM_SET_STATE", TEAM, TEAM_STATE)
Set <TEAM> to <TEAM_STATE>.
Team_/Misc/Team state - set state.

ExecuteAction("TEAM_SET_CUSTOM_STATE", TEAM, TEAM_STATE, BOOLEAN)
<TEAM> set custom state <TEAM_STATE> to <BOOLEAN>
Team_/Misc/Team state - set custom state.

ExecuteAction("CREATE_REINFORCEMENT_TEAM", TEAM, WAYPOINT)
Spawn an instance of <TEAM> at <WAYPOINT>.
Team_/ Spawn a reinforcement team.

ExecuteAction("CREATE_REINFORCEMENT_TEAM_AT_UNIT_POSITION", TEAM, UNIT)
Spawn an instance of <TEAM> at <UNIT>.
Team_/ Spawn a reinforcement team.

ExecuteAction("UNIT_SET_TEAM", UNIT, TEAM)
Unit named <UNIT> will join team named <TEAM>.
Unit_/ Force unit to join team.

ExecuteAction("SKIRMISH_BUILD_BUILDING", OBJECT_TYPE)
Build a building of type <OBJECT_TYPE>.
Skirmish Only_/ Build a building.

ExecuteAction("AI_PLAYER_BUILD_SUPPLY_CENTER", PLAYER, OBJECT_TYPE, INT)
Have AI <PLAYER> build a <OBJECT_TYPE> near a supply src with at least <INT> available resources.
Player_/AI/AI player build near a supply source.

ExecuteAction("TEAM_GUARD_SUPPLY_CENTER", TEAM, INT)
Have Team <TEAM> guard attacked or closest supply src with at least <INT> available resources
Team_/Guard/Set to guard a supply source.

ExecuteAction("AI_PLAYER_BUILD_UPGRADE", PLAYER, UPGRADE)
Have AI <PLAYER> build this upgrade: <UPGRADE>
Player_/AI/AI player build an upgrade.

ExecuteAction("GIVE_PLAYER_UPGRADE", PLAYER, UPGRADE)
Give <PLAYER> this upgrade: <UPGRADE>
Player_/Player/Give player an upgrade.

ExecuteAction("PLAYER_SET_MAX_SPELLPOINTS", PLAYER, INT)
<PLAYER> is given Maximum Spell Points of <INT>.
Player/Upgrades and Sciences/Set Max Spell Points.

ExecuteAction("SKIRMISH_FOLLOW_APPROACH_PATH", TEAM, SKIRMISH_APPROACH_PATH, BOOLEAN)
Have <TEAM> approach the enemy using path <SKIRMISH_APPROACH_PATH>, as a team is <BOOLEAN>
Skirmish Only_/Move/Team follow approach path.

ExecuteAction("SKIRMISH_MOVE_TO_APPROACH_PATH", TEAM, SKIRMISH_APPROACH_PATH)
Have <TEAM> move to the start of enemy path <SKIRMISH_APPROACH_PATH>.
Skirmish Only_/Move/Team move to approach path.

ExecuteAction("SKIRMISH_BUILD_BASE_DEFENSE_FRONT")
Build one additional perimeter base defenses, on the front.
Skirmish Only_/Build/Build base defense on front perimeter.

ExecuteAction("SKIRMISH_BUILD_BASE_DEFENSE_FLANK")
Build one additional perimeter base defenses, on the flank.
Skirmish Only_/Build/Build base defense on flank perimeter.

ExecuteAction("SKIRMISH_BUILD_STRUCTURE_FRONT", OBJECT_TYPE)
Build one additional <OBJECT_TYPE>, on the front.
Skirmish Only_/Build/Build structure on front perimeter.

ExecuteAction("SKIRMISH_BUILD_STRUCTURE_FLANK", OBJECT_TYPE)
Build one additional <OBJECT_TYPE>, on the flank.
Skirmish Only_/Build/Build structure on flank perimeter.

ExecuteAction("RECRUIT_TEAM", TEAM, REAL)
Recruit an instance of <TEAM>, maximum recruiting distance (feet):<REAL>.
Team_/Create/Recruit a team.

ExecuteAction("RECRUIT_TEAM_AT_TEAM", TEAM, REAL, TEAM)
Recruit an instance of <TEAM>, maximum recruiting distance (feet):<REAL> from the team <TEAM>.
Team_/Create/Recruit a team from the location of another team.

ExecuteAction("MOVE_CAMERA_TO", CAMERA, REAL, REAL, REAL, REAL)
Move camera to <CAMERA> in <REAL> seconds, camera shutter <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Move/Move the camera to a location.

ExecuteAction("CAMERA_RESTRICT_TO_AREA", TRIGGER_AREA)
Restrict camera movement to <TRIGGER_AREA>.
Camera_/Move/Restrict camera movement to area.

ExecuteAction("CAMERA_REMOVE_AREA_RESTRICTION")
Restrict camera movement to area -- REMOVE.
Camera_/Move/Restrict camera movement to area -- REMOVE.

ExecuteAction("ZOOM_CAMERA", REAL, REAL, REAL, REAL)
Change camera zoom to <REAL> in <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Adjust/Change the camera zoom.

ExecuteAction("FOCAL_LENGTH_CAMERA", REAL, REAL, REAL, REAL)
Change camera focal length to <REAL>mm in <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Adjust/Change the camera's focal length (mm).

ExecuteAction("CAMERA_FADE_ADD", REAL, REAL, INT, INT, INT)
Fade (0-1) from <REAL> to <REAL> adding toward white. Take <INT> frames to increase, hold for <INT> fames, and decrease <INT> frames.
Camera_/Fade Effects/Fade using an add blend to white.

ExecuteAction("CAMERA_FADE_SUBTRACT", REAL, REAL, INT, INT, INT)
Fade (0-1) from <REAL> to <REAL> subtracting toward black. Take <INT> frames to increase, hold for <INT> fames, and decrease <INT> frames.
Camera_/Fade Effects/Fade using a subtractive blend to black.

ExecuteAction("CAMERA_FADE_MULTIPLY", REAL, REAL, INT, INT, INT)
Fade (1-0) from <REAL> to <REAL> multiplying toward black. Take <INT> frames to increase, hold for <INT> fames, and decrease <INT> frames.
Camera_/Fade Effects/Fade using a multiply blend to black.

ExecuteAction("CAMERA_FADE_SATURATE", REAL, REAL, INT, INT, INT)
Fade (0.5-1) from <REAL> to <REAL> increasing saturation. Take <INT> frames to increase, hold for <INT> fames, and decrease <INT> frames.
Camera_/Fade Effects/Fade using a saturate blend.

ExecuteAction("PITCH_CAMERA", REAL, REAL, REAL, REAL)
Change camera pitch to <REAL> in <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Adjust/Change the camera pitch.

ExecuteAction("ROLL_CAMERA", REAL, REAL, REAL, REAL)
Change camera roll to <REAL> degrees in <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Adjust/Change the camera roll.

ExecuteAction("CAMERA_FOLLOW_NAMED", UNIT, BOOLEAN, REAL)
Have the camera follow <UNIT>. Snap camera to object is <BOOLEAN>. Camera will be <REAL> higher than the unit.
Camera_/Move/Follow a specific unit.

ExecuteAction("CAMERA_STOP_FOLLOW")
Stop following any units.
Camera_/Move/Stop following any units.

ExecuteAction("SETUP_CAMERA", WAYPOINT, REAL, REAL, WAYPOINT)
Position camera at <WAYPOINT>, zoom = <REAL> (0.0 to 1.0), pitch = <REAL> (1.0==default), looking towards <WAYPOINT>.
Camera_/Adjust/Set up the camera.

ExecuteAction("INCREMENT_COUNTER", INT, COUNTER)
Add <INT> to counter <COUNTER>
Scripting_/Counters/Increment counter.

ExecuteAction("DECREMENT_COUNTER", INT, COUNTER)
Subtract <INT> from counter <COUNTER>
Scripting_/Counters/Decrement counter.

ExecuteAction("MOVE_CAMERA_BY_ANIMATION", CAMERA_ANIMATION)
Move using <CAMERA_ANIMATION>.
Camera_/Move/Move using camera animation.

ExecuteAction("MOVE_CAMERA_ALONG_SPLINE_PATH", WAYPOINT_PATH, REAL, REAL, REAL, REAL, REAL)
Move along <WAYPOINT_PATH> in <REAL> seconds, camera shutter <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds, delay start <REAL> seconds. 
Camera_/Move/Move along a spline path.

ExecuteAction("MOVE_CAMERA_LOCATOR_ALONG_SPLINE_PATH", WAYPOINT_PATH, REAL, REAL, REAL, REAL, REAL)
Look at point moving along <WAYPOINT_PATH> in <REAL> seconds, camera shutter <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds, delay start <REAL> seconds. 
Camera_/Locator/Order camera's locator to follow a spline path.

ExecuteAction("ROTATE_CAMERA", REAL, REAL, REAL, REAL)
Rotate <REAL> times, taking <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Rotate/ Rotate around the current viewpoint.

ExecuteAction("ROTATE_CAMERA_TO_ANGLE", REAL, REAL, REAL, REAL)
Rotate camera view to <REAL> degrees, taking <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Rotate/ Rotate to a specific view angle.

ExecuteAction("ROTATE_CAMERA_LOCKED", REAL, REAL, REAL, REAL)
Rotate in place <REAL> times, taking <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Rotate/ Rotate the camera in place.

ExecuteAction("RESET_CAMERA", WAYPOINT, REAL, REAL, REAL)
Reset to <WAYPOINT>, taking <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds.
Camera_/Move/ Reset to the default view.

ExecuteAction("MOVE_CAMERA_TO_SELECTION")
End movement at selected unit.
Camera_/Move/Modify/ End movement at selected unit.

ExecuteAction("SET_MILLISECOND_TIMER", COUNTER, REAL)
Set timer <COUNTER> to expire in <REAL> seconds.
Scripting_/Timer/Seconds countdown timer -- set.

ExecuteAction("SET_RANDOM_MSEC_TIMER", COUNTER, REAL, REAL)
Set timer <COUNTER> to expire between <REAL> and <REAL> seconds.
Scripting_/Timer/Seconds countdown timer -- set random.

ExecuteAction("ADD_TO_MSEC_TIMER", REAL, COUNTER)
Add <REAL> seconds to timer <COUNTER> .
Scripting_/Timer/Seconds countdown timer -- add seconds.

ExecuteAction("SUB_FROM_MSEC_TIMER", REAL, COUNTER)
Subtract <REAL> seconds from timer <COUNTER> .
Scripting_/Timer/Seconds countdown timer -- subtract seconds.

ExecuteAction("CAMERA_MOD_FREEZE_TIME")
Freeze time during the camera movement.
Camera_/Move/Modify/ Freeze time during the camera movement.

ExecuteAction("CAMERA_MOD_FREEZE_ANGLE")
Freeze camera angle during the camera movement.
Camera_/Move/Modify/ Freeze camera angle during the camera movement.

ExecuteAction("SUSPEND_BACKGROUND_SOUNDS")
Suspend background sounds.
Multimedia_/All Sounds/Suspend all sounds.

ExecuteAction("RESUME_BACKGROUND_SOUNDS")
Resume background sounds.
Multimedia_/All Sounds/Resume all sounds.

ExecuteAction("CAMERA_MOD_SET_FINAL_ZOOM", REAL, PERCENT, PERCENT)
Adjust zoom to <REAL> (1.0==max height, 0.0==in the ground) <PERCENT> ease-in <PERCENT> ease-out.
Camera_/Move/Modify/Set Final zoom for camera movement.

ExecuteAction("CAMERA_MOD_SET_FINAL_PITCH", REAL, PERCENT, PERCENT)
Adjust pitch to <REAL> (1.0==default, 0.0==toward horizon, >1 = toward ground) <PERCENT> ease-in <PERCENT> ease-out.
Camera_/Move/Modify/Set Final pitch for camera movement.

ExecuteAction("SET_VISUAL_SPEED_MULTIPLIER", INT)
Make visual time <INT> time normal (1=normal, 2 = twice as fast, ...).
{Compatibility}_/Multimedia/Modify visual game time.

ExecuteAction("CAMERA_MOD_SET_FINAL_SPEED_MULTIPLIER", INT)
Adjust game time to <INT> times normal (1=normal, 2 = twice as fast, ...).
{Compatibility}_/Camera/Modify/Final visual game time for camera movement.

ExecuteAction("CAMERA_MOD_SET_ROLLING_AVERAGE", INT)
Average position and angle changes over<INT> frames. (1=no smoothing, 5 = very smooth)
Camera_/Move/Modify/ Number of frames to average movements.

ExecuteAction("CAMERA_MOD_FINAL_LOOK_TOWARD", WAYPOINT)
Look toward <WAYPOINT> at the end of the camera movement.
{Compatibility}_/Camera/Modify/Move/ Final camera look toward point.

ExecuteAction("CAMERA_MOD_LOOK_TOWARD", WAYPOINT)
Look toward <WAYPOINT> during the camera movement.
Camera_/Modify/Move/Camera look toward point while moving.

ExecuteAction("CREATE_OBJECT", OBJECT_TYPE, TEAM, COORD3D, ANGLE)
Spawn object <OBJECT_TYPE> in <TEAM> at position (<COORD3D>), rotated <ANGLE> .
Unit_/Spawn/Spawn object.

ExecuteAction("TEAM_ATTACK_TEAM", TEAM, TEAM)
<TEAM> begin attack on <TEAM>
Team_/Attack/Set to attack -- another team.

ExecuteAction("NAMED_ATTACK_NAMED", UNIT, UNIT)
<UNIT> begin attack on <UNIT>
Unit_/Attack/Set unit to attack another unit.

ExecuteAction("CREATE_NAMED_ON_TEAM_AT_WAYPOINT", UNIT, OBJECT_TYPE, TEAM, WAYPOINT)
Spawn <UNIT> of type <OBJECT_TYPE> on <TEAM> at waypoint <WAYPOINT>
Unit_/Spawn/Spawn -- named unit on a team at a waypoint.

ExecuteAction("CREATE_UNNAMED_ON_TEAM_AT_WAYPOINT", OBJECT_TYPE, TEAM, WAYPOINT)
Spawn unit of type <OBJECT_TYPE> on <TEAM> at waypoint <WAYPOINT>
Unit_/Spawn/Spawn -- unnamed unit on a team at a waypoint.

ExecuteAction("NAMED_APPLY_ATTACK_PRIORITY_SET", UNIT, ATTACK_PRIORITY_SET)
Have <UNIT> use <ATTACK_PRIORITY_SET>.
AttackPrioritySet_/Apply/Unit/Apply unit's attack priority set.

ExecuteAction("TEAM_APPLY_ATTACK_PRIORITY_SET", TEAM, ATTACK_PRIORITY_SET)
Have <TEAM> use <ATTACK_PRIORITY_SET>.
AttackPrioritySet_/Apply/Team/Apply a team's attack priority set.

ExecuteAction("SET_ATTACK_PRIORITY_THING", ATTACK_PRIORITY_SET, OBJECT_TYPE_LIST, INT)
For <ATTACK_PRIORITY_SET> set the priority of object type <OBJECT_TYPE_LIST> to <INT>
AttackPrioritySet_/Set/Modify a set's priority for a single unit type.

ExecuteAction("SET_ATTACK_PRIORITY_KIND_OF", ATTACK_PRIORITY_SET, KIND_OF, INT)
For <ATTACK_PRIORITY_SET> set the priority of object type <KIND_OF> to <INT>
AttackPrioritySet_/Set/Modify a set's priorities for all of a kind.

ExecuteAction("SET_DEFAULT_ATTACK_PRIORITY", ATTACK_PRIORITY_SET, INT)
For <ATTACK_PRIORITY_SET> set the default priority to <INT>
AttackPrioritySet_/Set/Specify the set's default priority.

ExecuteAction("PLAYER_ADD_SKILLPOINTS", PLAYER, INT)
<PLAYER> is given <INT> Skill Points.
Player_/Experience/Add or Subtract Skill Points.

ExecuteAction("SET_HERO_EXPERIENCE_SHARING", BOOLEAN)
Set Hero experience sharing to <BOOLEAN>.
Player_/Experience/Set whether heroes share experience with other heroes

ExecuteAction("PLAYER_ADD_RANKLEVEL", PLAYER, INT)
<PLAYER> is given <INT> Rank Levels.
Player_/Experience/Add or Subtract Rank Levels.

ExecuteAction("PLAYER_SET_RANKLEVEL", PLAYER, INT)
<PLAYER> is given a Rank Level of <INT>.
Player_/Experience/Set Rank Level.

ExecuteAction("PLAYER_SET_RANKLEVELLIMIT", INT)
The current map is given a Rank Level Limit of <INT>.
Map_/Experience/Set Rank Level Limit for current Map.

ExecuteAction("PLAYER_GRANT_SCIENCE", PLAYER, SCIENCE)
<PLAYER> is granted <SCIENCE>.
Player_/Science/Grant a Science to a given Player (ignoring prerequisites).

ExecuteAction("PLAYER_PURCHASE_SCIENCE", PLAYER, SCIENCE)
<PLAYER> attempts to purchase Science <SCIENCE>.
Player_/Science/Player attempts to purchase a Science.

ExecuteAction("PLAYER_SCIENCE_AVAILABILITY", PLAYER, SCIENCE, SCIENCE_AVAILABILITY)
<PLAYER> set <SCIENCE> availability to <SCIENCE_AVAILABILITY>.
Player_/Science/Set science availability.

ExecuteAction("SET_BASE_CONSTRUCTION_SPEED", PLAYER, INT)
<PLAYER> will delay <INT> seconds between building teams.
Player_/AI/Set the delay between building teams.

ExecuteAction("NAMED_SET_ATTITUDE", UNIT, AI_MOOD)
<UNIT> changes his attitude to <AI_MOOD>
Unit_/Mood/Set the general attitude of a specific unit.

ExecuteAction("TEAM_SET_ATTITUDE", TEAM, AI_MOOD)
<TEAM> change their attitude to <AI_MOOD>
Team_/Mood/Set the general attitude of a team.

ExecuteAction("NAMED_SET_REPULSOR", UNIT, BOOLEAN)
<UNIT> REPULSOR flag is <BOOLEAN>
Unit_/Internal/Repulsor/Set the REPULSOR flag of a specific unit.

ExecuteAction("TEAM_SET_REPULSOR", TEAM, BOOLEAN)
<TEAM> REPULSOR flag is <BOOLEAN>
Team_/Internal/Repulsor/Set the REPULSOR flag of a team.

ExecuteAction("NAMED_ATTACK_AREA", UNIT, TRIGGER_AREA)
<UNIT> attacks anything in <TRIGGER_AREA>
Unit_/Attack/Set a specific unit to attack a specific trigger area.

ExecuteAction("NAMED_ATTACK_AREA_FOR_SECONDS", UNIT, TRIGGER_AREA, INT)
<UNIT> attacks anything in <TRIGGER_AREA> for <INT> seconds.
Unit_/Attack/Set a specific unit to attack a specific trigger area for a number of seconds.

ExecuteAction("NAMED_ATTACK_TEAM", UNIT, TEAM)
<UNIT> attacks <TEAM>
Unit_/Attack/Set a specific unit to attack a team.

ExecuteAction("TEAM_ATTACK_AREA", TEAM, TRIGGER_AREA)
<TEAM> attack anything in <TRIGGER_AREA>
Team_/Attack/Set to attack -- trigger area.

ExecuteAction("TEAM_ATTACK_NAMED", TEAM, UNIT)
<TEAM> attacks <UNIT>
Team_/Attack/Set to attack -- specific unit.

ExecuteAction("TEAM_LOAD_TRANSPORTS", TEAM)
<TEAM> load into transports.
Team_/Transport/Transport -- automatically load.

ExecuteAction("NAMED_ENTER_NAMED", UNIT, UNIT)
<UNIT> loads into <UNIT>
Unit_/Transport/Transport -- load unit into specific.

ExecuteAction("TEAM_ENTER_NAMED", TEAM, UNIT)
<TEAM> attempt to load into <UNIT>
Team_/Transport/Transport -- load team into specific.

ExecuteAction("NAMED_EXIT_ALL", UNIT)
<UNIT> unloads.
Unit_/Transport/Transport -- unload units from specific.

ExecuteAction("TEAM_EXIT_ALL", TEAM)
<TEAM> unload.
Team_/Transport/Transport -- unload team from all.

ExecuteAction("NAMED_FOLLOW_WAYPOINTS", UNIT, WAYPOINT_PATH)
<UNIT> follows waypoints, beginning at <WAYPOINT_PATH>
Unit_/Move/Set a specific unit to follow a waypoint path.

ExecuteAction("NAMED_ATTACK_FOLLOW_WAYPOINTS", UNIT, WAYPOINT_PATH)
<UNIT> AttackMove follows waypoints, beginning at <WAYPOINT_PATH>
Unit_/AttackMove/Set a specific unit to follow a waypoint path.

ExecuteAction("NAMED_FOLLOW_WAYPOINTS_EXACT", UNIT, WAYPOINT_PATH)
<UNIT> EXACTLY follows waypoints, beginning at <WAYPOINT_PATH>
Unit_/Move/Set a specific unit to EXACTLY follow a waypoint path.

ExecuteAction("NAMED_GUARD", UNIT)
<UNIT> begins guarding.
Unit_/Move/Set to guard.

ExecuteAction("UNIT_GUARD_NEAREST_KINDOF", UNIT, KIND_OF)
<UNIT> begins guarding nearest kindof <KIND_OF>
Unit_/Move/Set to guard -- nearest kindof.

ExecuteAction("TEAM_GUARD", TEAM)
<TEAM> begins guarding.
Team_/Guard/Set to guard -- current location.

ExecuteAction("TEAM_GUARD_POSITION", TEAM, WAYPOINT)
<TEAM> begins guarding at <WAYPOINT>
Team_/Guard/Set to guard -- location.

ExecuteAction("TEAM_GUARD_OBJECT", TEAM, UNIT)
<TEAM> begins guarding <UNIT>
Team_/Guard/Set to guard -- specific unit.

ExecuteAction("TEAM_GUARD_TEAM", TEAM, TEAM)
Team <TEAM> begins guarding Team <TEAM>
Team_/Guard/Set to guard -- a team.

ExecuteAction("TEAM_GUARD_AREA", TEAM, TRIGGER_AREA)
<TEAM> begins guarding <TRIGGER_AREA>
Team_/Guard/Set to guard -- area.

ExecuteAction("TEAM_GUARD_AREA_FROM_POSITION", TEAM, TRIGGER_AREA, WAYPOINT)
<TEAM> begins guarding <TRIGGER_AREA> from Waypoint <WAYPOINT>
Team_/Guard/Set to guard -- area, from a waypoint.

ExecuteAction("TEAM_GUARD_NEAREST_KINDOF", TEAM, KIND_OF)
<TEAM> begins guarding nearest kindof <KIND_OF>
Team_/Guard/Set to guard -- nearest kindof.

ExecuteAction("UNIT_GUARD_POSITION", UNIT, WAYPOINT)
<UNIT> begins guarding at <WAYPOINT>
Unit_/Guard/Set to guard -- location.

ExecuteAction("UNIT_GUARD_OBJECT", UNIT, UNIT)
<UNIT> begins guarding <UNIT>
Unit_/Guard/Set to guard -- specific unit.

ExecuteAction("UNIT_GUARD_AREA", UNIT, TRIGGER_AREA)
<UNIT> begins guarding <TRIGGER_AREA>
Unit_/Guard/Set to guard -- area.

ExecuteAction("UNIT_GUARD_AREA_FROM_POSITION", UNIT, TRIGGER_AREA, WAYPOINT)
<UNIT> begins guarding <TRIGGER_AREA> from Waypoint <WAYPOINT>
Unit_/Guard/Set to guard -- area, from a waypoint.

ExecuteAction("NAMED_HUNT", UNIT)
<UNIT> begins hunting.
Unit_/Hunt/Set a specific unit to hunt.

ExecuteAction("TEAM_HUNT", TEAM)
<TEAM> begins hunting.
Team_/Hunt/Set to hunt.

ExecuteAction("PLAYER_HUNT", PLAYER)
<PLAYER> begins hunting.
Player_/Hunt/Set all of a player's units to hunt.

ExecuteAction("TEAM_HARVEST", TEAM, WAYPOINT)
<TEAM> begins harvesting around <WAYPOINT>.
Team_/Hunt/Set to harvest.

ExecuteAction("PLAYER_DISABLE_BASE_CONSTRUCTION", PLAYER)
<PLAYER> is unable to build buildings.
Player_/Build/Set a player to be unable to build buildings.

ExecuteAction("PLAYER_DISABLE_FACTORIES", PLAYER, OBJECT_TYPE)
<PLAYER> is unable to build from <OBJECT_TYPE>
Player_/Build/Set a player to be unable to build from a specific building.

ExecuteAction("PLAYER_DISABLE_UNIT_CONSTRUCTION", PLAYER)
<PLAYER> is unable to build units.
Player_/Build/Set a player to be unable to build units.

ExecuteAction("PLAYER_ENABLE_BASE_CONSTRUCTION", PLAYER)
<PLAYER> is able to build buildings.
Player_/Build/Set a player to be able to build buildings.

ExecuteAction("PLAYER_ENABLE_FACTORIES", PLAYER, OBJECT_TYPE)
<PLAYER> is able to build from <OBJECT_TYPE>
Player_/Build/Set a player to be able to build from a specific building.

ExecuteAction("PLAYER_ENABLE_UNIT_CONSTRUCTION", PLAYER)
<PLAYER> is able to build units.
Player_/Build/Set a player to be able to build units.

ExecuteAction("CAMERA_MOVE_HOME")
The camera moves to the home base.
Camera_/Move/Move the camera to the home position.

ExecuteAction("OVERSIZE_TERRAIN", INT)
Oversize the terrain <INT> tiles on each side [0 = reset to normal].
Camera_/Terrain/Oversize the terrain.

ExecuteAction("BUILD_TEAM", TEAM)
Start building team <TEAM>
Team_/AI/Start building a team.

ExecuteAction("NAMED_DAMAGE", UNIT, INT)
<UNIT> takes <INT> points of damage.
Unit_/Damage/Deal damage to a specific unit.

ExecuteAction("KILL_HORDE_MEMBERS", UNIT, REAL)
Horde <UNIT> kill off  <REAL> percent. 
Unit_/Damage/Kill off a percentage of the Horde.

ExecuteAction("NAMED_DELETE", UNIT)
<UNIT> is removed from the world.
Unit_/Damage or Remove/Delete a specific unit.

ExecuteAction("TEAM_DELETE", TEAM)
<TEAM> is removed from the world.
Team_/Damage or Remove/Delete a team.

ExecuteAction("TEAM_DELETE_LIVING", TEAM)
Each living member of team <TEAM> is removed from the world.
Team_/Damage or Remove/Delete a team, but ignore dead guys.

ExecuteAction("NAMED_SHOCK", UNIT, REAL, REAL, REAL, TEXT_STRING)
<UNIT> will be shocked dir (0-360) <REAL>, force <REAL>, zMult <REAL>, with FX named <TEXT_STRING> .
Unit_/Damage or Remove/Shock a specific unit.

ExecuteAction("NAMED_KILL", UNIT)
<UNIT>is dealt a lethal amount of damage.
Unit_/Damage or Remove/Kill a specific unit.

ExecuteAction("TEAM_KILL", TEAM)
<TEAM> is dealt a lethal amount of damage.
Team_/Damage or Remove/Kill an entire team.

ExecuteAction("PLAYER_KILL", PLAYER)
All of <PLAYER>'s buildings and units are dealt a lethal amount of damage.
Player_/Damage or Remove/Kill a player.

ExecuteAction("DISPLAY_TEXT", LOCALIZED_TEXT)
Displays <LOCALIZED_TEXT> in the text log and message area.
User_/String/Display a string.

ExecuteAction("DISPLAY_CINEMATIC_TEXT", LOCALIZED_TEXT, FONT_TYPE, INT)
Displays <LOCALIZED_TEXT> with font type <FONT_TYPE> in the bottom letterbox for <INT> seconds.
User_/String/Display a cinematic string.

ExecuteAction("CAMEO_FLASH", COMMAND_BUTTON, INT)
<COMMAND_BUTTON> flashes for <INT> seconds.
User_/Flash/Flash a cameo for a specified amount of time.

ExecuteAction("NAMED_FLASH", UNIT, INT)
<UNIT> flashes for <INT> seconds.
User_/Flash/Flash a specific unit for a specified amount of time.

ExecuteAction("TEAM_FLASH", TEAM, INT)
<TEAM> flashes for <INT> seconds.
User_/Flash/Flash a team for a specified amount of time.

ExecuteAction("NAMED_CUSTOM_COLOR", UNIT, COLOR)
<UNIT> uses the color <COLOR> .
User_/Flash/Set a specific unit to use a special indicator color.

ExecuteAction("NAMED_FLASH_WHITE", UNIT, INT)
<UNIT> flashes white for <INT> seconds.
User_/Flash/Flash a specific unit white for a specified amount of time.

ExecuteAction("TEAM_FLASH_WHITE", TEAM, INT)
<TEAM> flashes white for <INT> seconds.
User_/Flash/Flash a team white for a specified amount of time.

ExecuteAction("MOVIE_PLAY_FULLSCREEN", MOVIE, BOOLEAN)
<MOVIE> plays fullscreen but doesn't play for low detail ( <BOOLEAN> )
Interface/Play a movie in fullscreen mode.

ExecuteAction("MOVIE_PLAY_RADAR", MOVIE)
<MOVIE> plays in the palantir window.
Multimedia_/Movie/Play a movie in the palantir.

ExecuteAction("SOUND_PLAY_NAMED", SOUND, UNIT)
<SOUND> plays as though coming from <UNIT>
Multimedia_/Sound Effects/Play a sound as though coming from a specific unit.

ExecuteAction("SPEECH_PLAY", DIALOG, BOOLEAN)
<DIALOG> plays, allowing overlap <BOOLEAN> (true to allow, false to disallow).
Multimedia_/Sound Effects/Play a speech file.

ExecuteAction("PLAYER_TRANSFER_OWNERSHIP_PLAYER", PLAYER, PLAYER)
All assets of <PLAYER> are transferred to <PLAYER>
Player_/Transfer/Transfer assets from one player to another player.

ExecuteAction("NAMED_TRANSFER_OWNERSHIP_PLAYER", UNIT, PLAYER)
<UNIT> is transferred to the command of <PLAYER>
Player_/Transfer/Transfer a specific unit to the control of a player.

ExecuteAction("PLAYER_EXCLUDE_FROM_SCORE_SCREEN", PLAYER)
Exclude <PLAYER> from the score screen.
Player_/Score/Exclude this player from the score screen.

ExecuteAction("ENABLE_SCORING")
Turn on scoring.
Player_/Score/Turn on scoring.

ExecuteAction("DISABLE_SCORING")
Turn off scoring.
Player_/Score/Turn off scoring.

ExecuteAction("PLAYER_RELATES_PLAYER", PLAYER, PLAYER, RELATION)
<PLAYER> considers <PLAYER> to be <RELATION>
Player_/Alliances/Change how a player relates to another player.

ExecuteAction("RADAR_CREATE_EVENT", COORD3D, RADAR_EVENT)
A radar event occurs at <COORD3D> of type <RADAR_EVENT>
Radar_/Create Event/Create a radar event at a specified location.

ExecuteAction("OBJECT_CREATE_RADAR_EVENT", UNIT, RADAR_EVENT)
A radar event occurs at <UNIT> of type <RADAR_EVENT>
Radar_/Create Event/Create a radar event at a specific object.

ExecuteAction("TEAM_CREATE_RADAR_EVENT", TEAM, RADAR_EVENT)
A radar event occurs at <TEAM> of type <RADAR_EVENT>
Radar_/Create Event/Create a radar event at a specific team.

ExecuteAction("RADAR_DISABLE")
The radar is disabled.
Radar_/Control/Disable the radar.

ExecuteAction("RADAR_ENABLE")
The radar is enabled.
Radar_/Control/Enable the radar.

ExecuteAction("NAMED_SET_CAMERA_FADING", UNIT, BOOLEAN)
Set <UNIT> camera fading to <BOOLEAN>.
Unit_/Status/Camera fading set enabled or disabled.

ExecuteAction("NAMED_SET_STEALTH_ENABLED", UNIT, BOOLEAN)
Set <UNIT> stealth ability to <BOOLEAN>.
Unit_/Status/Stealth set enabled or disabled.

ExecuteAction("TEAM_SET_STEALTH_ENABLED", TEAM, BOOLEAN)
Set <TEAM> stealth ability to <BOOLEAN>.
Team_/Status/Stealth set enabled or disabled.

ExecuteAction("NAMED_SET_STRICT_CONTROL_ENABLED", UNIT, BOOLEAN)
Set <UNIT> strict control to <BOOLEAN>.
Unit_/Status/Strict Control set enabled or disabled.

ExecuteAction("TEAM_SET_STRICT_CONTROL_ENABLED", TEAM, BOOLEAN)
Set <TEAM> strict control to <BOOLEAN>.
Team_/Status/Strict Control set enabled or disabled.

ExecuteAction("MAP_REVEAL_AT_WAYPOINT", WAYPOINT, REAL, PLAYER)
The map is revealed at <WAYPOINT> with a radius of <REAL> feet for <PLAYER>.
Map_/Shroud or Reveal/Reveal map at waypoint -- fog.

ExecuteAction("MAP_REVEAL_IN_TRIGGER", TRIGGER_AREA, PLAYER)
The map is revealed inside <TRIGGER_AREA> for <PLAYER>.
Map_/Shroud or Reveal/Reveal map inside trigger -- fog.

ExecuteAction("MAP_SHROUD_AT_WAYPOINT", WAYPOINT, REAL, PLAYER)
The map is shrouded at <WAYPOINT> with a radius of <REAL> feet for <PLAYER>.
Map_/Shroud or Reveal/Shroud map at waypoint -- add fog.

ExecuteAction("MAP_REVEAL_IN_TRIGGER", TRIGGER_AREA, PLAYER)
The map is shrouded inside <TRIGGER_AREA> for <PLAYER>.
Map_/Shroud or Reveal/Reveal map inside trigger -- fog.

ExecuteAction("MAP_REVEAL_ALL", PLAYER)
The world is revealed for <PLAYER>.
Map_/Shroud or Reveal/Reveal the entire map for a player.

ExecuteAction("MAP_REVEAL_ALL_PERM", PLAYER)
The world is revealed permanently for <PLAYER>.
Map_/Shroud or Reveal/Reveal the entire map permanently for a player.

ExecuteAction("MAP_REVEAL_ALL_UNDO_PERM", PLAYER)
Undo the permanent reveal for <PLAYER>.  This will mess things up badly if called when there has been no permanent reveal.
Map_/Shroud or Reveal/Un-Reveal the entire map permanently for a player.

ExecuteAction("MAP_SHROUD_ALL", PLAYER)
The world is shrouded for <PLAYER>.
Map_/Shroud or Reveal/Shroud the entire map for a player.

ExecuteAction("DISABLE_BORDER_SHROUD")
Shroud off the map edges is turned off.
Map_/Shroud or Reveal/Border Shroud is turned off.

ExecuteAction("ENABLE_BORDER_SHROUD")
Shroud off the map edges is turned on.
Map_/Shroud or Reveal/Border Shroud is turned on.

ExecuteAction("TEAM_GARRISON_SPECIFIC_BUILDING", TEAM, UNIT)
<TEAM> enters into building named <UNIT>
Team_/Garrison/Garrison a specific building with a team.

ExecuteAction("EXIT_SPECIFIC_BUILDING", UNIT)
<UNIT> empties.
Unit_/Garrison/Empty a specific building.

ExecuteAction("TEAM_GARRISON_NEAREST_BUILDING", TEAM)
<TEAM> garrison a nearby building.
Team_/Garrison/Garrison a nearby building with a team.

ExecuteAction("TEAM_EXIT_ALL_BUILDINGS", TEAM)
<TEAM> exits all buildings.
Team_/Garrison/Exit all buildings a team is in.

ExecuteAction("NAMED_GARRISON_SPECIFIC_BUILDING", UNIT, UNIT)
<UNIT> garrison building <UNIT>
Unit_/Garrison/Garrison a specific building with a specific unit.

ExecuteAction("NAMED_GARRISON_SPECIFIC_BUILDING_INSTANTLY", UNIT, UNIT)
<UNIT> garrison building <UNIT> instantly.
Unit_/Garrison/Garrison a specific building instantly with a specific unit.

ExecuteAction("TEAM_GARRISON_SPECIFIC_BUILDING_INSTANTLY", TEAM, UNIT)
<TEAM> garrison building <UNIT> instantly.
Team_/Garrison/Garrison a specific building instantly with a specific team.

ExecuteAction("TEAM_GARRISON_TEAM_INSTANTLY", TEAM, TEAM)
<TEAM> garrison team <TEAM> instantly.
Team_/Garrison/Garrison a specific team instantly with a specific team.

ExecuteAction("NAMED_GARRISON_NEAREST_BUILDING", UNIT)
<UNIT> garrison a nearby building.
Unit_/Garrison/Garrison a nearby building with a specific unit.

ExecuteAction("NAMED_EXIT_BUILDING", UNIT)
<UNIT> leaves the building.
Unit_/Garrison/Exit the building the unit is in.

ExecuteAction("PLAYER_GARRISON_ALL_BUILDINGS", PLAYER)
<PLAYER> garrison buildings.
Player_/Garrison/Garrison as many buildings as player has units for.

ExecuteAction("PLAYER_EXIT_ALL_BUILDINGS", PLAYER)
<PLAYER> evacuate.
Player_/Garrison/All units leave their garrisons.

ExecuteAction("TEAM_AVAILABLE_FOR_RECRUITMENT", TEAM, BOOLEAN)
<TEAM> sets their willingness to join teams to <BOOLEAN>
Team_/AI/Set whether members of a team can be recruited into another team.

ExecuteAction("TEAM_COLLECT_NEARBY_FOR_TEAM", TEAM)
<TEAM> attempts to collect nearby units for a team.
Team_/AI/Set to collect nearby units.

ExecuteAction("TEAM_MERGE_INTO_TEAM", TEAM, TEAM)
<TEAM> merges onto <TEAM>
Team_/Merge/Merge a team into another team.

ExecuteAction("IDLE_ALL_UNITS")
Idle all units for all players.
Scripting_/Idle or Restart/Idle all units for all players.

ExecuteAction("RESUME_SUPPLY_TRUCKING")
All idle Supply Trucks attempt to resume supply routes.
Scripting_/Idle or Restart/All idle Supply Trucks attempt to resume supply routes.

ExecuteAction("DISABLE_INPUT")
Disable mouse and keyboard input.
User_/Input/User input -- disable.

ExecuteAction("ENABLE_INPUT")
Enable mouse and keyboard input.
User_/Input/User input -- enable.

ExecuteAction("SOUND_AMBIENT_PAUSE")
Pause the ambient sounds.
Multimedia_/SoundEffects/Pause the ambient sounds.

ExecuteAction("SOUND_AMBIENT_RESUME")
Resume the ambient sounds.
Multimedia_/SoundEffects/Resume the ambient sounds.

ExecuteAction("MUSIC_SET_TRACK", MUSIC, BOOLEAN, BOOLEAN)
Play <MUSIC> using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>).
Multimedia_/Music/Play a music track.

ExecuteAction("AUDIO_PUSH_MUSIC", MUSIC, BOOLEAN, BOOLEAN)
Push (stack) <MUSIC> atop the current music track using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>).
Multimedia_/Music/Push music track.

ExecuteAction("AUDIO_POP_MUSIC", BOOLEAN, BOOLEAN)
Pop the current music track off the stack using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>).
Multimedia_/Music/Pop music track.

ExecuteAction("MUSIC_SCRIPT_SET_TRACK", MUSIC, BOOLEAN, BOOLEAN)
Play <MUSIC> using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>) as part of the music scripting system.
Multimedia_/Music Scripting Internal (music.scb only!)/Play a music track as part of the music scripting system.

ExecuteAction("MUSIC_SCRIPT_PUSH_MUSIC", MUSIC, BOOLEAN, BOOLEAN)
Push (stack) <MUSIC> atop the current music track using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>) as part of the music scripting system.
Multimedia_/Music Scripting Internal (music.scb only!)/Push music track as part of the music scripting system.

ExecuteAction("MUSIC_SCRIPT_POP_MUSIC", BOOLEAN, BOOLEAN)
Pop the current music scripting system's music track off the stack using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>).
Multimedia_/Music Scripting Internal (music.scb only!)/Pop music track as part of the music scripting system.

ExecuteAction("MUSIC_PLAY_TRACK_FINITE_TIMES", MUSIC, INT, BOOLEAN, BOOLEAN)
Play <MUSIC> <INT> times using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>).
Multimedia_/Music/Play a music track a certain number of times.

ExecuteAction("MUSIC_PLAY_TRACK_FINITE_TIMES_AND_NOTIFY", MUSIC, INT, BOOLEAN, BOOLEAN, FLAG)
Play <MUSIC> <INT> times using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>), then set <FLAG> to TRUE.
Multimedia_/Music/Play a music track a certain number of times, then set a flag.

ExecuteAction("MUSIC_PUSH_TRACK_FINITE_TIMES", MUSIC, INT, BOOLEAN, BOOLEAN)
Push (stack) <MUSIC> atop the current music track and play it <INT> times using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>). (Does NOT pop the music off the stack upon completion.) 
Multimedia_/Music/Push music track to play a certain number of times.

ExecuteAction("MUSIC_PUSH_TRACK_FINITE_TIMES_AND_NOTIFY", MUSIC, INT, BOOLEAN, BOOLEAN, FLAG)
Push (stack) <MUSIC> atop the current music track and play it <INT> times using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>), then set <FLAG> to TRUE. (Does NOT pop the music off the stack upon completion.) 
Multimedia_/Music/Push music track to play a certain number of times, then set a flag.

ExecuteAction("MUSIC_SCRIPT_PLAY_TRACK_FINITE_TIMES", MUSIC, INT, BOOLEAN, BOOLEAN)
Play <MUSIC> <INT> times as part of the music scripting system, using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>).
Multimedia_/Music Scripting Internal (music.scb only!)/Play a music track as part of a music script a certain number of times.

ExecuteAction("MUSIC_SCRIPT_PLAY_TRACK_FINITE_TIMES_AND_NOTIFY", MUSIC, INT, BOOLEAN, BOOLEAN, FLAG)
Play <MUSIC> <INT> times as of the music scripting system using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>), then set <FLAG> to TRUE.
Multimedia_/Music Scripting Internal (music.scb only!)/Play a music track as part of the music scripting system a certain number of times, then set a flag.

ExecuteAction("MUSIC_SCRIPT_PUSH_TRACK_FINITE_TIMES", MUSIC, INT, BOOLEAN, BOOLEAN)
Push (stack) <MUSIC> atop the current music scripting music track and play it <INT> times using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>). (Does NOT pop the music off the stack upon completion.) 
Multimedia_/Music Scripting Internal (music.scb only!)/Push music track to play as part of the music scripting system a certain number of times.

ExecuteAction("MUSIC_SCRIPT_PUSH_TRACK_FINITE_TIMES_AND_NOTIFY", MUSIC, INT, BOOLEAN, BOOLEAN, FLAG)
Push (stack) <MUSIC> atop the current music scripting music track and play it <INT> times using fadeout (<BOOLEAN>) and fadein (<BOOLEAN>), then set <FLAG> to TRUE. (Does NOT pop the music off the stack upon completion.) 
Multimedia_/Music Scripting Internal (music.scb only!)/Push music track to play as part of the music scripting system a certain number of times, then set a flag.

ExecuteAction("MUSIC_TURN_OFF_MUSIC_SCRIPTING", BOOLEAN)
Turn off the music scripting system, fading out (<BOOLEAN>) the music scripting system's current music.
Multimedia_/Music/Turn off music scripting.

ExecuteAction("MUSIC_RETURN_TO_MUSIC_SCRIPTING", BOOLEAN, BOOLEAN)
Resume use of (turn on) the music scripting system, fading out (<BOOLEAN>) the current music track and fading in (<BOOLEAN>) the music scripting system's music.
Multimedia_/Music/Return to music scripting.

ExecuteAction("MUSIC_RESET_MUSIC_SCRIPTING_SYSTEM", BOOLEAN)
Reset the music scripting system, as if the level had just started, fading out (<BOOLEAN>) the music scripting system's current music.
Multimedia_/Music/Reset music scripting system.

ExecuteAction("CAMERA_LETTERBOX_BEGIN")
Start letterbox mode (hide UI, add border).
Camera_/Letterbox/Start letterbox mode.

ExecuteAction("CAMERA_LETTERBOX_END")
End letterbox mode (show UI, remove border).
Camera_/ End letterbox mode.

ExecuteAction("HIDE_UI")
Hide UI (like letterbox mode, but with no border).
Camera_/Hide UI

ExecuteAction("SHOW_UI")
Show UI
Camera_/Show UI

ExecuteAction("FREEZE_TIME")
Freeze time.
Scripting_/Time/Freeze time.

ExecuteAction("UNFREEZE_TIME")
Unfreeze time.
Scripting_/Time/Unfreeze time.

ExecuteAction("SHOW_MILITARY_CAPTION", LOCALIZED_TEXT, REAL)
Show military briefing <LOCALIZED_TEXT> for <REAL> seconds.
Scripting_/Briefing/Show military briefing caption.

ExecuteAction("CAMERA_SET_AUDIBLE_DISTANCE", REAL)
Set the audible range during camera-up shots to <REAL>
Camera_/Sounds/Set the audible distance for camera-up shots.

ExecuteAction("NAMED_SET_HELD", UNIT, BOOLEAN)
Set Held status for <UNIT> to <BOOLEAN>.
Unit_/Move/Set unit to be held in place, ignoring Physics, Locomotors, etc.

ExecuteAction("NAMED_SET_STOPPING_DISTANCE", UNIT, REAL)
Set stopping distance for <UNIT> to <REAL>.
Unit_/Move/Set stopping distance for current locomotor.

ExecuteAction("SET_STOPPING_DISTANCE", TEAM, REAL)
Set stopping distances for <TEAM> to <REAL>.
Team_/Move/Set stopping distance for each unit's current locomotor.

ExecuteAction("SET_FPS_LIMIT", INT)
Set max FPS to <INT>.  (0 sets to default.)
Scripting_/ Set max frames per second.

ExecuteAction("DISABLE_SPECIAL_POWER_DISPLAY")
Disables special power countdown display.
Scripting_/ Special power countdown display -- disable.

ExecuteAction("ENABLE_SPECIAL_POWER_DISPLAY")
Enables special power countdown display.
Scripting_/ Special power countdown display -- enable.

ExecuteAction("NAMED_HIDE_SPECIAL_POWER_DISPLAY", UNIT)
Hides special power countdowns for <UNIT>.
Unit_/ Special power countdown timer -- hide.

ExecuteAction("NAMED_SHOW_SPECIAL_POWER_DISPLAY", UNIT)
Shows special power countdowns for <UNIT>.
Unit_/ Special power countdown timer -- display.

ExecuteAction("MUSIC_SET_VOLUME", REAL)
Set the desired music volume to <REAL>%. (0-100)
Multimedia_/ Set the current music volume.

ExecuteAction("TEAM_TRANSFER_TO_PLAYER", TEAM, PLAYER)
Control of <TEAM> transfers to <PLAYER>
Team_/ Transfer control of a team to a player.

ExecuteAction("PLAYER_SET_MONEY", PLAYER, INT)
Set <PLAYER>'s money to $<INT>
Player_/ Set player's money.

ExecuteAction("PLAYER_GIVE_MONEY", PLAYER, INT)
<PLAYER> gets $<INT>
Player_/ Gives/takes from player's money.

ExecuteAction("DISPLAY_COUNTER", COUNTER, LOCALIZED_TEXT)
Show <COUNTER> with text <LOCALIZED_TEXT>
Scripting_/ Counter -- display an individual counter to the user.

ExecuteAction("HIDE_COUNTER", COUNTER)
Hide <COUNTER>
Scripting_/ Counter -- hides an individual counter from the user.

ExecuteAction("DISPLAY_COUNTDOWN_TIMER", COUNTER, LOCALIZED_TEXT)
Show <COUNTER> with text <LOCALIZED_TEXT>
Scripting_/ Timer -- display an individual timer to the user.

ExecuteAction("HIDE_COUNTDOWN_TIMER", COUNTER)
Hide <COUNTER>
Scripting_/ Timer -- hides an individual timer from the user.

ExecuteAction("DISABLE_COUNTDOWN_TIMER_DISPLAY")
Disables timer display.
Scripting_/ Timer -- hide all timers from the user.

ExecuteAction("ENABLE_COUNTDOWN_TIMER_DISPLAY")
Enables timer display.
Scripting_/ Timer -- display all timers to the user.

ExecuteAction("NAMED_STOP_SPECIAL_POWER_COUNTDOWN", UNIT, SPECIAL_POWER)
Pause <UNIT>'s <SPECIAL_POWER> countdown.
Unit_/ Special power countdown timer -- pause.

ExecuteAction("NAMED_START_SPECIAL_POWER_COUNTDOWN", UNIT, SPECIAL_POWER)
Resume <UNIT>'s <SPECIAL_POWER> countdown.
Unit_/ Special power countdown timer -- resume.

ExecuteAction("NAMED_SET_SPECIAL_POWER_COUNTDOWN", UNIT, SPECIAL_POWER, INT)
Set <UNIT>'s <SPECIAL_POWER> to <INT> seconds.
Unit_/ Special power countdown timer -- set.

ExecuteAction("PLAYER_SET_SPECIAL_POWER_COUNTDOWN", PLAYER, SPECIAL_POWER, INT)
Set <PLAYER>'s <SPECIAL_POWER> to <INT> seconds.
Player/ Special power countdown timer -- set.

ExecuteAction("NAMED_ADD_SPECIAL_POWER_COUNTDOWN", UNIT, SPECIAL_POWER, INT)
<UNIT>'s <SPECIAL_POWER> has <INT> seconds added to it.
Unit_/ Special power countdown timer -- add seconds.

ExecuteAction("PLAYER_FIRE_SPECIAL_POWER_AT_WAYPOINT", PLAYER, SPECIAL_POWER, WAYPOINT)
<PLAYER> fires <SPECIAL_POWER> at <WAYPOINT>.
Skirmish_/ Special power -- fire at location.

ExecuteAction("SKIRMISH_FIRE_SPECIAL_POWER_AT_MOST_COST", PLAYER, SPECIAL_POWER)
<PLAYER> fire <SPECIAL_POWER> at enemy's most costly area.
Skirmish_/ Special power -- fire at enemy's highest cost area.

ExecuteAction("FIRE_SPECIAL_POWER_ON_NEAREST_OBJECTTYPE", PLAYER, SPECIAL_POWER, OBJECT_TYPE_LIST, TEAM)
<PLAYER> fire <SPECIAL_POWER> on nearest object of <OBJECT_TYPE_LIST> to <TEAM>
Player/ Special power -- fire on nearest object type.

ExecuteAction("FIRE_SPECIAL_POWER_ON_NEAREST_OBJECTTYPE_BY_PLAYER", PLAYER, SPECIAL_POWER, OBJECT_TYPE_LIST, TEAM, PLAYER)
<PLAYER> fire <SPECIAL_POWER> on nearest object of <OBJECT_TYPE_LIST> to <TEAM> owned by <PLAYER>
Player/ Special power -- fire on nearest object type owned by player.

ExecuteAction("FIRE_SPECIAL_POWER_ON_TEAM", PLAYER, SPECIAL_POWER, TEAM)
<PLAYER> fire <SPECIAL_POWER> on <TEAM>
Player/ Special power -- fire on team.

ExecuteAction("PLAYER_REPAIR_NAMED_STRUCTURE", PLAYER, UNIT)
Have <PLAYER> repair <UNIT>.
Player_/ Repair named bridge or structure.

ExecuteAction("NAMED_FIRE_SPECIAL_POWER_AT_WAYPOINT", UNIT, SPECIAL_POWER, WAYPOINT)
<UNIT> fires <SPECIAL_POWER> at <WAYPOINT>.
Unit_/ Special power -- fire at location.

ExecuteAction("NAMED_FIRE_SPECIAL_POWER_AT_NAMED", UNIT, SPECIAL_POWER, UNIT)
<UNIT> fires <SPECIAL_POWER> at <UNIT>.
Unit_/ Special power -- fire at unit.

ExecuteAction("REFRESH_RADAR")
Refresh radar terrain.
Scripting_/ Refresh radar terrain.

ExecuteAction("NAMED_STOP", UNIT)
<UNIT> stops.
Unit_/ Set a specific unit to stop.

ExecuteAction("TEAM_STOP", TEAM)
<TEAM> stops.
Team_/ Set to stop.

ExecuteAction("TEAM_STOP_AND_DISBAND", TEAM)
<TEAM> stops, then disbands.
Team_/ Set to stop, then disband.

ExecuteAction("TEAM_SET_OVERRIDE_RELATION_TO_TEAM", TEAM, TEAM, RELATION)
<TEAM> considers <TEAM> to be <RELATION> (rather than using the the player relationship).
Team_/ Override a team's relationship to another team.

ExecuteAction("TEAM_REMOVE_OVERRIDE_RELATION_TO_TEAM", TEAM, TEAM)
<TEAM> uses the player relationship to <TEAM>
Team_/ Remove an override to a team's relationship to another team.

ExecuteAction("TEAM_REMOVE_ALL_OVERRIDE_RELATIONS", TEAM)
<TEAM> uses the player relationship to all other teams and players.
Team_/ Remove all overrides to team's relationship to teams and/or players.

ExecuteAction("CAMERA_TETHER_NAMED", UNIT, BOOLEAN, REAL)
Have the camera tethered to <UNIT>.  Snap camera to object is <BOOLEAN>.  Amount of play is <REAL>.
Camera_/ Tether camera to a specific unit.

ExecuteAction("CAMERA_STOP_TETHER_NAMED")
Stop tether to any units.
Camera_/ Stop tether to any units.

ExecuteAction("CAMERA_SET_DEFAULT", REAL, REAL, REAL)
Camera Pitch = <REAL>(0.0==default), angle = <REAL>(0.0 is N, 90.0 is W, etc), height = <REAL>(1.0==default).
Camera_/ Set default camera.

ExecuteAction("CAMERA_LOOK_TOWARD_OBJECT", UNIT, REAL, REAL, REAL, REAL, REAL)
Rotate toward <UNIT>, taking <REAL> seconds and holding <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds with z-offset of <REAL>.
Camera (R)_/ Rotate toward unit.

ExecuteAction("CAMERA_LOOK_TOWARD_WAYPOINT", WAYPOINT, REAL, REAL, REAL, BOOLEAN)
Rotate to look at <WAYPOINT>, taking <REAL> seconds, ease-in <REAL> seconds, ease-out <REAL> seconds, reverse rotation <BOOLEAN>.
Camera (R)_/ Rotate to look at a waypoint.

ExecuteAction("UNIT_DESTROY_ALL_CONTAINED", UNIT)
All units inside <UNIT> are killed.
Unit_/ Kill all units contained within a specific transport or structure.

ExecuteAction("NAMED_FIRE_WEAPON_FOLLOWING_WAYPOINT_PATH", UNIT, WAYPOINT_PATH)
<UNIT> fire waypoint-weapon following waypoints starting at <WAYPOINT_PATH>.
Unit_/ Fire waypoint-weapon following waypoint path.

ExecuteAction("TEAM_SET_OVERRIDE_RELATION_TO_PLAYER", TEAM, PLAYER, RELATION)
<TEAM> considers <PLAYER> to be <RELATION> (rather than using the the player relationship).
Team_/ Override a team's relationship to another player.

ExecuteAction("TEAM_REMOVE_OVERRIDE_RELATION_TO_PLAYER", TEAM, PLAYER)
<TEAM> uses the player relationship to <PLAYER>
Team_/ Remove an override to a team's relationship to another player.

ExecuteAction("PLAYER_SET_OVERRIDE_RELATION_TO_TEAM", PLAYER, TEAM, RELATION)
<PLAYER> considers <TEAM> to be <RELATION> (rather than using the the player relationship).
Player_/ Override a player's relationship to another team.

ExecuteAction("PLAYER_REMOVE_OVERRIDE_RELATION_TO_TEAM", PLAYER, TEAM)
<PLAYER> uses the player relationship to <TEAM>
Player_/ Remove an override to a player's relationship to another team.

ExecuteAction("UNIT_EXECUTE_SEQUENTIAL_SCRIPT", UNIT, SCRIPT)
<UNIT> executes <SCRIPT> sequentially.
Unit_/ Set a specific unit to execute a script sequentially.

ExecuteAction("UNIT_EXECUTE_SEQUENTIAL_SCRIPT_LOOPING", UNIT, SCRIPT, INT)
<UNIT> executes <SCRIPT> sequentially, <INT> times. (0=forever)
Unit_/ Set a specific unit to execute a looping sequential script.

ExecuteAction("TEAM_EXECUTE_SEQUENTIAL_SCRIPT", TEAM, SCRIPT)
<TEAM> executes <SCRIPT> sequentially.
Team_/ Execute script sequentially -- start.

ExecuteAction("TEAM_EXECUTE_SEQUENTIAL_SCRIPT_LOOPING", TEAM, SCRIPT, INT)
<TEAM> executes <SCRIPT> sequentially, <INT> times. (0=forever)
Team_/ Execute script sequentially -- looping.

ExecuteAction("UNIT_STOP_SEQUENTIAL_SCRIPT", UNIT)
<UNIT> stops executing.
Unit_/ Set a specific unit to stop executing a sequential script.

ExecuteAction("TEAM_STOP_SEQUENTIAL_SCRIPT", TEAM)
<TEAM> stops executing.
Team_/ Execute script sequentially -- stop.

ExecuteAction("UNIT_GUARD_FOR_FRAMECOUNT", UNIT, INT)
<UNIT> guards for <INT> frames.
Unit_/ Set to guard for some number of frames.

ExecuteAction("UNIT_IDLE_FOR_FRAMECOUNT", UNIT, INT)
<UNIT> idles for <INT> frames.
Unit_/ Set to idle for some number of frames.

ExecuteAction("UNIT_GUARD_FOR_SECONDS", UNIT, INT)
<UNIT> guards for <INT> seconds.
Unit_/ Set to guard for some number of seconds.

ExecuteAction("UNIT_IDLE_FOR_SECONDS", UNIT, INT)
<UNIT> idles for <INT> seconds.
Unit_/ Set to idle for some number of seconds.

ExecuteAction("UNIT_SET_MODELCONDITION", UNIT, INT, BOOLEAN)
<UNIT> sets custom model condition number (1-4) <INT> to <BOOLEAN>.
Unit_/ Set or clear a custom model condition flag on a unit.

ExecuteAction("TEAM_SET_MODELCONDITION", TEAM, INT, BOOLEAN)
<TEAM> sets custom model condition number (1-4) <INT> to <BOOLEAN>.
Team_/ Set or clear a custom model condition flag on a team.

ExecuteAction("UNIT_SET_MODELCONDITION_FOR_DURATION", UNIT, MODEL_CONDITION, REAL, PERCENT)
<UNIT> sets model condition <MODEL_CONDITION> for <REAL> seconds. Percentage (hordes) <PERCENT>.
Unit_/ Set a model condition flag on a unit for duration. % specifies # of members in horde that get this.

ExecuteAction("TEAM_SET_MODELCONDITION_FOR_DURATION", TEAM, MODEL_CONDITION, REAL, PERCENT)
<TEAM> sets model condition <MODEL_CONDITION> for <REAL> seconds. Percentage <PERCENT>.
Team_/ Set a model condition flag on a team for duration. % specifies # of members that get this.

ExecuteAction("UNIT_SET_FLAME_STATUS", UNIT, BOOLEAN)
<UNIT> is now on fire (T-F) <BOOLEAN> .
Unit_/ Set or clear the Aflame status on a unit.

ExecuteAction("TEAM_SET_FLAME_STATUS", UNIT, BOOLEAN)
<UNIT> is now on fire (T-F) <BOOLEAN> .
Team_/ Set or clear the Aflame status on a team.

ExecuteAction("TEAM_GUARD_FOR_FRAMECOUNT", TEAM, INT)
<TEAM> guards for <INT> frames.
Team_/ Set to guard -- number of frames.

ExecuteAction("TEAM_IDLE_FOR_FRAMECOUNT", TEAM, INT)
<TEAM> idles for <INT> frames.
Team_/ Set to idle for some number of frames.

ExecuteAction("TEAM_GUARD_FOR_SECONDS", TEAM, INT)
<TEAM> guards for <INT> seconds.
Team_/ Set to guard -- number of seconds.

ExecuteAction("TEAM_IDLE_FOR_SECONDS", TEAM, INT)
<TEAM> idles for <INT> seconds.
Team_/ Set to idle for some number of seconds.

ExecuteAction("WATER_CHANGE_HEIGHT", TRIGGER_AREA, REAL)
<TRIGGER_AREA> changes altitude to <REAL>
Map_/ Adjust water height to a new level

ExecuteAction("HUMAN_IMPASSABLE_AREA", TRIGGER_AREA, BOOLEAN)
Make area <TRIGGER_AREA> impassable for human player: <BOOLEAN>
Map_/ Make area impassable for human player

ExecuteAction("WATER_CHANGE_HEIGHT_OVER_TIME", TRIGGER_AREA, REAL, REAL, REAL)
<TRIGGER_AREA> changes altitude to <REAL> in <REAL> seconds doing <REAL> dam_/sec.
Map_/ Adjust water height to a new level with damage over time

ExecuteAction("NAMED_USE_COMMANDBUTTON_ABILITY", UNIT, COMMANDBUTTON_ABILITY_UNIT)
<UNIT> use <COMMANDBUTTON_ABILITY_UNIT>.
Unit_/ Use commandbutton ability.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ABILITY_ON_NAMED", UNIT, COMMANDBUTTON_ABILITY_UNIT, UNIT)
<UNIT> use <COMMANDBUTTON_ABILITY_UNIT> on <UNIT>.
Unit_/ Use commandbutton ability on an object.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ABILITY_AT_WAYPOINT", UNIT, COMMANDBUTTON_ABILITY_UNIT, WAYPOINT)
<UNIT> use <COMMANDBUTTON_ABILITY_UNIT> at <WAYPOINT>.
Unit_/ Use commandbutton ability at a waypoint.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ON_NEAREST_ENEMY_UNIT", UNIT, COMMANDBUTTON_ABILITY_TEAM)
<UNIT> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy unit.
Unit_/ Use command ability -- all -- nearest enemy unit

ExecuteAction("NAMED_USE_COMMANDBUTTON_ON_NEAREST_GARRISONED_BUILDING", UNIT, COMMANDBUTTON_ABILITY_TEAM)
<UNIT> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy garrisoned building.
Unit_/ Use command ability -- all -- nearest enemy garrisoned building.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ON_NEAREST_KINDOF", UNIT, COMMANDBUTTON_ABILITY_TEAM, KIND_OF)
<UNIT> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy with <KIND_OF>.
Unit_/ Use command ability -- all -- nearest enemy object with kind of.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ON_NEAREST_ENEMY_BUILDING", UNIT, COMMANDBUTTON_ABILITY_TEAM)
<UNIT> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy building.
Unit_/ Use command ability -- all -- nearest enemy building.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ON_NEAREST_ENEMY_BUILDING_CLASS", UNIT, COMMANDBUTTON_ABILITY_TEAM, KIND_OF)
<UNIT> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy building with <KIND_OF>
Unit_/ Use command ability -- all -- nearest enemy building kindof.

ExecuteAction("NAMED_USE_COMMANDBUTTON_ON_NEAREST_OBJECTTYPE", UNIT, COMMANDBUTTON_ABILITY_TEAM, OBJECT_TYPE)
<UNIT> use <COMMANDBUTTON_ABILITY_TEAM> on nearest object of type <OBJECT_TYPE>.
Unit_/ Use command ability -- all -- nearest object type.

ExecuteAction("NAMED_BUILD_STRUCTURE_AT_WAYPOINT", UNIT, OBJECT_TYPE, ANGLE, WAYPOINT)
<UNIT> build <OBJECT_TYPE> at angle <ANGLE> at <WAYPOINT>.
Unit_/ Build thing at waypoint.

ExecuteAction("TEAM_USE_COMMANDBUTTON_ABILITY", TEAM, COMMANDBUTTON_ABILITY_TEAM)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>.
Team_/ Use commandbutton ability.

ExecuteAction("TEAM_USE_COMMANDBUTTON_ABILITY_ON_NAMED", TEAM, COMMANDBUTTON_ABILITY_TEAM, UNIT)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM> on <UNIT>.
Team_/ Use commandbutton ability on an object.

ExecuteAction("TEAM_USE_COMMANDBUTTON_ABILITY_AT_WAYPOINT", TEAM, COMMANDBUTTON_ABILITY_TEAM, WAYPOINT)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM> at <WAYPOINT>.
Team_/ Use commandbutton ability at a waypoint.

ExecuteAction("MAP_SWITCH_BORDER", MAP_BOUNDARY)
<MAP_BOUNDARY> becomes the active border.
Map_/ Change the active boundary.

ExecuteAction("MAP_CHANGE_CLOUD_SPEED", PERCENT)
Modify the default CloudEffect speed to be <PERCENT>
Map_/ Change the speed of the CloudEffect.

ExecuteAction("OBJECT_FORCE_SELECT", TEAM, OBJECT_TYPE, BOOLEAN, DIALOG)
<TEAM> 's first <OBJECT_TYPE>, centers in view (<BOOLEAN>) while playing <DIALOG>
Scripting_/ Select the first object type on a team.

ExecuteAction("RADAR_FORCE_ENABLE")
The radar is now forced to be enabled.
Radar_/ Force enable the radar.

ExecuteAction("RADAR_REVERT_TO_NORMAL")
The radar is now reverting to its normal behavior.
Radar_/ Revert radar to normal behavior.

ExecuteAction("SCREEN_SHAKE", SHAKE_INTENSITY)
The screen will shake with <SHAKE_INTENSITY>
Camera_/ Shake Screen.

ExecuteAction("TECHTREE_MODIFY_BUILDABILITY_OBJECT", OBJECT_TYPE, BUILDABILITY_TYPE)
<OBJECT_TYPE> becomes <BUILDABILITY_TYPE>
Map_/ Adjust the tech tree for a specific object type.

ExecuteAction("SET_CAVE_INDEX", UNIT, INT)
Cave named <UNIT> is set to being connected to all caves of index <INT>, but only if both Cave listings have no occupants. 
Unit_/ Set Cave connectivity index.

ExecuteAction("WAREHOUSE_SET_VALUE", UNIT, INT)
Warehouse named <UNIT> is set to having <INT> dollars worth of boxes. 
Unit_/ Set cash value of Warehouse.

ExecuteAction("SOUND_DISABLE_TYPE", AUDIO)
<AUDIO> is disabled.
Multimedia_/ Sound Events -- disable type.

ExecuteAction("SOUND_ENABLE_TYPE", AUDIO)
<AUDIO> is enabled.
Multimedia_/ Sound Events -- enable type.

ExecuteAction("SOUND_REMOVE_TYPE", AUDIO)
<AUDIO> is removed.
Multimedia_/ Sound Events -- remove type.

ExecuteAction("SOUND_REMOVE_ALL_DISABLED")
Remove all disabled sound events (OBSOLETE -- disable type now does all the work)
Multimedia_/ Sound Events -- remove all disabled. (OBSOLETE)

ExecuteAction("SOUND_ENABLE_ALL")
Enable all sound events.
Multimedia_/ Sound Events -- enable all.

ExecuteAction("AUDIO_OVERRIDE_VOLUME_TYPE", AUDIO, REAL)
<AUDIO> play at <REAL>% of full volume.
Multimedia_/ Sound Events -- override volume -- type.

ExecuteAction("AUDIO_RESTORE_VOLUME_TYPE", AUDIO)
<AUDIO> play at normal volume.
Multimedia_/ Sound Events -- restore volume -- type.

ExecuteAction("AUDIO_RESTORE_VOLUME_ALL_TYPE")
All sound events play at normal volume.
Multimedia_/ Sound Events -- restore volume -- all.

ExecuteAction("NAMED_SET_TOPPLE_DIRECTION", UNIT, COORD3D)
<UNIT> will topple towards <COORD3D> if destroyed.
Unit_/ Set topple direction.

ExecuteAction("UNIT_MOVE_TOWARDS_NEAREST_OBJECT_TYPE", UNIT, OBJECT_TYPE, TRIGGER_AREA)
<UNIT> will move towards the nearest <OBJECT_TYPE> within <TRIGGER_AREA>
Unit_/ Move unit towards the nearest object of a specific type in trigger area.

ExecuteAction("UNIT_ATTACK_MOVE_TOWARDS_NEAREST_OBJECT_TYPE", UNIT, OBJECT_TYPE)
<UNIT> will AttackMove towards the nearest <OBJECT_TYPE>
Unit_/AttackMove/AttackMove unit towards the nearest object of a specific type

ExecuteAction("TEAM_MOVE_TOWARDS_NEAREST_OBJECT_TYPE", TEAM, OBJECT_TYPE, TRIGGER_AREA)
<TEAM> will move towards the nearest <OBJECT_TYPE> within <TRIGGER_AREA>
Team_/ Move team towards the nearest object of a specific type in trigger area.

ExecuteAction("TEAM_ATTACK_MOVE_TOWARDS_NEAREST_OBJECT_TYPE", TEAM, OBJECT_TYPE)
<TEAM> will AttackMove towards the nearest <OBJECT_TYPE>
Team_/AttackMove/AttackMove team towards the nearest object of a specific type

ExecuteAction("ATTACK_MOVE_TEAM_TO_NEAREST_OBJECT_OF_TYPE_OF_PLAYER", TEAM, OBJECT_TYPE_LIST, PLAYER)
<TEAM> will AttackMove towards the nearest <OBJECT_TYPE_LIST> owned by <PLAYER>
Team_/AttackMove/AttackMove team towards the nearest object of a specific type owned by a player

ExecuteAction("TEAM_SET_AI_RECRUITABLE_FLAG", TEAM, BOOLEAN)
Set the AI Recruitable flag for <TEAM> to <BOOLEAN>
Team_/AttackMove/Set the AI Recruitable Flag for units in this team

ExecuteAction("SKIRMISH_ATTACK_NEAREST_GROUP_WITH_VALUE", TEAM, COMPARISON, INT)
<TEAM> attacks nearest group worth <COMPARISON> <INT>
Skirmish_/ Team attacks nearest group matching value comparison.

ExecuteAction("SKIRMISH_PERFORM_COMMANDBUTTON_ON_MOST_VALUABLE_OBJECT", TEAM, COMMANDBUTTON_ABILITY_TEAM, REAL, BOOLEAN)
<TEAM> performs <COMMANDBUTTON_ABILITY_TEAM> on most expensive object within <REAL> <BOOLEAN> (true = all valid sources, false = first valid source).
Skirmish_/ Team performs command ability on most valuable object.

ExecuteAction("SKIRMISH_WAIT_FOR_COMMANDBUTTON_AVAILABLE_ALL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<PLAYER> 's <TEAM> all wait until <COMMANDBUTTON_ABILITY_TEAM> is ready.
Skirmish_/ Delay a sequential script until the specified command ability is ready - all.

ExecuteAction("SKIRMISH_WAIT_FOR_COMMANDBUTTON_AVAILABLE_PARTIAL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<PLAYER> 's <TEAM> wait until at least one member is <COMMANDBUTTON_ABILITY_TEAM> ready.
Skirmish_/ Delay a sequential script until the specified command ability is ready - partial.

ExecuteAction("TEAM_SPIN_FOR_FRAMECOUNT", TEAM, INT)
<TEAM> continue their current action for at least <INT> frames.
Team_/ Set to continue current action for some number of frames.

ExecuteAction("TEAM_SPIN_FOR_SECONDS", TEAM, REAL)
<TEAM> continue their current action for at least <REAL> seconds.
Team_/ Set to continue current action for some number of seconds.

ExecuteAction("CAMERA_ENABLE_SLAVE_MODE")
containing bone name 
Camera_/Enable 3DSMax Camera Animation Playback mode.

ExecuteAction("CAMERA_DISABLE_SLAVE_MODE")
Disable camera playback mode.
Camera_/Disable 3DSMax Camera Animation Playback mode.

ExecuteAction("CAMERA_ADD_SHAKER_AT", WAYPOINT, REAL, REAL, REAL)
Add Camera Shaker Effect at waypoint <WAYPOINT> with Amplitude <REAL> Duration (seconds) <REAL> Radius.<REAL>
Camera_/Add Camera Shaker Effect at.

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NAMED", TEAM, COMMANDBUTTON_ABILITY_TEAM, UNIT)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>  on <UNIT>
Team_/ Use command ability -- all -- named enemy

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NEAREST_ENEMY_UNIT", TEAM, COMMANDBUTTON_ABILITY_TEAM)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy unit.
Team_/ Use command ability -- all -- nearest enemy unit

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NEAREST_GARRISONED_BUILDING", TEAM, COMMANDBUTTON_ABILITY_TEAM)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy garrisoned building.
Team_/ Use command ability -- all -- nearest enemy garrisoned building.

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NEAREST_KINDOF", TEAM, COMMANDBUTTON_ABILITY_TEAM, KIND_OF)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy with <KIND_OF>.
Team_/ Use command ability -- all -- nearest enemy object with kind of.

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NEAREST_ENEMY_BUILDING", TEAM, COMMANDBUTTON_ABILITY_TEAM)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy building.
Team_/ Use command ability -- all -- nearest enemy building.

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NEAREST_ENEMY_BUILDING_CLASS", TEAM, COMMANDBUTTON_ABILITY_TEAM, KIND_OF)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM>  on nearest enemy building with <KIND_OF>
Team_/ Use command ability -- all -- nearest enemy building kindof.

ExecuteAction("TEAM_ALL_USE_COMMANDBUTTON_ON_NEAREST_OBJECTTYPE", TEAM, COMMANDBUTTON_ABILITY_TEAM, OBJECT_TYPE)
<TEAM> use <COMMANDBUTTON_ABILITY_TEAM> on nearest object of type <OBJECT_TYPE>.
Team_/ Use command ability -- all -- nearest object type.

ExecuteAction("TEAM_PARTIAL_USE_COMMANDBUTTON", REAL, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<REAL>% of <TEAM> perform <COMMANDBUTTON_ABILITY_TEAM>.
Team_/ Use command ability -- partial -- self.

ExecuteAction("TEAM_CAPTURE_NEAREST_UNOWNED_FACTION_UNIT", TEAM)
<TEAM> capture the nearest unowned faction unit.
Team_/ Capture unowned faction unit -- nearest.

ExecuteAction("PLAYER_CREATE_TEAM_FROM_CAPTURED_UNITS", PLAYER, TEAM)
<PLAYER> creates a new <TEAM> from units it has captured. (There's nothing quite like being assaulted by your own captured units!)
Player_/ Create team from all captured units.

ExecuteAction("TEAM_WAIT_FOR_NOT_CONTAINED_ALL", TEAM)
<TEAM> all delay until they are no longer contained.
Team_/ Delay a sequential script until the team is no longer contained - all

ExecuteAction("TEAM_WAIT_FOR_NOT_CONTAINED_PARTIAL", TEAM)
<TEAM> delay until at least one of them is no longer contained.
Team_/ Delay a sequential script until the team is no longer contained - partial

ExecuteAction("TEAM_SET_EMOTICON", TEAM, EMOTICON, REAL)
<TEAM> use <EMOTICON> emoticon for <REAL> seconds.
Team_/ Set emoticon for duration (-1.0 permanent, otherwise duration in sec).

ExecuteAction("NAMED_SET_EMOTICON", UNIT, EMOTICON, REAL)
<UNIT> use <EMOTICON> emoticon for <REAL> seconds.
Unit_/ Set emoticon for duration (-1.0 permanent, otherwise duration in sec).

ExecuteAction("OBJECTLIST_ADDOBJECTTYPE", OBJECT_TYPE_LIST, OBJECT_TYPE)
<OBJECT_TYPE_LIST> : add <OBJECT_TYPE>
Scripting_/ Object Type List -- Add Object Type.

ExecuteAction("OBJECTLIST_REMOVEOBJECTTYPE", OBJECT_TYPE_LIST, OBJECT_TYPE)
<OBJECT_TYPE_LIST> : remove <OBJECT_TYPE>
Scripting_/ Object Type List -- Remove Object Type.

ExecuteAction("MAP_REVEAL_PERMANENTLY_AT_WAYPOINT", WAYPOINT, REAL, PLAYER, REVEAL_NAME)
The map is permanently revealed at <WAYPOINT> with a radius of <REAL> for <PLAYER>. (Afterwards referred to as <REVEAL_NAME>).
Map_/ Reveal map at waypoint -- permanently.

ExecuteAction("MAP_REVEAL_PERMANENTLY_IN_TRIGGER", TRIGGER_AREA, PLAYER, REVEAL_NAME)
The map is permanently revealed in trigger <TRIGGER_AREA> for <PLAYER>. (Afterwards referred to as <REVEAL_NAME>).
Map_/ Reveal map in polygon trigger -- permanently.

ExecuteAction("MAP_UNDO_REVEAL_PERMANENTLY_AT_WAYPOINT", REVEAL_NAME)
<REVEAL_NAME> is undone.
Map_/ Reveal map at waypoint -- undo permanently.

ExecuteAction("MAP_UNDO_REVEAL_PERMANENTLY_IN_TRIGGER", REVEAL_NAME)
<REVEAL_NAME> is undone.
Map_/ Reveal map at waypoint -- undo permanently.

ExecuteAction("EVA_SET_ENABLED_DISABLED", BOOLEAN)
Set EVA to be enabled <BOOLEAN> (False to disable.)
Scripting_/ Enable or Disable EVA.

ExecuteAction("OPTIONS_SET_OCCLUSION_MODE", BOOLEAN)
Set Occlusion to be enabled <BOOLEAN> (False to disable.)
Scripting_/ Enable or Disable Occlusion (Drawing Behind Buildings).

ExecuteAction("OPTIONS_SET_DRAWICON_UI_MODE", BOOLEAN)
Set Draw-icon UI to be enabled <BOOLEAN> (False to disable.)
Scripting_/ Enable or Disable Draw-icon UI.

ExecuteAction("OPTIONS_SET_PARTICLE_CAP_MODE", BOOLEAN)
Set Particle Cap to be enabled <BOOLEAN> (False to disable.)
Scripting_/ Enable or Disable Particle Cap.

ExecuteAction("UNIT_AFFECT_OBJECT_PANEL_FLAGS", UNIT, OBJECT_PANEL_FLAG, BOOLEAN)
<UNIT> changes the value of flag <OBJECT_PANEL_FLAG> to <BOOLEAN>.
Unit_/ Affect flags set on object panel.

ExecuteAction("TEAM_AFFECT_OBJECT_PANEL_FLAGS", TEAM, OBJECT_PANEL_FLAG, BOOLEAN)
<TEAM> change the value of flag <OBJECT_PANEL_FLAG> to <BOOLEAN>.
Team_/ Affect flags set on object panel - all.

ExecuteAction("PLAYER_SELECT_SKILLSET", PLAYER, INT)
<PLAYER> uses skillset number <INT> (1-5).
Player_/ Set the skillset for a computer player.

ExecuteAction("SCRIPTING_OVERRIDE_HULK_LIFETIME", REAL)
Override hulk lifetime to <REAL> seconds. Negative value reverts to normal behavior.
Scripting_/ Hulk set override lifetime.

ExecuteAction("NAMED_FACE_NAMED", UNIT, UNIT)
<UNIT> begin facing <UNIT>
Unit_/ Set unit to face another unit.

ExecuteAction("NAMED_FACE_WAYPOINT", UNIT, WAYPOINT)
<UNIT> begin facing <WAYPOINT>
Unit_/ Set unit to face a waypoint.

ExecuteAction("TEAM_FACE_NAMED", TEAM, UNIT)
<TEAM> begin facing <UNIT>
Team_/ Set team to face another unit.

ExecuteAction("TEAM_FACE_WAYPOINT", TEAM, WAYPOINT)
<TEAM> begin facing <WAYPOINT>
Team_/ Set team to face a waypoint.

ExecuteAction("COMMANDBAR_ADD_BUTTON_OBJECTTYPE_SLOT", COMMAND_BUTTON, OBJECT_TYPE, INT)
<COMMAND_BUTTON> is added to all objects of type <OBJECT_TYPE> in slot number <INT> (1-12).
Scripting_/ Add a command button to an object type.

ExecuteAction("UNIT_SPAWN_NAMED_LOCATION_ORIENTATION", UNIT, OBJECT_TYPE, TEAM, COORD3D, ANGLE)
Spawn <UNIT> of type <OBJECT_TYPE> on team <TEAM> at position (<COORD3D>), rotated <ANGLE> .
Unit_/ Spawn -- named unit on a team at a position with an orientation.

ExecuteAction("PLAYER_AFFECT_RECEIVING_EXPERIENCE", PLAYER, REAL)
<PLAYER> gains experience at <REAL> times the usual rate (0.0 for no gain, 1.0 for normal rate)
Player_/ Change the modifier to generals experience that a player receives.

ExecuteAction("SOUND_SET_VOLUME", REAL)
Set the desired sound volume to <REAL>%. (0-100)
Multimedia_/ Set the current sound volume.

ExecuteAction("SPEECH_SET_VOLUME", REAL)
Set the desired speech volume to <REAL>%. (0-100)
Multimedia_/ Set the current speech volume.

ExecuteAction("OBJECT_ALLOW_BONUSES", BOOLEAN)
Enable Object Bonuses based on difficulty <BOOLEAN> (true to enable, false to disable).
Map_/ Adjust Object Bonuses based on difficulty.

ExecuteAction("TEAM_GUARD_IN_TUNNEL_NETWORK", TEAM)
<TEAM> Enter and guard from tunnel network.
Team_/ Set to guard - from inside tunnel network.

ExecuteAction("LOCALDEFEAT")
Show 'Game Over' window
Multiplayer_/ Announce local defeat.

ExecuteAction("VICTORY")
Show 'Victorious' window and end game
Multiplayer_/ Announce victory.

ExecuteAction("DEFEAT")
Show 'Defeated' window and end game
Multiplayer_/ Announce defeat.

ExecuteAction("RESIZE_VIEW_GUARDBAND", REAL, REAL)
Allow bigger objects to be perceived as onscreen near the edge (<REAL>,<REAL>) Width then height, in world units.
Map_/ Resize view guardband.

ExecuteAction("DELETE_ALL_UNMANNED")
Delete all unmanned (sniped) vehicles.
Scripting_/ Delete all unmanned (sniped) vehicles.

ExecuteAction("CHOOSE_VICTIM_ALWAYS_USES_NORMAL", BOOLEAN)
Force ChooseVictim to ignore game difficulty and always use Normal setting <BOOLEAN> (true to enable, false to disable).
Map_/ Force ChooseVictim to ignore game difficulty and always use Normal setting.

ExecuteAction("ENABLE_OBJECT_SOUND", UNIT)
Enable (or trigger) <UNIT>'s ambient sound.
Multimedia_/Sound Effect/Enable object's ambient sound

ExecuteAction("DISABLE_OBJECT_SOUND", UNIT)
Disable <UNIT>'s ambient sound.
Multimedia_/Sound Effect/Disable object's ambient sound

ExecuteAction("CAMERA_BLOOM_EFFECT_BEGIN")
Set Bloom Filter to be enabled
Camera_/Lighting Effects/Begin bloom lighting effect.

ExecuteAction("CAMERA_BLOOM_EFFECT_END")
Set Bloom Filter to be disabled
Camera_/Lighting Effects/End bloom lighting effect.

ExecuteAction("TERRAIN_RENDER_DISABLE", BOOLEAN)
Disable terrain render <BOOLEAN> (True to disable.)
Camera_/Terrain/Enable or Disable Terrain Render.

ExecuteAction("PLAYER_GIVE_LIGHT_POINTS", PLAYER, INT)
Gives <PLAYER> <INT> light points.
Player_/ Give light points

ExecuteAction("PLAYER_RESET_LIGHT_POINTS", PLAYER)
Resets light points for <PLAYER>.
Player_/ Reset light points

ExecuteAction("PLAYER_GIVE_LIGHT_POINT_LEVEL", PLAYER, TEXT_STRING)
Gives <PLAYER>  light point level <TEXT_STRING>.
Player_/ Gives a light point level

ExecuteAction("PLAYER_REMOVE_LIGHT_POINT_LEVEL", PLAYER, TEXT_STRING)
Takes away from <PLAYER> light point level <TEXT_STRING>.
Player_/ Takes away a light point level

ExecuteAction("TEAM_GIVE_EXPERIENCE_LEVEL", TEAM, TEXT_STRING)
Gives <TEAM> experience level <TEXT_STRING>.
Team_/ Gives specified team an experience level

ExecuteAction("TEAM_GIVE_EXPERIENCE_POINTS", TEAM, INT)
Gives <TEAM> experience points <INT>.
Team_/ Gives specified team experience points

ExecuteAction("TEAM_SET_EXPERIENCE_POINTS", TEAM, INT)
Sets <TEAM> experience points' to <INT>.
Team_/ Sets a team's experience points

ExecuteAction("UNIT_GIVE_EXPERIENCE_LEVEL", UNIT, TEXT_STRING)
Gives <UNIT> experience level <TEXT_STRING>.
Unit_/ Gives specified team an experience level

ExecuteAction("UNIT_GIVE_EXPERIENCE_POINTS", UNIT, INT)
Gives <UNIT> experience points <INT>.
Unit_/ Gives a unit experience points

ExecuteAction("UNIT_SET_EXPERIENCE_POINTS", UNIT, INT)
Sets <UNIT> experience points' to <INT>.
Unit_/ Sets a unit's experience points

ExecuteAction("LIVING_WORLD_MOVE_ARMY_TO_POSITION", TEXT_STRING, TEXT_STRING, COORD3D)
Move Army named<TEXT_STRING> of faction <TEXT_STRING> To the position <COORD3D> in the world.
LivingWorld_/ Move army to a world position

ExecuteAction("LIVING_WORLD_MOVE_ARMY_TO_ZONE", TEXT_STRING, TEXT_STRING, TEXT_STRING)
Move Army named<TEXT_STRING> of faction <TEXT_STRING> To the <TEXT_STRING> zone.
LivingWorld_/ Move army to a named zone

ExecuteAction("LIVING_WORLD_SPAWN_ARMY_AT_POSITION", TEXT_STRING, TEXT_STRING, COORD3D)
Spawn Army named<TEXT_STRING> of TemplateType <TEXT_STRING> To the position <COORD3D> in the world.
LivingWorld_/ Spawn an army at world position

ExecuteAction("LIVING_WORLD_SPAWN_ARMY_IN_ZONE", TEXT_STRING, TEXT_STRING, TEXT_STRING)
Spawn Army named <TEXT_STRING> of TemplateType <TEXT_STRING> To the <TEXT_STRING> zone.
LivingWorld_/ Spawn an army in a named zone

ExecuteAction("LIVING_WORLD_DESPAWN_ARMY", TEXT_STRING, TEXT_STRING)
Despawn Army named <TEXT_STRING> of faction <TEXT_STRING> from the living world.
LivingWorld_/ Despawn an army from the Living World

ExecuteAction("LIVING_WORLD_EXIT_TO_REGION_VIEW")
Exit back into the living world map region view.
LivingWorld_/ Exit back into region view

ExecuteAction("TOGGLE_AVI_CAPTURE")
Toggles on & off the AVI capture.
AVICapture_/ Toggles on & off AVI capture

ExecuteAction("PLAY_MOVIE_IN_GAME", MOVIE, BOOLEAN)
Play Movie named <MOVIE> allow cancel <BOOLEAN> .
PlayMovie/ Plays a movie in game.

ExecuteAction("DEPLOY_SIEGE_ON_NAMED_WALL", UNIT, UNIT)
Request <UNIT> to attach it's siege ramp to the wall <UNIT> . 
Unit_/Siege/ Deploy the siege tower to the named wall.

ExecuteAction("RETRACT_SIEGE_FROM_WALL", UNIT)
Request <UNIT> to retract it's siege ramp from the wall 
Unit_/Siege/ Retract the siege tower from that wall it's attached to.

ExecuteAction("SET_UNIT_REFERENCE", UNIT_REF, UNIT)
Set <UNIT_REF> to reference unit <UNIT>
Scripting_/Reference/ Set reference to a unit.

ExecuteAction("TEAM_SET_PLAYERS_NEAREST_UNIT_OF_TYPE_TO_REFERENCE", OBJECT_TYPE_LIST, TEAM, UNIT_REF)
Find the unit matching a type in the list <OBJECT_TYPE_LIST>nearest the team<TEAM> (and owned by the teams Player) and set its reference to <UNIT_REF>
Scripting/Reference/ Set a reference to the unit nearest-to-team, owned by player.

ExecuteAction("FIND_HOME_BASE_OF_PLAYER", PLAYER, UNIT_REF, BOOLEAN)
Find the home base owned by <PLAYER> and set <UNIT_REF> to reference it. (Building must be inside map boundaries: <BOOLEAN>)
_Scripting/Reference/Find home base of player

ExecuteAction("GATE_OPEN", UNIT)
Open gate <UNIT>
Unit/gate/ open a gate

ExecuteAction("GATE_CLOSE", UNIT)
Close gate.<UNIT>
Unit/gate/ close a gate

ExecuteAction("GATE_READY", UNIT)
<UNIT> delay until it is ready again.
Unit/gate/ Delay a sequential script until the gate is ready again

ExecuteAction("SET_TEAM_REFERENCE", TEAM_REF, TEAM)
Set <TEAM_REF> to reference team <TEAM>
Scripting_/Reference/ Set reference to a team.

ExecuteAction("SET_UNIT_REFERENCE_TO_REFERENCE", UNIT_REF, UNIT_REF)
Set <UNIT_REF> to reference another unit reference <UNIT_REF>
Scripting_/Reference/ Set reference to another unit reference.

ExecuteAction("SET_TEAM_REFERENCE_TO_REFERNECE", TEAM_REF, TEAM_REF)
Set <TEAM_REF> to reference another team reference <TEAM_REF>
Scripting_/Reference/ Set reference to another team reference.

ExecuteAction("TEAM_GIVE_NEAREST_TEAM_UPGRADE", TEAM)
<TEAM> will give nearest team upgrade
Team_/Upgrades/Team gives nearest team upgrade.

ExecuteAction("TEAM_GIVE_TEAM_UPGRADE", TEAM, TEAM)
<TEAM> will give <TEAM> upgrade 
Team_/Upgrades/Team gives team upgrade.

ExecuteAction("NAMED_BASE_UNPACK", UNIT, UNIT_REF)
Unpack the base: <UNIT>and reference it as <UNIT_REF>.
Base/Unpack a base so team can start building structures on it.

ExecuteAction("NAMED_BASE_UNPACK_FREE", UNIT, UNIT_REF)
Instantly unpack the free base: <UNIT>and reference it as <UNIT_REF>.
Base/Instant Unpack a base so team can start building structures on it (Free).

ExecuteAction("BUILD_BASE_BUILDING", OBJECT_TYPE, UNIT, UNIT_REF)
Build building <OBJECT_TYPE> in base <UNIT> and reference it as <UNIT_REF> .
Player_/AI/AI build base building in first available slot in a referenced base.

ExecuteAction("BUILD_BASE_BUILDING_IN_SLOT", OBJECT_TYPE, INT, UNIT, UNIT_REF)
Build building <OBJECT_TYPE> at slot <INT> in base <UNIT> and reference it as<UNIT_REF> .
Base/AI build base building in slot in a referenced base.

ExecuteAction("BUILD_BASE_BUILDING_PER_TACTICAL_MARKER", OBJECT_TYPE, NEAR_OR_FAR, OBJECT_TYPE, UNIT, UNIT_REF)
Build building <OBJECT_TYPE> at a foundation that is the most <NEAR_OR_FAR>, relative to the object of type, <OBJECT_TYPE> which is part of the base named, <UNIT> ... then finally reference the new building as: <UNIT_REF> .
Base/AI build base building on a foundation chosen by proximity to tactical marker (new).

ExecuteAction("BUILD_BUILDING_ON_FOUNDATION", OBJECT_TYPE, UNIT)
Build building <OBJECT_TYPE> at a foundation<UNIT> .
Build building on the chosen foundation.

ExecuteAction("TEAM_MOVE_TO_NEAREST_OBJECT_OF_KINDOF", TEAM, KIND_OF)
Team <TEAM> will move to the nearest object of kindof <KIND_OF>.
Team/Team will move to the nearest object that matches kindof specified.

ExecuteAction("TEAM_MOVE_TO_NEAREST_OBJECT_OF_KINDOF_OWNED_BY_PLAYER", TEAM, KIND_OF, PLAYER)
Team <TEAM> will move to the nearest object of kindof <KIND_OF> that is owned by the player <PLAYER>.
Team/Team will move to the nearest object that matches both kindof and player specified.

ExecuteAction("TEAM_MOVE_TO_NEAREST_OBJECT_OF_TYPE", TEAM, OBJECT_TYPE_LIST)
Team <TEAM> will move to the nearest object of type <OBJECT_TYPE_LIST>.
Team/Team will move to the nearest object that matches type specified.

ExecuteAction("TEAM_MOVE_TO_NEAREST_OBJECT_OF_TYPE_OWNED_BY_PLAYER", TEAM, OBJECT_TYPE_LIST, PLAYER)
Team <TEAM> will move to the nearest object of type <OBJECT_TYPE_LIST> that is owned by the player <PLAYER>.
Team/Team will move to the nearest object that matches both type and player specified.

ExecuteAction("COUNTER_MATH_COUNTER", COUNTER, MATH_OPERATOR, COUNTER)
Counter <COUNTER> , <MATH_OPERATOR> with counter <COUNTER>
Scripting_/Counters/Counter do math opertation with another Counter.

ExecuteAction("COUNTER_MATH_VALUE", COUNTER, MATH_OPERATOR, INT)
Counter <COUNTER> , <MATH_OPERATOR> with value <INT>
Scripting_/Counters/Counter do math opertation with value.

ExecuteAction("TEAM_RECRUIT_UNITS", TEAM, INT, OBJECT_TYPE_LIST)
will recruit <TEAM> units of type <INT> from nearby recruitable allied teams.<OBJECT_TYPE_LIST>
Team_/Team recruit units from nearby teams.

ExecuteAction("TEAM_RECRUIT_UNITS_FROM_TEAM", TEAM, INT, OBJECT_TYPE_LIST, TEAM)
will recruit <TEAM> units of type <INT> from <OBJECT_TYPE_LIST> .<TEAM>
Team_/Team recruit units from a specific team.

ExecuteAction("RECRUIT_COMBO_UNITS_FROM_TEAM", TEAM, INT, OBJECT_TYPE_LIST, TEAM)
will recruit <TEAM> combo units of type <INT> from <OBJECT_TYPE_LIST> .<TEAM>
Team_/Team recruit combo units from a specific team.

ExecuteAction("TEAM_UPGRADE", TEAM, UPGRADE)
Give Team <TEAM> the upgrade <UPGRADE>.
Team_/Give Team upgrade.

ExecuteAction("SET_PLAYER_MONEY_TO_COUNTER", PLAYER, COUNTER)
Store amount of  <PLAYER> money to the counter <COUNTER>
Scripting_/Counters/Set players money to counter.

ExecuteAction("SET_PLAYER_LIGHT_POINTS_TO_COUNTER", PLAYER, COUNTER)
Store amount of <PLAYER> light points to the counter <COUNTER>
Scripting_/Counters/Set players light points to counter.

ExecuteAction("SET_UNIT_EXPERIENCE_TO_COUNTER", UNIT, COUNTER)
Store amount of <UNIT> experience points to the counter <COUNTER>
Scripting_/Counters/Set units experience points to counter.

ExecuteAction("SET_PLAYER_COMMAND_POINTS_USED_TO_COUNTER", PLAYER, COUNTER)
Store amount of command points used by player <PLAYER> to the counter <COUNTER>
Scripting_/CommandPoints/Set command points used by player to counter.

ExecuteAction("SET_PLAYER_COMMAND_POINTS_AVAILABLE_TO_COUNTER", PLAYER, COUNTER)
Store amount of command points available to player <PLAYER> to the counter <COUNTER>
Scripting_/CommandPoints/Set command points available to player to counter.

ExecuteAction("SET_PLAYER_COMMAND_POINTS_TOTAL_TO_COUNTER", PLAYER, COUNTER)
Store total number of command point of player <PLAYER> to the counter <COUNTER>
Scripting_/CommandPoints/Set command points total of player to counter.

ExecuteAction("SET_COMMAND_POINTS_TO_BUILD_TEAM_TO_COUNTER", TEAM, COUNTER)
Store the amount of command points required to build <TEAM> to the counter <COUNTER>
Scripting_/CommandPoints/Set command points required to build team to counter.

ExecuteAction("SET_PLAYER_KILLS_OF_TYPE_TO_COUNTER", PLAYER, OBJECT_TYPE, COUNTER)
Store the amount of kills by player <PLAYER> of the type of object <OBJECT_TYPE> to the counter <COUNTER>
Scripting_/Set numer of player kills of a type to counter.

ExecuteAction("SET_PLAYER_KILLS_OF_KINDOF_TO_COUNTER", PLAYER, KIND_OF, COUNTER)
Store the amount of kills by player <PLAYER> of the kindof <KIND_OF> to the counter <COUNTER>
Scripting_/Set number of player kills of a kindof to counter.

ExecuteAction("SET_PLAYER_OWNERSHIP_OF_TYPE_COUNTER", OBJECT_TYPE_LIST, PLAYER, COUNTER)
Store the number of object <OBJECT_TYPE_LIST> owned by <PLAYER> to the counter <COUNTER>
Scripting_/Set numer of object type owned by player to counter.

ExecuteAction("SET_PLAYER_OWNERSHIP_OF_TYPE_COUNTER_INCLUDE_DEAD", OBJECT_TYPE_LIST, PLAYER, COUNTER)
Store the number of object (include dead ones)<OBJECT_TYPE_LIST> owned by <PLAYER> to the counter <COUNTER>
Scripting_/Set numer of object type owned by player to counter including dead ones.

ExecuteAction("SET_COUNTER_TO_NUMBER_OBJECTS_PLAYER_OWNES_WITH_MODELCONDITION", PLAYER, MODEL_CONDITION, COUNTER)
Store the number of objects owned by <PLAYER> with <MODEL_CONDITION> ON to the counter <COUNTER>
Scripting_/Set counter to number of objects owned by player with a model condition

ExecuteAction("PLAY_SOUND_EFFECT_AT_TEAM", SOUND, TEAM)
Play sound <SOUND> as though coming from a member of <TEAM>.
Multimedia_/Play sound effect from team

ExecuteAction("AUDIO_FADE_VOLUME", REAL, REAL, REAL, REAL, REAL)
Fade (0-1) all audio from volume <REAL> to volume <REAL>. Take <REAL> seconds to increase, hold for <REAL> seconds, and decrease <REAL> seconds.
Audio_/Volume/Fade all audio

ExecuteAction("AUDIO_MAKE_SOUND_IMMUNE_TO_FADE", AUDIO)
Make the sound <AUDIO> ignore the fade levels set by 'fade all audio.'
Audio_/Volume/Make Sound Immune to Fade

ExecuteAction("AUDIO_MAKE_SOUND_SUBJECT_TO_FADE", AUDIO)
Make the sound <AUDIO> subject to the fade levels set by 'fade all audio.'
Audio_/Volume/Make Sound Subject to Fade

ExecuteAction("AUDIO_MAKE_ALL_SOUNDS_SUBJECT_TO_FADE")
Make all sounds subject to the fade levels set by 'fade all audio.'
Audio_/Volume/Make All Sounds Subject to Fade

ExecuteAction("AUDIO_SET_REVERB_ROOM_TYPE", REVERB_ROOM_TYPE)
Use global reverb room type <REVERB_ROOM_TYPE>
Audio_/All Sounds/Set Global Reverb Room Type

ExecuteAction("AUDIO_REMOVE_REVERB")
Do not use reverb effects
Audio_/All Sounds/Remove all reverb effects

ExecuteAction("AUDIO_SET_REVERB_SUPPRESSION_POLYGON", TRIGGER_AREA, PERCENT)
Lower reverb of all sounds in <TRIGGER_AREA> to <PERCENT> of normal.
Audio_/All Sounds/Suppress reverb in an area

ExecuteAction("AUDIO_REMOVE_REVERB_SUPPRESSION_POLYGON", TRIGGER_AREA)
Return the reverb of sounds in <TRIGGER_AREA> to normal.
Audio_/All Sounds/Unsuppress reverb in an area

ExecuteAction("AUDIO_REMOVE_ALL_REVERB_SUPPRESSION_POLYGONS")
Remove all reverb-suppression areas.
Audio_/All Sounds/Unsuppress all reverb

ExecuteAction("DIM_WORLD_LIGHTS")
seconds.
Scene/Light/Dim all global and ambient lights.

ExecuteAction("RESTORE_WORLD_LIGHTS")
seconds: 
Scene/Light/Restore (un-dim) all global and ambient lights.

ExecuteAction("ALLOW_DISALLOW_ONE_BUILDING", PLAYER, OBJECT_TYPE, BOOLEAN)
<PLAYER> allowed to build <OBJECT_TYPE> is <BOOLEAN>.
Base/Allow or Disallow one building of a specific type

ExecuteAction("ALLOW_DISALLOW_ALL_BUILDINGS", PLAYER, BOOLEAN)
<PLAYER> is allowed to build ALL buildings is <BOOLEAN> . 
Base/Allow or Disallow all buildings

ExecuteAction("TOGGLE_AUTO_BUILD", PLAYER, BOOLEAN)
<PLAYER> toggle auto build <BOOLEAN>
Player/Build/Turn on or off a player's structures that auto build units.  (Starts ON)

ExecuteAction("TEAM_TOGGLE_CLOSE_RANGE_WEAPON", TEAM, BOOLEAN)
<TEAM> sets their close range weapons to <BOOLEAN>
Team/Toggle close range weapon

ExecuteAction("NAMED_TOGGLE_CLOSE_RANGE_WEAPON", UNIT, BOOLEAN)
<UNIT> sets its close range weapon to <BOOLEAN>
Unit/Toggle close range weapon

ExecuteAction("SET_COUNTER_TO_BASE_POPULATION", PLAYER, UNIT, COUNTER)
Count units owned by <PLAYER> inside the base <UNIT> and store in counter <COUNTER>
Base/Counters/Count units inside a base.

ExecuteAction("REINFORCEMENTS_DISPLAY_BANNER")
Display Reinforcements banner.
LivingWorld_/Display Reinforcements banner.

ExecuteAction("NAMED_SET_SPECIAL_WEAPONSET", UNIT, BOOLEAN)
<UNIT> set special weapon upgrade to <BOOLEAN>
Unit_/Set unit to switch to weapon set.

ExecuteAction("DEPLOY_NAMED_SIEGE_ON_WAYPOINT", UNIT, WAYPOINT, REAL)
<UNIT> attempts to Deploy near <WAYPOINT> within the radius <REAL>.
Unit_/Siege/Deploy near waypoint.

ExecuteAction("DEPLOY_SIEGE_ON_WAYPOINT", TEAM, WAYPOINT, REAL)
<TEAM> attempts to Deploy near <WAYPOINT> within the radius <REAL>.
Team_/Siege/Deploy near waypoint.

ExecuteAction("DEPLOY_SIEGE_NEAR_TEAM", TEAM, TEAM, REAL)
<TEAM> attempts to Deploy near <TEAM> within the radius <REAL>.
Team_/Siege/Deploy near team.

ExecuteAction("TEAM_REPAIR_NEREST", TEAM, REAL)
Have Team <TEAM> repair the nearest building within the radius <REAL>
Team_/Reepair/Repair nearest building that needs it.

ExecuteAction("TEAM_SET_AUTO_ABILITY", TEAM, COMMAND_BUTTON, BOOLEAN)
Have Team <TEAM> set auto ability <COMMAND_BUTTON> to <BOOLEAN>
Team_/AutoAbility/Team set auto ability to on/off.

ExecuteAction("NAME_SET_AUTO_ABILITY", UNIT, COMMAND_BUTTON, BOOLEAN)
Have Team <UNIT> set auto ability <COMMAND_BUTTON> to <BOOLEAN>
Unit_/AutoAbility/Named set auto abilty to on/off.

ExecuteAction("SET_LOGIC_FOG_STATE", BOOLEAN)
Set presence of Fog of War to <BOOLEAN>. (Default TRUE.)
Map_/Shroud or Reveal/Toggle Fog of War.

ExecuteAction("NAMED_RECEIVE_UPGRADE", UNIT, UPGRADE)
Give Unit <UNIT> the upgrade <UPGRADE>.
Unit_/Upgrade/Give Team upgrade.

ExecuteAction("UPGRADE_NEAREST_WALL", UNIT, UPGRADE, OBJECT_TYPE, OBJECT_TYPE, UNIT_REF)
For Base <UNIT> give upgrade <UPGRADE> to object type <OBJECT_TYPE> nearest marker <OBJECT_TYPE> and reference as <UNIT_REF>
Script/Upgrade/Upgrade Base with upgrade to the nearest upgradable wall.

ExecuteAction("SET_REF_TO_NEREST_TEAM_OF_TYPE_OWNED_BY_PLAYER", OBJECT_TYPE_LIST, PLAYER, TEAM, UNIT_REF)
Find <OBJECT_TYPE_LIST> Owned by <PLAYER> nearest team <TEAM> and reference as <UNIT_REF>
Scripting_/Reference/ Set reference to object owned by player 

ExecuteAction("SET_REF_TO_NEREST_TEAM_OF_UNNAMED_TYPE_OWNED_BY_PLAYER", OBJECT_TYPE_LIST, PLAYER, TEAM, UNIT_REF)
Find unnamed <OBJECT_TYPE_LIST> Owned by <PLAYER> nearest team <TEAM> and reference as <UNIT_REF>
Scripting_/Reference/ Set reference to unnamed object owned by player 

ExecuteAction("SELL_BUILDING_ON_FOUNDATION", UNIT)
Sell anything on foundation named <UNIT>
Base/Sell building on foundation 

ExecuteAction("MAP_EXIT")
Exits map back to the main menu.
Map_/ Exit back to the main menu

ExecuteAction("TEAM_NEEDS_OPEN_GATE", TEAM, UNIT, BOOLEAN)
Team <TEAM> wants gate <UNIT> open is <BOOLEAN>
Team_/Misc/ Set or clear a team-needs-gate open flag 

ExecuteAction("UNIT_STAND_GROUND", UNIT, BOOLEAN)
Set Stand Ground Status of <UNIT> to <BOOLEAN>
Unit/Status/Unit Set Stand Ground Status.

ExecuteAction("TEAM_STAND_GROUND", TEAM, BOOLEAN)
Set Stand Ground Status of <TEAM> to <BOOLEAN>
Unit/Status/Team Set Stand Ground Status.

ExecuteAction("UNIT_TELEPORT_TO_WAYPOINT", UNIT, WAYPOINT)
Teleport <UNIT> to <WAYPOINT>.
Unit_/Action/Move/Teleport to a waypoint.

ExecuteAction("TEAM_TELEPORT_TO_WAYPOINT", TEAM, WAYPOINT)
Teleport <TEAM> to <WAYPOINT>.
Team_/Action/Move/Teleport to a waypoint.

ExecuteAction("OVERRIDE_PLAYER_COMMAND_POINTS", PLAYER, INT, INT)
Override command points for <PLAYER> to total: <INT> maximum: <INT>
Player_/Command/ Override player command points.

ExecuteAction("SELECT_OBJECT", PLAYER, UNIT)
For <PLAYER> select object <UNIT>
Player_/Select/ Select an object belonging to player.

ExecuteAction("DESELECT")
Deselects everything 
Player_/Select/ Deselects everything.

ExecuteAction("HERO_SELECT_BUTTON_FLASH", HERO_UNIT, INT)
Flash the select button for <HERO_UNIT> for <INT> seconds.
User_/Flash/Flash a hero select button for a specified amount of time.

ExecuteAction("LOCK_CAMERA", BOOLEAN)
Set the camera lock to <BOOLEAN> .
Camera_/Lock or unlock camera.

ExecuteAction("LOCK_CAMERA_ZOOM", BOOLEAN)
Set the camera zoom lock to <BOOLEAN> .
Camera_/Lock or unlock camera zoom.

ExecuteAction("LOCK_CAMERA_ROTATION", BOOLEAN)
Set the camera rotation lock to <BOOLEAN> .
Camera_/Lock or unlock camera rotation.

ExecuteAction("LOCK_CAMERA_SCROLL", BOOLEAN)
Set the camera scroll lock to <BOOLEAN> .
Camera_/Lock or unlock camera scroll.

ExecuteAction("LOCK_CAMERA_RESET", BOOLEAN)
Set the camera reset lock to <BOOLEAN> .
Camera_/Lock or unlock camera reset.

ExecuteAction("LOCK_CAMERA_ANGLE_AND_HEIGHT", BOOLEAN)
Set the camera angle&  height lock to <BOOLEAN> .
Camera_/Lock or unlock camera height and angle (allow scrolling).

ExecuteAction("TEAM_ASSIMILATE_WITH_FIRST_WALK_ON_ARMY", TEAM)
Set <TEAM> to be assimilated by the first walk on army.
Team_/Assimilates team with the first walk on army.

ExecuteAction("UNIT_ASSIMILATE_WITH_FIRST_WALK_ON_ARMY", UNIT)
Set <UNIT> to be assimilated by the first walk on army.
Unit_/Assimilates unit with the first walk on army.

ExecuteAction("UNIT_ENABLE_HOUSE_COLOR", UNIT, BOOLEAN)
Enable house color for <UNIT> to <BOOLEAN> .
Unit_/Enables or disables the house color.

ExecuteAction("TEAM_ENABLE_HOUSE_COLOR", TEAM, BOOLEAN)
Enable the house color for <TEAM> to <BOOLEAN> .
Team_/Enables or disables the house color

ExecuteAction("ENABLE_HOUSE_COLOR", BOOLEAN)
Enable the house color for all units <BOOLEAN> .
Script/Enables or disables the house color for all units

ExecuteAction("UNIT_FORCE_EMOTION", UNIT, EMOTION, REAL)
Force unit <UNIT> to have <EMOTION> for <REAL> seconds.
Unit_/Force an emotion.

ExecuteAction("TEAM_FORCE_EMOTION", TEAM, EMOTION, REAL)
Force team <TEAM> to have <EMOTION> for <REAL> seconds.
Team_/Force an emotion.

ExecuteAction("PLAYER_FORCE_EMOTION", PLAYER, EMOTION, REAL)
Force all units of player <PLAYER> to have <EMOTION> for <REAL> seconds.
Player_/Force an emotion.

ExecuteAction("PLAYER_SELL_EVERYTHING", PLAYER)
Sell everything belonging to <PLAYER>
Player_/Player sell everything he has.

ExecuteAction("UNIT_GAIN_LEVEL", UNIT, BOOLEAN)
<UNIT> gains a level with FX turned <BOOLEAN>
Unit_/Experience/Unit Gain Level.

ExecuteAction("TEAM_GAIN_LEVEL", TEAM, BOOLEAN)
<TEAM> gains a level with FX turned <BOOLEAN>
Team/Experience/Team Gain Level.

ExecuteAction("SHOW_MISSION_OBJECTIVE", INT)
Make mission objective <INT> visible.
Interface/Objectives/Show mission objective

ExecuteAction("HIDE_MISSION_OBJECTIVE", INT)
Hide mission objective <INT>.
Interface/Objectives/Hide mission objective

ExecuteAction("MARK_MISSION_OBJECTIVE_COMPLETED", INT)
Mark mission objective <INT> as completed.
Interface/Objectives/Mark mission objective as completed

ExecuteAction("MARK_MISSION_OBJECTIVE_NOT_COMPLETED", INT)
Mark mission objective <INT> as not completed.
Interface/Objectives/Mark mission objective as not completed

ExecuteAction("UNIT_CHANGE_OBJECT_STATUS", UNIT, OBJECT_STATUS, BOOLEAN)
For unit <UNIT> set object status <OBJECT_STATUS> to <BOOLEAN>.
Unit_/Change object status.

ExecuteAction("TEAM_CHANGE_OBJECT_STATUS", TEAM, OBJECT_STATUS, BOOLEAN)
For all units in team <TEAM> set object status <OBJECT_STATUS> to <BOOLEAN>.
Team_/Change object status.

ExecuteAction("REMOVE_REINFORCEMENT_ARMY", TEXT_STRING)
Remove reinforcement army named <TEXT_STRING>.
ReinforcementArmies/Remove army.

ExecuteAction("PLAYER_ASSIMILATE_WITH_ARMY_BY_NAME", PLAYER, TEXT_STRING)
Set <PLAYER> to be assimilated by army <TEXT_STRING>. 
Player_/Assimilates player with an army by name.

ExecuteAction("TEAM_ASSIMILATE_WITH_ARMY_BY_NAME", TEAM, TEXT_STRING)
Set <TEAM> to be assimilated by army <TEXT_STRING>. 
Team_/Assimilates team with an army by name.

ExecuteAction("UNIT_ASSIMILATE_WITH_ARMY_BY_NAME", UNIT, TEXT_STRING)
Set <UNIT> to be assimilated by army <TEXT_STRING>. 
Unit_/Assimilates unit with an army by name.

ExecuteAction("CALL_IN_REINFORCEMENTS_WITHOUT_MOVIE", TEXT_STRING)
Call in reinforcement army named <TEXT_STRING>.
ReinforcementArmies/Call in army clean.

ExecuteAction("LIVING_WORLD_SET_PLAYER_REF_BY_TEMPLATE", LIVING_WORLD_PLAYER_REF_SET, LIVING_WORLD_PLAYER_TEMPLATE)
Set <LIVING_WORLD_PLAYER_REF_SET> to a player with player template <LIVING_WORLD_PLAYER_TEMPLATE>. 
_Player/Set Player Ref to player with template

ExecuteAction("LIVING_WORLD_SET_ARMY_REF_TO_HERO_ARMY_BY_INDEX", LIVING_WORLD_ARMY_REF_SET, INT, LIVING_WORLD_PLAYER_REF)
Set <LIVING_WORLD_ARMY_REF_SET> to hero army #<INT> (1 - first, 2 - second, etc) belonging to player <LIVING_WORLD_PLAYER_REF>.
_Army/Set army ref to hero army by index

ExecuteAction("LIVING_WORLD_SET_REGION_REF_TO_ARMY_REGION", LIVING_WORLD_REGION_REF_SET, LIVING_WORLD_ARMY_REF)
Set <LIVING_WORLD_REGION_REF_SET> to the region containing <LIVING_WORLD_ARMY_REF>.
_Region/Set region ref to army's region

ExecuteAction("LIVING_WORLD_SET_REGION_REF_TO_ADJACENT_REGION", LIVING_WORLD_REGION_REF_SET, LIVING_WORLD_REGION_REF, BOOLEAN, BOOLEAN)
Set <LIVING_WORLD_REGION_REF_SET> to a region adjacent to <LIVING_WORLD_REGION_REF> which must be owned by the same player (<BOOLEAN>) and/or must not be defended (<BOOLEAN>).
_Region/Set region ref to adjacent region

ExecuteAction("LIVING_WORLD_ORDER_ARMY_MOVE_TO_ADJACENT_REGION", LIVING_WORLD_ARMY_REF, LIVING_WORLD_REGION_REF)
Order <LIVING_WORLD_ARMY_REF> to move to adjacent region <LIVING_WORLD_REGION_REF>.
_Army/Order army to move to adjacent region

ExecuteAction("CHANGE_BURN_RATE_AT_WAYPOINT", WAYPOINT, REAL, INT)
Change burn rate at <WAYPOINT> within radius of <REAL> by <INT>.
Map_/Fire/Change burn rate at waypoint.

ExecuteAction("CHANGE_BURN_RATE_IN_AREA", TRIGGER_AREA, INT)
Change burn rate in area <TRIGGER_AREA> by <INT>.
Map_/Fire/Change burn rate in trigger area.

ExecuteAction("CREATE_DELAYED_CARRYOVER_UNIT_AT_WAYPOINT", OBJECT_TYPE_LIST, PLAYER, WAYPOINT, UNIT_REF)
Find the first delayed-carryover unit of type <OBJECT_TYPE_LIST> belonging to <PLAYER> and create it at <WAYPOINT>, then assign name <UNIT_REF> to reference it.
Unit_/Spawn/Spawn delayed-carryover unit

ExecuteAction("CREATE_UNIT_REVIVAL_ENTRY", OBJECT_TYPE, PLAYER)
Add a unit of type <OBJECT_TYPE> to the list of units <PLAYER> is allowed to revive.
Unit_/Spawn/Create unit-revival entry

ExecuteAction("CREATE_UNIT_REVIVAL_ENTRY_FROM_DELAYED_CARRYOVER_HERO", OBJECT_TYPE_LIST, PLAYER)
Take one of the delayed carryover units of type <OBJECT_TYPE_LIST> belonging to <PLAYER> and add it to that player's list of revivable units.
Unit_/Spawn/Create unit-revival entry from delayed carryover unit

ExecuteAction("CREATE_UNIT_REVIVAL_ENTRY_AT_LEVEL", OBJECT_TYPE, PLAYER, INT)
Add a unit of type <OBJECT_TYPE> to the list of units <PLAYER> is allowed to build at a fort. Unit will be built at level <INT>.
Unit_/Spawn/Create unit-revival entry at level

ExecuteAction("ENABLE_SPELL_STORE")
Enable the spell store.
Interface/Enable the spell store

ExecuteAction("DISABLE_SPELL_STORE")
Disable the spell store.
Interface/Disable the spell store

ExecuteAction("ENABLE_OBJECTIVES_SCREEN")
Enable the objectives screen.
Interface/Enable the objectives screen

ExecuteAction("DISABLE_OBJECTIVES_SCREEN")
Disable the objectives screen.
Interface/Disable the objectives screen

ExecuteAction("CLOSE_OBJECTIVES_SCREEN")
Close the objectives screen.
Interface/Close the objectives screen

ExecuteAction("ENABLE_PLANNING_MODE")
Enable planning mode.
Interface/Enable planning mode

ExecuteAction("DISABLE_PLANNING_MODE")
Disable planning mode.
Interface/Disable planning mode

ExecuteAction("FLASH_SPELL_STORE_BUTTON", INT)
The spell store button flashes for <INT> seconds.
User_/Flash/Flash the spell store button for a specified amount of time.

ExecuteAction("FLASH_OBJECTIVES_BUTTON", INT)
The objectives button flashes for <INT> seconds.
User_/Flash/Flash the objectives button for a specified amount of time.

ExecuteAction("FLASH_PLANNING_MODE_BUTTON", INT)
The planning mode button flashes for <INT> seconds.
User_/Flash/Flash the planning mode button for a specified amount of time.

ExecuteAction("DISPLAY_NOTIFICATION_BOX", NOTIFICATION_BOX_TYPE, LOCALIZED_TEXT, INT)
Display a popup notification box of type <NOTIFICATION_BOX_TYPE> with the message <LOCALIZED_TEXT> for <INT> seconds (0 for infinite).
Interface/Notification/Display popup notification box.

ExecuteAction("CREATE_NAMED_ON_TEAM_AT_OBJECTTYPE", UNIT, OBJECT_TYPE, TEAM, OBJECT_TYPE)
Spawn <UNIT> of type <OBJECT_TYPE> on <TEAM> at type <OBJECT_TYPE>
Unit_/Spawn/Spawn -- named unit on a team at an object.

ExecuteAction("UNIT_SET_MAX_LEVEL", UNIT, INT)
Sets <UNIT> maximum level to <INT>.
Unit_/ Sets a unit's maximum level

ExecuteAction("DISPLAY_NOTIFICATION_BOX_WITH_OBJECT_TYPE_IMAGE_OVERRIDE", NOTIFICATION_BOX_TYPE, LOCALIZED_TEXT, INT, OBJECT_TYPE)
Display a popup notification box of type <NOTIFICATION_BOX_TYPE> with the message <LOCALIZED_TEXT> for <INT> seconds (0 for infinite) with the icon of <OBJECT_TYPE>.
Interface/Notification/Display popup notification box with the icon image of an object type.

ExecuteAction("SELECT_BUILDER_BUTTON_FLASH", INT)
Flash the select builder button for <INT> seconds.
User_/Flash/Flash the select builder button for a specified amount of time.

--ACTIONS ONLY IN BFME1 and C&C ZeroHour (NON LUA GAME)--
ExecuteAction("INGAME_POPUP_MESSAGE", TEXT_STRING, INT, INT,INT, BOOL)
ExecuteAction("TEAM_SET_REPULSOR", TEAM, BOOL)
ExecuteAction("NAMED_SET_REPULSOR", UNIT, BOOL)
ExecuteAction("TEAM_SET_BOOBYTRAPPED", OBJECT_TYPE, TEAM)
ExecuteAction("NAMED_SET_BOOBYTRAPPED", OBJECT_TYPE, UNIT)
ExecuteAction("NAMED_SET_EVAC_LEFT_OR_RIGHT", UNIT, EVACUATE_CONTAINER_SIDE_CHOICE)
Unit/ Set which side of a container (likely a train) you want the riders to exit on.
ExecuteAction("SET_TRAIN_HELD", UNIT, BOOL)
ExecuteAction("AI_PLAYER_BUILD_TYPE_NEAREST_TEAM", PLAYER, OBJECT_TYPE, TEAM)
ExecuteAction("MOVE_CAMERA_ALONG_WAYPOINT_PATH", WAYPOINT, REAL, REAL, REAL, REAL)
ExecuteAction("RESET_INFANTRY_LIGHTING_OVERRIDE")
ExecuteAction("SET_INFANTRY_LIGHTING_OVERRIDE", REAL)
ExecuteAction("NAMED_USE_COMMANDBUTTON_ABILITY_USING_WAYPOINT_PATH", REAL)
ExecuteAction("TEAM_SET_UNMANNED_STATUS", TEAM)
ExecuteAction("NAMED_SET_UNMANNED_STATUS", UNIT)

--ACTIONS ONLY IN UNKNOWN (SCRIPTS.INI REMAININGS)--
ExecuteAction("BUILD_BASE_AT_LOCATION", ...)
ExecuteAction("BUILD_BASE_CLOSEST", ...)
ExecuteAction("BUILD_ECONOMY_BUILDING_AT_LOCATION", ...)
ExecuteAction("BUILD_ECONOMY_BUILDING_CLOSEST", ...)
ExecuteAction("MAP_SHROUD_IN_TRIGGER", ...)
ExecuteAction("TEAM_REPAIR_WEAKEST_MEMBER_OF_TEAM", ...)

--ACTIONS ONLY BFME2ROTWK--
ExecuteAction("CAMERA_BW_MODE_BEGIN", INT)
Frames to fade into black & white mode = <INT>
Camera_/Fade Effects/Start black & white mode.

ExecuteAction("CAMERA_BW_MODE_END")
Frames to fade into color mode = 
Camera_/Fade Effects/End black & white mode.

ExecuteAction("CAMERA_MOTION_BLUR", BOOLEAN, BOOLEAN)
Blur zoom, zoom in = <BOOLEAN> (true=zoom in, false = zoom out), saturate colors = <BOOLEAN>
Camera_/Fade Effects/Motion blur zoom.

ExecuteAction("CAMERA_MOTION_BLUR_END_FOLLOW")
End motion blur as the camera moves.
Camera_/Fade Effects/End motion blur as the camera moves.

ExecuteAction("CAMERA_MOTION_BLUR_FOLLOW", INT)
Start motion blur as the camera moves, amount= <INT> (start with 30 and adjust up or down). 
Camera_/Fade Effects/Start motion blur as the camera moves.

ExecuteAction("CAMERA_MOTION_BLUR_JUMP", WAYPOINT, BOOLEAN)
Blur zoom, zoom in at current location, zoom out at <WAYPOINT>, saturate colors = <BOOLEAN>
Camera_/Fade Effects/Motion blur zoom with jump cut.

ExecuteAction("CAMERA_RING_MODE_END", INT)
Frames to transition out of ring mode = <INT>
Camera_/Fade Effects/End Ring effect.

ExecuteAction("CAMERA_RING_MODE_START", INT)
Frames to transition into ring mode = <INT>
Camera_/Fade Effects/Start Ring effect.

ExecuteAction("COMMANDBAR_REMOVE_BUTTON_OBJECTTYPE", COMMAND_BUTTON, OBJECT_TYPE)
<COMMAND_BUTTON> is removed from all objects of type <OBJECT_TYPE>.
Scripting_/ Remove a command button from an object type.

ExecuteAction("DRAW_SKYBOX_BEGIN")
Start skybox mode (draw sky background).
Camera_/Skybox/Start skybox mode.

ExecuteAction("DRAW_SKYBOX_END")
End skybox mode (draw black background).
Camera_/Skybox/End skybox mode.

ExecuteAction("NAMED_STOP_FLUSH", UNIT)
<UNIT> stops and clears its waypoints.
Unit_/ Set a specific unit to stop and flush its waypoint list.

ExecuteAction("PALANTIR_EVENT", PALANTIR_EVENT)
A palantir event of type <PALANTIR_EVENT>
Palantir/Create a Palantir event.

ExecuteAction("SET_COUNTER_TO_TEAM_THREAT", COUNTER, TEAM, REAL)
Set <COUNTER> to <TEAM> radius of <REAL>
Scripting_/Counters/Set counter to team threat.

ExecuteAction("SET_COUNTER_TO_THREAT_FINDER_THREAT", COUNTER, THREAT_FINDER, THREAT_TYPE, PLAYER)
Set <COUNTER> to equal the threat at <THREAT_FINDER> of <THREAT_TYPE> for player <PLAYER>
Scripting_/Counters/Set counter to threat at a threatfinder.

ExecuteAction("SET_COUNTER_TO_UNIT_THREAT", COUNTER, UNIT, REAL)
Set <COUNTER> to <UNIT> radius of <REAL>
Scripting_/Counters/Set counter to single unit threat.

ExecuteAction("TEAM_HUNT_WITH_COMMAND_BUTTON", TEAM, COMMANDBUTTON_ABILITY_TEAM)
<TEAM> begins hunting using <COMMANDBUTTON_ABILITY_TEAM>.
Team_/Hunt/Set to hunt using commandbutton ability.

ExecuteAction("UNIT_THREAT_LEVEL", UNIT, COMPARISON, REAL, REAL)
<UNIT> has <COMPARISON> threat level <REAL> within radius <REAL>
Unit_/ Unit has (comparison) threat level within radius.

ExecuteAction("TEAM_THREAT_LEVEL", TEAM, COMPARISON, REAL, REAL)
<TEAM> has <COMPARISON> threat level <REAL> within radius <REAL>
Team_/ Team has (comparison) threat level within radius.

--ACTIONS ONLY CNC3KW--
ExecuteAction("ADD_TO_INTELL_DATABASE", INTELLIGENCE_DATABASE_CATEGORY)
ExecuteAction("BUILD_BASE_BUILDING_PER_TACTIC", OBJECT_TYPE, NEAR_OR_FAR, OBJECT_TYPE, UNIT, UNIT_REF)
Build building <OBJECT_TYPE> at foundation that is most <NEAR_OR_FAR>, relative to the object of type, <OBJECT_TYPE>
which is part of base named, <UNIT> ... then finally reference the new building as. <UNIT_REF>.
UNUSED/Base/AI build base building on a foundation chosen by proximity to tactical marker (new).
ExecuteAction("BUILD_BASE_BUILDING_WITH_TACTIC", OBJECT_TYPE, INT, UNIT, UNIT_REF)
Build building at slot <INT> in base <UNIT> and reference it as <UNIT_REF>
Base/AI build base building in slot in a referenced base.
ExecuteAction("CLEAR_MGBATTLE_RESTRICTION", UNIT)
ExecuteAction("CREATE_NAMED_STRIKE_FORCE_ON_TEAM_AT_WAYPOINT", STRIKE_FORCE, TEAM, WAYPOINT)
ExecuteAction("DISABLE_UI_FIXED_ELEMENT", UI_FIXED_ELEMENT, BOOL)
ExecuteAction("FLASH_UI_FIXED_ELEMENT", UI_FIXED_ELEMENT, BOOL)
ExecuteAction("GLOBAL_SET_STEALTH_ENABLED", BOOL)
ExecuteAction("MODIFY_METAGAME_MAX_TIBERIUM", PLAYER, INT)
ExecuteAction("MODIFY_METAGAME_PLAYERS_TIBERIUM", PLAYER, INT)
ExecuteAction("NAMED_FIRE_METAGAME_OP_INSTANT", UNIT, SPECIAL_POWER)
ExecuteAction("NAMED_FIRE_SPECIAL_POWER", UNIT, SPECIAL_POWER)
ExecuteAction("PLAYER_AI_CHANGEECONOMYBUILDER", PLAYER, BOOL)
ExecuteAction("SET_AVAILABLE_STRIKEFORCES", STRIKE_FORCE_LIST, BOOL)
ExecuteAction("SET_DISABLE_STRATEGIC_BUILDING", INT, PLAYER, BOOL)
Set disable strategic building <INT> for player <PLAYER> to <BOOL>
ExecuteAction("SET_GAMEPLAYMODE_TIMER", COUNTER, INT)
ExecuteAction("SET_IGNORE_SKIRMISH_VICTORY_CONDITIONS", BOOL)
ExecuteAction("SET_METAGAME_MAX_TIBERIUM", PLAYER, INT)
ExecuteAction("SET_METAGAME_PLAYERS_TIBERIUM", PLAYER, INT)
ExecuteAction("SET_METAGAME_TURN_TIMER", COUNTER, INT)
ExecuteAction("SET_MGBATTLE_RESTRICTION", UNIT, METAGAME_BATTLE_RESOLUTION)
ExecuteAction("SET_MG_PLAYER_OPS_POINTS_LIMITS", PLAYER, INT)
ExecuteAction("SET_UI_ELEMENT_ENABLED", ASSET_ID_STRING, BOOL)
ExecuteAction("SET_UNIT_POPULATION_PERCENTAGE_TO_COUNTER", UNIT, COUNTER)
ExecuteAction("SET_UNIT_UNREST_PERCENTAGE_TO_COUNTER", UNIT, COUNTER)
ExecuteAction("STRINGLIST_ADDSTRIKEFORCE", STRIKE_FORCE_LIST, STRIKE_FORCE)
ExecuteAction("STRINGLIST_REMOVESTRIKEFORCE", STRIKE_FORCE_LIST, STRIKE_FORCE)

--ACTIONS ONLY CNC3KW, RA3U, (CNC4)--
ExecuteAction("BUILD_LIST_ELIMINATE_FOOTPRINT", PLAYER)
Eliminate all building footprints for <PLAYER>.
Base/Eliminate building footprint.
ExecuteAction("BUILD_LIST_ELIMINATE_FOOTPRINT_ALL", UNIT)
Eliminate footprint for <UNIT>.
Base/Eliminate all building footprints.
ExecuteAction("BUILD_LIST_MOVE_TO_TOP", UNIT)
Move <UNIT> to top of build list.
Base/Move structure to top of build list.
ExecuteAction("CREATE_NAMED_ON_TEAM_AT_OBJECTTYPE_WITH_ORIENTATION", UNIT, OBJECT_TYPE, TEAM, UNIT, REAL)
Spawn <UNIT> of type <OBJECT_TYPE> on <TEAM> at named object <UNIT>, rotated <REAL> degrees.
Unit_/Spawn/Spawn - named unit on a team at an object.
ExecuteAction("CREATE_NAMED_ON_TEAM_AT_WAYPOINT_WITH_ORIENTATION", UNIT, OBJECT_TYPE, TEAM, WAYPOINT, REAL)
Spawn <UNIT> of type <OBJECT_TYPE> on <TEAM> at <WAYPOINT>, rotated <REAL> degrees.
ExecuteAction("CREATE_UNNAMED_ON_TEAM_AT_WAYPOINT_WITH_ORIENTATION", OBJECT_TYPE, TEAM, WAYPOINT, REAL)
Spawn unit of type <OBJECT_TYPE> on <TEAM> at <WAYPOINT>, rotated <REAL> degrees.
ExecuteAction("DISABLE_UI_BUILD_BUTTON", OBJECT_TYPE, BOOL)
ExecuteAction("DISABLE_UI_PLAYER_POWER_BUTTON", SPECIAL_POWER, BOOL)
ExecuteAction("DISABLE_UI_UNIT_ABILITY_BUTTON", UNIT, COMMANDBUTTON_ABILITY_UNIT, BOOL)
ExecuteAction("DISPLAY_TUTORIAL_TEXT", STRING)
ExecuteAction("FLASH_UI_BUILD_BUTTON", OBJECT_TYPE, BOOL)
ExecuteAction("FLASH_UI_PLAYER_POWER_BUTTON", SPECIAL_POWER, BOOL)
ExecuteAction("FLASH_UI_SUDS_ELEMENT", UI_SUDS_ELEMENT, UI_SUDS_ELEMENT_STATUS)
ExecuteAction("FLASH_UI_UNIT_ABILITY_BUTTON", UI_FIXED_ELEMENT, BOOL)
ExecuteAction("HIDE_TUTORIAL_TEXT")
ExecuteAction("LINK_MISSION_OBJECTIVE_TO_OBJECT", INT, UNIT, BOOL)
ExecuteAction("LINK_MISSION_OBJECTIVE_TO_OBJECT_WITH_PRESENTATION_SETTINGS", INT, UNIT, OBJECTIVE_PRESENTATION_SETTINGS)
ExecuteAction("LINK_MISSION_OBJECTIVE_TO_WAYPOINT", INT, WAYPOINT, BOOL)
ExecuteAction("LINK_MISSION_OBJECTIVE_TO_WAYPOINT_WITH_PRESENTATION_SETTINGS", INT, WAYPOINT, OBJECTIVE_PRESENTATION_SETTINGS)
ExecuteAction("MAP_SHROUD_SET_RESHROUD_TIME", INT)
ExecuteAction("MOVE_CAMERA_TO_NAMED", UNIT, REAL, REAL, REAL, REAL)
ExecuteAction("MUSIC_PLAY_TRACK_FINITE_TIMES_AS_SPECIAL_END_OF_LEVEL_MUSIC", MUSIC, INT, BOOL, BOOL)
ExecuteAction("NAMED_REMOVE_UPGRADE", UPGRADE, UNIT)
ExecuteAction("NAMED_SET_SLEEP_STATUS", UNIT, BOOL)
ExecuteAction("OPEN_COMMAND_BAR", TAB_STRING)
ExecuteAction("OPTIONAL_VICTORY")
ExecuteAction("PLAYER_AI_CHANGEBASEBUILDER", PLAYER, BOOL)
Turn AI Base Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_AI_CHANGESCIENCEUPGRADER", PLAYER, BOOL)
Turn AI Economy Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_AI_CHANGETACTICAL", PLAYER, BOOL)
Turn AI Party Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_AI_CHANGETEAMBUILDER", PLAYER, BOOL)
Turn AI Science Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_AI_CHANGEUNITBUILDER", PLAYER, BOOL)
Turn AI Unit Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_AI_CHANGEUNITUPGRADER", PLAYER, BOOL)
Turn AI Unit Upgrader Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_AI_CHANGEWALLBUILDER", PLAYER, BOOL)
Turn AI Wall Builder for <PLAYER> <BOOL>.
ExecuteAction("PLAYER_ALLOW_AI_AUTOACQUIRE", PLAYER, BOOL)
ExecuteAction("PLAYER_SET_BASE_POWER", PLAYER, INT)
ExecuteAction("PLAYER_SET_MONEY_CAP", PLAYER, INT)
ExecuteAction("PLAYER_SPECIAL_POWER_AVAILABILITY", PLAYER, SPECIAL_POWER, SPECIAL_POWER_AVAILABILITY)
ExecuteAction("PLAYER_UNIT_TYPE_SPECIAL_POWER_IGNORE_REQUIREMENTS", PLAYER, OBJECT_TYPE, SPECIAL_POWER, BOOL)
ExecuteAction("PLAY_SOUND_AS_IF_IT_WAS_AN_EVA_EVENT", SOUND)
ExecuteAction("PLAY_SOUND_AS_IF_IT_WAS_AN_EVA_EVENT_WITH_SUBTITLE", SOUND, STRING, SECONDS)
ExecuteAction("PLAY_SPEECH_AS_IF_IT_WAS_AN_EVA_EVENT", MUSIC)
ExecuteAction("PLAY_SPEECH_AS_IF_IT_WAS_AN_EVA_EVENT_WITH_SUBTITLE", MUSIC, STRING, SECONDS)
ExecuteAction("REGISTER_OBJECT_VS_OBJECT_KILL_RECORDING", OBJECT_TYPE, PLAYER, OBJECT_TYPE, PLAYER)
ExecuteAction("REMOVE_PLAYER_UPGRADE", UPGRADE, PLAYER)
ExecuteAction("RESET_CAMERA_TUTORIAL_STATE")
ExecuteAction("SATELLITE_VIEW_PRESENTATION_FOR_ALL_OBJECTIVES")
ExecuteAction("SATELLITE_VIEW_PRESENTATION_FOR_OBJECTIVE", INT)
ExecuteAction("SET_CAMPAIGN_FLAG", CAMPAIGN_FLAG, BOOL)
ExecuteAction("SET_COUNTER_TO_NUMBER_OBJECTS_PLAYER_OWNS_WITH_KINDOF", COUNTER, KIND_OF, PLAYER)
ExecuteAction("SET_MISSION_OBJECTIVE_STATUS", INT, MISSION_OBJECTIVE_STATUS)
ExecuteAction("SET_UNIT_HEALTH_PERCENTAGE_TO_COUNTER", UNIT, COUNTER)
ExecuteAction("SKIRMISH_AI_MAKE_BASE", PLAYER, WAYPOINT)
Player <PLAYER> has a base at <WAYPOINT>.
ExecuteAction("SKIRMISH_AI_REBUILD_SYSTEM_SCAN", PLAYER)
Scan for new structures to rebuild for <PLAYER>.
ExecuteAction("SKIRMISH_AI_SET_FAVORED_ENEMY", PLAYER, PLAYER)
Set favored enemy of <PLAYER> to <PLAYER>.
ExecuteAction("SKIRMISH_AI_USE_REBUILD_SYSTEM", PLAYER, BOOL)
Use structure rebuilds for <PLAYER> <BOOL>.
ExecuteAction("SKIRMISH_AI_USE_REPAIRS", PLAYER, BOOL)
Use structure repairs for <PLAYER> <BOOL>.
ExecuteAction("STORE_OBJECT_KILL_COUNT_TO_COUNTER", UNIT, COUNTER)
ExecuteAction("SWITCH_TO_PRODUCTION_QUEUE_TAB", PRODUCTION_QUEUE_TAB)
ExecuteAction("TEAM_AI_TRANSFER", TEAM, BOOL)
ExecuteAction("TEAM_ALLOW_AI_AUTOACQUIRE", TEAM, BOOL)
ExecuteAction("TEAM_CLEAR_MODELCONDITION", TEAM, MODEL_CONDITION)
ExecuteAction("TEAM_CONTEXT_SENSITIVE_ATTACK", TEAM, UNIT)
Team/Attack/Set team to capture a named object.
ExecuteAction("TEAM_SET_SLEEP_STATUS", TEAM, BOOL)
ExecuteAction("UNIT_AI_TRANSFER", UNIT, BOOL)
ExecuteAction("UNIT_AI_TRANSFER_ALL", PLAYER, BOOL)
ExecuteAction("UNIT_ALLOW_AI_AUTOACQUIRE", UNIT, BOOL)
ExecuteAction("UNIT_CLEAR_MODELCONDITION", UNIT, MODEL_CONDITION)
ExecuteAction("UNIT_CONTEXT_SENSITIVE_ATTACK", UNIT, UNIT)
ExecuteAction("UNIT_KILL_ALL_IN_AREA", PLAYER, AREA)
ExecuteAction("UNIT_SET_HEALTH", UNIT, REAL)
Set health of <UNIT> to percentage (0.0 - 100.0) <REAL>
ExecuteAction("UNIT_SET_STANCE", UNIT, STANCE_TYPE)
Unit_/ Sets a unit's current stance.

--ACTIONS ONLY RA3, RA3U--
ExecuteAction("PATH_MUSIC_ENABLE_RESUME_SYSTEM")

--ACTIONS ONLY RA3U (NOT RA3)--
ExecuteAction("ORE_NODE_SET_MAX_GATHER_VALUE", UNIT, INT)
Set node <UNIT> maximum gather amount to: <INT>.
Sets the maximum amount of ore that can be gathered from this ore node.
Object Type/Ore Node/Settings/Set maximum gather amount.

ExecuteAction("OVERRIDE_GLOBAL_TERRAIN_HEIGHT", INT)
Set the new terrain height to: <INT>
Map/Modify/Override global terrain height.
Makes the game assume the map is everywhere flat at the new height value. Only exception is the physics system, that will still use the painted height field.

ExecuteAction("SET_BLOOM_INTENSITY", REAL)
Set the current bloom intensity to: <REAL>
This sets the bloom intensity, please use a number from 0 to 1. 
Map/Modify/Change the current bloom intensity.

ExecuteAction("SET_LAST_CREATED_UNIT_TO_REFERENCE", UNIT_REF)
<UNIT_REF> to last spawned unit   
Scripting/Reference/Set reference to last spawned unit.

ExecuteAction("SET_TEXTURE_LOOKUP_TABLE", ?)
Set current lookup texture to: ?
Map/Modify/Change the current texture lookup table.

ExecuteAction("TOGGLE_SHADER_OVERRIDE", UNIT, SHADER?, BOOL?)
Set unit <UNIT> to toggle shader <SHADER>.
Toggles on|off a shader effect on an object.
Object Type/Settings/Toggle shader override on|off.

--ACTIONS ONLY RA3, RA3U AND CNC4--
ExecuteAction("ALLOW_DISALLOW_ONE_UPGRADE", PLAYER, UPGRADE, BOOL)
ExecuteAction("AUDIO_SET_SOUNDEFFECTS_SLIDER_FADEABLE", BOOL)
ExecuteAction("BORDER_SHROUD_SET_OPACITY", REAL)
ExecuteAction("CAMERA_LETTERBOX_BEGIN_WITH_RADAR")
Start letterbox mode (hide UI, add border), but keep the Radar visible. 
Cinematics/Settings/Start letterbox mode(shows radar).
ExecuteAction("CAMPAIGN_CREATE_AUTO_SAVE", STRING)
Create auto save checkpoint with description <STRING>.
ExecuteAction("CREATE_UNNAMED_ON_TEAM_AT_NAMED_OBJECT_LOCATION", OBJECT_TYPE, TEAM, UNIT)
Spawn unit of type <OBJECT_TYPE> on <TEAM> at named object <UNIT>.
Unit_/Spawn/Spawn - unit on a team at an object.
ExecuteAction("DISABLE_JOYPAD_COMMANDBAR_BUTTON", COMMAND_MENU_BUTTON, BOOL)
ExecuteAction("DISABLE_JOYPAD_HUD_FIXED_ELEMENT", CONSOLE_HUD_FIXED_ELEMENT, BOOL)
ExecuteAction("DISABLE_MOUSE_HUD_FIXED_ELEMENT", PC_HUD_FIXED_ELEMENT, BOOL)
ExecuteAction("EVALUATE_SCRIPT", SCRIPT)
IF <SCRIPT> conditions are true advance to next action in this sequential script.
Help Text: ONLY USE IN A SEQUENTIAL SCRIPT!! Used to determine if a sequential script should 
advance to the next action. This allows for short circuiting the current object/team idle check. 
Note that this cannot be the first action of a sequential script.
ExecuteAction("FADE_IN_FROM_BLACK", REAL)
ExecuteAction("FADE_OUT_TO_BLACK", REAL)
ExecuteAction("FIRE_SPECIAL_POWER_ON_UNIT", PLAYER, SPECIAL_POWER, UNIT)
ExecuteAction("FLASH_JOYPAD_COMMANDBAR_BUTTON", COMMAND_MENU_BUTTON, BOOL)
ExecuteAction("FLASH_JOYPAD_HUD_FIXED_ELEMENT", CONSOLE_HUD_FIXED_ELEMENT, BOOL)
ExecuteAction("FLASH_MOUSE_HUD_FIXED_ELEMENT", PC_HUD_FIXED_ELEMENT, BOOL)
ExecuteAction("FOR_EACH_PLAYER_OBJECT_EXECUTE_SCRIPT", PLAYER, SCRIPT)
For each member of <PLAYER> run <SCRIPT>.
ExecuteAction("FOR_EACH_TEAM_MEMBER_EXECUTE_SCRIPT", TEAM, SCRIPT)
For each member of <TEAM> run <SCRIPT>.
ExecuteAction("LINK_MISSION_HOT_SPOT_TO_OBJECT", MISSION_HOT_SPOT_STRING, UNIT, BOOL)
ExecuteAction("LINK_MISSION_HOT_SPOT_TO_WAYPOINT", MISSION_HOT_SPOT_STRING, WAYPOINT, BOOL)
ExecuteAction("LINK_MISSION_OBJECTIVE_TO_OBJECT_WITH_CATEGORY", MISSION_HOT_SPOT_STRING, BOOL)
ExecuteAction("LINK_MISSION_OBJECTIVE_TO_WAYPOINT_WITH_CATEGORY", MISSION_HOT_SPOT_STRING, BOOL)
ExecuteAction("MOVE_NAMED_UNIT_TO_UNIT", UNIT, UNIT)
ExecuteAction("MOVE_TEAM_TO_UNIT", TEAM, UNIT)
ExecuteAction("NAMED_FOLLOW_WAYPOINTS_STARTING_AT_WAYPOINT", UNIT, WAYPOINT_PATH, WAYPOINT)
ExecuteAction("NAMED_FORCE_ATTACK_NAMED", UNIT, UNIT)
ExecuteAction("NAMED_FORCE_ATTACK_WAYPOINT", UNIT, WAYPOINT)
ExecuteAction("NAMED_OUTLINE", UNIT)
ExecuteAction("NAMED_REMOVE_INFOBOX", UNIT)
ExecuteAction("NAMED_SET_DISABLED", UNIT, DISABLED_TYPE, BOOL)
ExecuteAction("NAMED_SET_MAX_HEALTH", UNIT, INT, BOOL)
Sets the maximum health of a unit to the value specified and optionally sets the units current health to this value as well. 
(Note if setting the max health lower than the current health the current health will automatically be set to max.  
Object Type/Settings/Set the max health of a unit
ExecuteAction("NAMED_SHOW_INFOBOX", UNIT, TEXT_STRING, REAL, TEXT_STRING)
Displays an info box over the top of the named object.  Optionally the 4th parameter takes a string of an image id to display an image. 
If the image is found it will display this image in the info box.  
Note that a time of 0 will result in a never ending info box that will only be removed when the script Remove Info Box is used on the unit.     
Interface/Info Box/Show Info Box
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ABILITY_ON_NAMED_POSITION", UNIT, COMMANDBUTTON_ABILITY_UNIT, UNIT)
ExecuteAction("PATH_MUSIC_DISABLE_DYNAMIC_SYSTEM")
ExecuteAction("PATH_MUSIC_ENABLE_DYNAMIC_SYSTEM")
ExecuteAction("PATH_MUSIC_ENABLE_SPECIFIC_DYNAMIC_SYSTEM", PATH_MUSIC_DYNAMIC_STATE_SET)
ExecuteAction("PATH_MUSIC_FADE_IN_MUSIC", REAL)
ExecuteAction("PATH_MUSIC_FADE_OUT_MUSIC", REAL)
ExecuteAction("PATH_MUSIC_PLAY_EVENT", PATH_MUSIC_EVENT)
ExecuteAction("PATH_MUSIC_STOP_MUSIC")
ExecuteAction("PLACE_AI_BEACON_LOCATION", PLAYER, BEACON_TYPE, WAYPOINT)
ExecuteAction("PLACE_AI_BEACON_OBJECT", PLAYER, BEACON_TYPE, UNIT)
ExecuteAction("PLAYER_AI_CHANGE_ECONOMY_MANAGER", PLAYER, BOOL)
ExecuteAction("PLAYER_ALLOWED_TOBE_COOPAI", PLAYER, BOOL)
ExecuteAction("PLAYER_CAMERA_MOVE_TO", PLAYER, CAMERA, REAL, REAL, REAL, REAl)
ExecuteAction("PLAYER_CAMERA_MOVE_TO_NAMED", PLAYER, UNIT, REAL, REAL, REAL, REAL)
ExecuteAction("PLAYER_CAMERA_TETHER_NAMED", PLAYER, UNIT, BOOL, REAL)
ExecuteAction("PLAYER_FIRE_MULTI_TARGET_SPECIAL_POWER_AT_WAYPOINTS", PLAYER, SPECIAL_POWER, WAYPOINT, WAYPOINT)
ExecuteAction("PLAYER_GRANT_SPECIAL_POWER", SPECIAL_POWER, PLAYER)
ExecuteAction("PLAYER_LOCK_PLAYER_TECH", PLAYER, PLAYER_TECH, BOOL)
ExecuteAction("PLAYER_SET_ALLY_BUILDABILITY", PLAYER, PLAYER, BOOL)
<PLAYER> is allowed to build in <PLAYER> controlled territory: <BOOL>
Player/Build/Player cannot build in a specific ally's buildability radii (ground control).
ExecuteAction("PLAYER_SET_ALL_UNITS_TO_FLEE", PLAYER)
ExecuteAction("PLAYER_SET_DISABLED", PLAYER, DISABLED_TYPE, BOOL)
ExecuteAction("PLAYER_SET_MAX_PLAYER_POWER_POINTS", PLAYER, INT)
ExecuteAction("PLAYER_SET_PLAYER_POWER_POINTS", PLAYER, INT)
ExecuteAction("PLAYER_TOGGLE_RESOURCE_SHARING", PLAYER, BOOL)
ExecuteAction("PLAYER_TOGGLE_SKIRMISH_AI", PLAYER, BOOL)
ExecuteAction("PLAY_SOUND_AS_AI_COCOMMANDER_DIALOG", SOUND)
ExecuteAction("PLAY_SOUND_AS_AI_COCOMMANDER_DIALOG_WITH_SUBTITLE", SOUND, TEXT_STRING, REAL)
ExecuteAction("REDALERT_DISABLE_THREAT_LEVEL_BONUS", PLAYER)
ExecuteAction("REPAIR_OBJECT", UNIT, BOOL, BOOL)
This script will attempt to start or stop repair on the named object.  
It should only be called on repairable objects, and will automatically deduct the cost from the player that owns the object unless specified to be free.
ExecuteAction("RESET_CAMERA_AT_OBJECT", UNIT, REAL, REAL, REAL)
ExecuteAction("SET_AREA_REFERENCE", AREA_REF, AREA)
Set <AREA_REF> to reference area <AREA>.
ExecuteAction("SET_COOP_AI_COMMAND_UI_ENABLED", BOOL)
Set CoOpAI's interface to <BOOL>.
ExecuteAction("SET_MISSION_HOT_SPOT_ACTIVENESS", MISSION_HOT_SPOT_STRING, BOOL)
ExecuteAction("SET_MISSION_HOT_SPOT_VISIBILITY", MISSION_HOT_SPOT_STRING, BOOL)
ExecuteAction("SET_REFERENCE_TO_FIRST_TEAM_MEMBER_IN_AREA", UNIT_REF, TEAM, AREA)
Set <UNIT_REF> to first member of <TEAM> in <AREA>.
ExecuteAction("SET_REFERENCE_TO_RANDOM_TEAM_MEMBER", UNIT_REF, TEAM)
Set <UNIT_REF> to random member of <TEAM>.
ExecuteAction("SHOW_UNIT_INTRO", OBJECT_TYPE)
ExecuteAction("SKIRMISH_AI_CLEAR_ALL_ENEMY_PLAYERS_PRIORITIES", PLAYER)
ExecuteAction("SKIRMISH_AI_CLEAR_ENEMY_PLAYER_PRIORITY", PLAYER, PLAYER)
ExecuteAction("SKIRMISH_AI_CONSIDER_ALL_ENEMIES_WHEN_BUILDING", PLAYER)
ExecuteAction("SKIRMISH_AI_CONSIDER_ENEMY_WHEN_BUILDING", PLAYER, PLAYER)
ExecuteAction("SKIRMISH_AI_DONT_CONSIDER_ANY_ENEMIES_WHEN_BUILDING", PLAYER)
ExecuteAction("SKIRMISH_AI_DONT_CONSIDER_ENEMY_WHEN_BUILDING", PLAYER, PLAYER)
ExecuteAction("SKIRMISH_AI_SET_ALL_ENEMY_PLAYERS_PRIORITIES", PLAYER, INT)
ExecuteAction("SKIRMISH_AI_SET_ENEMY_PLAYER_PRIORITY", PLAYER, PLAYER, INT)
ExecuteAction("SKIRMISH_AI_START", PLAYER)
ExecuteAction("SKIRMISH_AI_TRANSFER_ALL", PLAYER, BOOL)
ExecuteAction("SKIRMISH_AI_USE_AUTOMATIC_ENEMY_PLAYER_PRIORITY_SCHEME", PLAYER, ENEMY_SORTING_METHOD)
ExecuteAction("SKIRMISH_AI_USE_DEFAULT_AUTOMATIC_ENEMY_PLAYER_PRIORITY_SCHEME", PLAYER)
ExecuteAction("TEAM_FOLLOW_WAYPOINTS_STARTING_AT_WAYPOINT", TEAM, WAYPOINT_PATH, BOOL, BOOL, WAYPOINT)
Have <TEAM> follow <WAYPOINT_PATH>, as a team is <BOOL>, in formation is <BOOL>, starting at waypoint <WAYPOINT>.
ExecuteAction("TEAM_SET_DISABLED", TEAM, DISABLED_TYPE, BOOL)
ExecuteAction("TEAM_SET_STANCE", TEAM, STANCE)
ExecuteAction("TELEPORT_STRUCTURE", UNIT, WAYPOINT)
ExecuteAction("TOGGLE_LOCK_CURRENT_SELECTION", BOOL)
ExecuteAction("TOGGLE_RADAR_UI", BOOL)
ExecuteAction("UNIT_EXECUTE_SEQUENTIAL_SCRIPT_COPY", UNIT, SCRIPT)
<UNIT> executes a copy of <SCRIPT> sequentially.
ExecuteAction("UNIT_SPAWN_NAMED_OBJECT_ON_TEAM_AT_NAMED_OBJECT_LOCATION", UNIT, OBJECT_TYPE, TEAM, UNIT)
ExecuteAction("UNIT_SET_MODELCONDITION_GENERIC", UNIT, MODEL_CONDITION)
Object Type/Settings/Set a model condition flag on a named object for duration(optional).


--ACTIONS ONLY CNC4--
ExecuteAction("ADD_AREA_AS_SPAWN_ZONE_TO_PLAYER", AREA, PLAYER, BOOL)
ExecuteAction("ADD_FX_ON_OBJECT", FXParticle_Type, UNIT)
FX <FXParticle_Type> Applied onto <UNIT>.
ExecuteAction("ALLOW_DISALLOW_BUILDING_OBJECT_LIST", PLAYER, OBJECT_LIST, BOOL)
ExecuteAction("AUDIOMIXER_DISABLE_DYNAMIC_SYSTEM")
ExecuteAction("AUDIOMIXER_ENABLE_DYNAMIC_SYSTEM")
ExecuteAction("AUDIOMIXER_ENABLE_SPECIFIC_DYNAMIC_SYSTEM", AUDIOMIXER_DYNAMIC_STATE_SET)
ExecuteAction("AUDIOMIXER_LOAD_SNAPSHOT", AUDIOMIXER_SNAPSHOT_SET)
ExecuteAction("AUDIOMIXER_RESUME_DYNAMIC_SYSTEM")
ExecuteAction("AUDIO_SET_AMBIENT_SLIDER_FADEABLE", BOOL)
ExecuteAction("AUDIO_SET_MOVIE_SLIDER_FADEABLE", BOOL)
ExecuteAction("AUDIO_SET_MUSIC_SLIDER_FADEABLE", BOOL)
ExecuteAction("AUDIO_SET_VOICE_SLIDER_FADEABLE", BOOL)
ExecuteAction("CAMERA_LETTERBOX_SHOW_LOCATION_TEXT", STRING, REAL)
Show letterbox location text <STRING> for <REAL> seconds.
ExecuteAction("CAMERA_LETTERBOX_SHOW_TITLE_TEXT", STRING, REAL)
Show letterbox title text <STRING> for <REAL> seconds.
ExecuteAction("CAPTURE_GOAL_OR_TECH_STRUCTURE", PLAYER, UNIT)
ExecuteAction("CAPTURE_UPGRADE_CRYSTAL", UNIT, UNIT)
ExecuteAction("CHANGE_FACTION_INGAME", PLAYER, FACTION_CNC4)
ExecuteAction("CLOSE_DEPLOY_DIALOG")
ExecuteAction("CREATE_RANDOM_OBJECT_AT_NAMED_OBJECT", OBJECT_TYPE, TEAM, UNIT)
Spawn a random object from <OBJECT_TYPE> on <TEAM> at <UNIT>.
ExecuteAction("DISABLE_UI_UPGRADE_BUTTON", UPGRADE, BOOL)
ExecuteAction("EXECUTE_NAMED_SCRIPT", STRING)
Execute named script called <STRING>.
Run an EA sharp script.
ExecuteAction("FLASH_UI_UPGRADE_BUTTON", UPGRADE, BOOL)
ExecuteAction("HEAL_NAMED_UNIT_STRUCTURE", UNIT, INT)
ExecuteAction("HIDE_MOUSE_HUD_FIXED_ELEMENT", PC_HUD_FIXED_ELEMENT, BOOL)
ExecuteAction("HIDE_UI_INFOBOX")
ExecuteAction("NAMED_SET_MAX_HEALTH_AS_PERCENTAGE", UNIT, REAL, BOOL)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ABILITY", UNIT, COMMANDBUTTON_ABILITY_UNIT)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ABILITY_AT_WAYPOINT", UNIT, COMMANDBUTTON_ABILITY_UNIT, WAYPOINT)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ABILITY_ON_NAMED", UNIT, COMMANDBUTTON_ABILITY_UNIT, UNIT)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ON_NEAREST_ENEMY_BUILDING", UNIT, COMMANDBUTTON_ABILITY_UNIT)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ON_NEAREST_ENEMY_BUILDING_CLASS", UNIT, COMMANDBUTTON_ABILITY_UNIT, KIND_OF)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ON_NEAREST_ENEMY_UNIT", UNIT, COMMANDBUTTON_ABILITY_UNIT)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ON_NEAREST_GARRISONED_BUILDING", UNIT, COMMANDBUTTON_ABILITY_UNIT)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ON_NEAREST_KINDOF", UNIT, COMMANDBUTTON_ABILITY_UNIT, KIND_OF)
ExecuteAction("NAMED_USE_LOGIC_COMMAND_ON_NEAREST_OBJECTTYPE", UNIT, COMMANDBUTTON_ABILITY_UNIT, OBJECT_TYPE)
ExecuteAction("OBSOLETE_CAMERA_FADE_ADD", REAL, REAL, INT, INT, INT)
ExecuteAction("OBSOLETE_CAMERA_FADE_MULTIPLY", REAL, REAL, INT, INT, INT)
ExecuteAction("OBSOLETE_CAMERA_FADE_SATURATE", REAL, REAL, INT, INT, INT)
ExecuteAction("OBSOLETE_CAMERA_FADE_SUBTRACT", REAL, REAL, INT, INT, INT)
ExecuteAction("OBSOLETE_FLASH_UI_SUDS_ELEMENT", UI_SUDS_ELEMENT, UI_SUDS_ELEMENT_STATUS)
ExecuteAction("OBSOLETE_LINK_MISSION_OBJECTIVE_TO_OBJECT_WITH_PRESENTATION_SETTINGS", INT, UNIT, OBJECTIVE_PRESENTATION_SETTINGS)
ExecuteAction("OBSOLETE_LINK_MISSION_OBJECTIVE_TO_WAYPOINT_WITH_PRESENTATION_SETTINGS", INT, WAYPOINT, OBJECTIVE_PRESENTATION_SETTINGS)
ExecuteAction("OBSOLETE_OPEN_COMMAND_BAR", TAB_STRING)
ExecuteAction("OBSOLETE_SATELLITE_VIEW_PRESENTATION_FOR_ALL_OBJECTIVES")
ExecuteAction("OBSOLETE_SATELLITE_VIEW_PRESENTATION_FOR_OBJECTIVE", INT)
ExecuteAction("OPEN_DEPLOY_DIALOG")
Show the Deploy Dialog window.
Set Deploy Dialog window to Show.
ExecuteAction("PATH_MUSIC_RESUME_DYNAMIC_SYSTEM")
ExecuteAction("PLAYER_BUILD_OBJECT_INSTANTLY", OBJECT_TYPE, UNIT)
Player builds <OBJECT_TYPE> instantly from <UNIT>.
ExecuteAction("PROCEED_IF_AUDIO_COMPLETE", SOUND)
ExecuteAction("PROCEED_IF_MOVIE_COMPLETE", MOVIE)
ExecuteAction("SET_COUNTER_TO_OBJECTS_OWNED_BY_PLAYER_BY_KINDOF", COUNTER, PLAYER, KIND_OF)
ExecuteAction("SET_COUNTER_TO_OBJECTS_UNDER_PRODUCTION_ON_OBJECT_BY_KINDOF", COUNTER, KIND_OF, UNIT)
ExecuteAction("SET_CRYSTAL_UPGRADE_POINTS_OF_PLAYER", PLAYER, INT)
ExecuteAction("SET_GOAL_OWNERSHIP_DURATION", UNIT, REAL)
ExecuteAction("SET_MAX_REDEPLOYMENT_COUNT", PLAYER, INT)
ExecuteAction("SET_OBJECT_ALLOWED_FOR_PLAYER", OBJECT_TYPE, PLAYER)
ExecuteAction("SET_PLAYER_BUILDTIME_CHEAT", PLAYER, REAL)
ExecuteAction("SET_PLAYER_CLASS", PLAYER, PLAYER_CLASS_TYPE)
ExecuteAction("SET_PLAYER_CRYSTAL_UPGRADE_POINTS_TO_COUNTER", PLAYER, COUNTER)
ExecuteAction("SET_REFERENCE_TO_LAST_SPAWNED_UNIT", UNIT_REF)
Set <UNIT_REF> to last spawned unit.
ExecuteAction("SET_REFERENCE_TO_PLAYER_SPELLBOOK", UNIT_REF, PLAYER)
Set <UNIT_REF> to player spellbook of player <PLAYER>.
ExecuteAction("SET_UNIT_HEALTH_PERCENTAGE_FROM_COUNTER", UNIT, COUNTER)
ExecuteAction("SHOW_UI_INFOBOX", UNIT, STRING, REAL, STRING)
<UNIT> Show info box text <STRING> for <REAL> seconds. Display Image from button <STRING>.
ExecuteAction("SHOW_UI_INFOBOX_BUILD_BUTTON", OBJECT_TYPE, TEXT_STRING, TEXT_STRING)
ExecuteAction("SHOW_UI_INFOBOX_FIXED_ELEMENT", PC_HUD_FIXED_ELEMENT, TEXT_STRING, TEXT_STRING)
ExecuteAction("SHOW_UI_INFOBOX_PLAYER_POWER_BUTTON", SPECIAL_POWER, TEXT_STRING, TEXT_STRING)
ExecuteAction("SHOW_UI_INFOBOX_UNIT_ABILITY_BUTTON", UNIT, COMMANDBUTTON_ABILITY_UNIT, TEXT_STRING, TEXT_STRING)
ExecuteAction("SHOW_UI_INFOBOX_UPGRADE_BUTTON", UPGRADE, TEXT_STRING, TEXT_STRING)
ExecuteAction("SKIRMISH_WAIT_FOR_LOGIC_COMMAND_AVAILABLE_ALL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<PLAYER>'s <TEAM> all wait until <COMMANDBUTTON_ABILITY_TEAM> is ready.
ExecuteAction("SKIRMISH_WAIT_FOR_LOGIC_COMMAND_AVAILABLE_PARTIAL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<PLAYER>'s <TEAM> wait until at least one member <COMMANDBUTTON_ABILITY_TEAM> is ready.
ExecuteAction("SOUND_3D_ONLY_SET_VOLUME", REAL)
ExecuteAction("SPAWN_OBJECT_IN_REINFORCEMENT_OBJECT_AT_NAMED_OBJECT", OBJECT_TYPE, OBJECT_TYPE, PLAYER, UNIT)
ExecuteAction("SPAWN_OBJECT_IN_REINFORCEMENT_OBJECT_AT_WAYPOINT", OBJECT_TYPE, OBJECT_TYPE, PLAYER, WAYPOINT)
ExecuteAction("SPAWN_TEAM_IN_REINFORCEMENT_OBJECT_AT_NAMED_OBJECT", TEAM, OBJECT_TYPE, PLAYER, UNIT)
ExecuteAction("SPAWN_TEAM_IN_REINFORCEMENT_OBJECT_AT_WAYPOINT", TEAM, OBJECT_TYPE, PLAYER, WAYPOINT)
ExecuteAction("STORE_OBJECT_VS_OBJECT_KILLS_TO_COUNTER", OBJECT_TYPE, PLAYER, OBJECT_TYPE, PLAYER, COUNTER)
ExecuteAction("TEAM_ALL_USE_LOGIC_COMMAND_ON_NEAREST_ENEMY_BUILDING", TEAM, COMMANDBUTTON_ABILITY_TEAM)
ExecuteAction("TEAM_ALL_USE_LOGIC_COMMAND_ON_NEAREST_ENEMY_BUILDING_CLASS", TEAM, COMMANDBUTTON_ABILITY_TEAM, KIND_OF)
ExecuteAction("TEAM_ALL_USE_LOGIC_COMMAND_ON_NEAREST_ENEMY_UNIT", TEAM, COMMANDBUTTON_ABILITY_TEAM)
ExecuteAction("TEAM_ALL_USE_LOGIC_COMMAND_ON_NEAREST_GARRISONED_BUILDING", TEAM, COMMANDBUTTON_ABILITY_TEAM)
ExecuteAction("TEAM_ALL_USE_LOGIC_COMMAND_ON_NEAREST_KINDOF", TEAM, COMMANDBUTTON_ABILITY_TEAM, KIND_OF)
ExecuteAction("TEAM_ALL_USE_LOGIC_COMMAND_ON_NEAREST_OBJECTTYPE", TEAM, COMMANDBUTTON_ABILITY_TEAM, OBJECT_TYPE)
ExecuteAction("TEAM_PARTIAL_USE_LOGIC_COMMAND", REAL, TEAM, COMMANDBUTTON_ABILITY_TEAM)
ExecuteAction("TEAM_SET_REFERENCE_TO_PLAYERS_NEAREST_UNIT_OF_TYPE", OBJECT_TYPE, TEAM, UNIT_REF)
ExecuteAction("TEAM_USE_LOGIC_COMMAND_ABILITY", TEAM, COMMANDBUTTON_ABILITY_TEAM)
ExecuteAction("TEAM_USE_LOGIC_COMMAND_ABILITY_AT_WAYPOINT", TEAM, COMMANDBUTTON_ABILITY_TEAM, WAYPOINT)
ExecuteAction("TEAM_USE_LOGIC_COMMAND_ABILITY_ON_NAMED", TEAM, COMMANDBUTTON_ABILITY_TEAM, UNIT)
ExecuteAction("UNHIDE_LAYER", TEXT_STRING)
ExecuteAction("WAYPOINT_CREATE_RADAR_EVENT", WAYPOINT, RADAR_EVENT)

---------------------
--EVALUATECONDITION--
---------------------

EvaluateCondition("CONDITION_FALSE")
False.
Scripting_/ False.

EvaluateCondition("COUNTER", COUNTER, COMPARISON, INT)
Counter <COUNTER> IS <COMPARISON> <INT>
Scripting_/ Counter compared to a value.

EvaluateCondition("COUNTER_SECONDS", COUNTER, COMPARISON, REAL)
Counter <COUNTER> IS <COMPARISON> time <REAL> secs. 
Scripting_/ Counter compared to time in seconds.

EvaluateCondition("COUNTER_COUNTER", COUNTER, COMPARISON, COUNTER)
Counter <COUNTER> IS <COMPARISON> counter <COUNTER>
Scripting_/ Counter compared to another Counter.

EvaluateCondition("DISTANCE_BETWEEN_OBJ", UNIT, UNIT, COMPARISON, REAL)
Distance between object <UNIT> and object <UNIT> IS <COMPARISON> to value <REAL>
Scripting_/ Compare distance between 2 objects.

EvaluateCondition("DISTANCE_BETWEEN_TEAM", TEAM, TEAM, COMPARISON, REAL)
Distance between team <TEAM> and team <TEAM> IS <COMPARISON> to value <REAL>
Scripting_/ Compare distance between 2 teams.

EvaluateCondition("UNIT_HEALTH", UNIT, COMPARISON, INT)
<UNIT> Health IS <COMPARISON> <INT> percent.
Unit_/ Unit health % compared to a value.

EvaluateCondition("FLAG", FLAG, BOOLEAN)
<FLAG> IS <BOOLEAN>
Scripting_/ Flag compared to a value.

EvaluateCondition("TEAM_STATE_IS", TEAM, TEAM_STATE)
<TEAM> state IS <TEAM_STATE>
Team_/ Team state is.

EvaluateCondition("TEAM_STATE_IS_NOT", TEAM, TEAM_STATE)
<TEAM> state IS not <TEAM_STATE>
Team_/ Team state is not.

EvaluateCondition("TEAM_HAS_CUSTOM_STATE", TEAM, TEAM_STATE)
<TEAM> has the custom state <TEAM>
Team_/ Team custom has state.

EvaluateCondition("CONDITION_TRUE")
True.
Scripting_/ True.

EvaluateCondition("TIMER_EXPIRED", COUNTER)
Timer <COUNTER> has expired.
Scripting_/ Timer expired.

EvaluateCondition("PLAYER_ALL_DESTROYED", PLAYER)
Everything belonging to  <PLAYER> has been destroyed.
Player_/ All destroyed.

EvaluateCondition("PLAYER_ALL_BUILDFACILITIES_DESTROYED", PLAYER)
All factories belonging to  <PLAYER> have been destroyed.
Player_/ All factories destroyed.

EvaluateCondition("TEAM_INSIDE_AREA_PARTIALLY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
<TEAM> has one or more units in <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ Team has units in an area.

EvaluateCondition("NAMED_INSIDE_AREA", UNIT, TRIGGER_AREA)
<UNIT> is in <TRIGGER_AREA>).
Unit_/ Unit entered area.

EvaluateCondition("TEAM_DESTROYED", TEAM)
<TEAM> has been destroyed.
Team_/ Team is destroyed.

EvaluateCondition("TEAM_HAS_FEWER_THAN_X_UNITS_WITH_KINDOF", TEAM, INT, KIND_OF)
<TEAM> has fewer than <INT> units left of type <KIND_OF>.
Team_/ Team has fewer than X units left of KindOf..

EvaluateCondition("NAMED_RANK_LEVEL", UNIT, INT)
<UNIT> is rank <INT> or above.
Unit_/Experience/ Unit is rank level or above.

EvaluateCondition("NAMED_DESTROYED", UNIT)
<UNIT> has been destroyed.
Unit_/ Unit is destroyed.

EvaluateCondition("NAMED_DYING", UNIT)
<UNIT> has been killed, but still on screen.
Unit_/ Unit is dying.

EvaluateCondition("NAMED_TOTALLY_DEAD", UNIT)
<UNIT> has been killed, and is finished dying.
Unit_/ Unit is finished dying.

EvaluateCondition("NAMED_NOT_DESTROYED", UNIT)
<UNIT> exists and is alive.
Unit_/ Unit exists and is alive.

EvaluateCondition("TEAM_HAS_UNITS", TEAM)
<TEAM> has one or more units.
Team_/ Team has units.

EvaluateCondition("CAMERA_MOVEMENT_FINISHED")
The camera movement has finished.
Camera_/ Camera movement finished.

EvaluateCondition("NAMED_INSIDE_AREA", UNIT, TRIGGER_AREA)
<UNIT> is inside <TRIGGER_AREA>
Unit_/ Unit inside an area.

EvaluateCondition("NAMED_OUTSIDE_AREA", UNIT, TRIGGER_AREA)
<UNIT> is outside <TRIGGER_AREA>
Unit_/ Unit outside an area.

EvaluateCondition("TEAM_INSIDE_AREA_ENTIRELY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
<TEAM> is all inside <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ Team completely inside an area.

EvaluateCondition("TEAM_OUTSIDE_AREA_ENTIRELY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
<TEAM> is completely outside <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ Team is completely outside an area.

EvaluateCondition("NAMED_ATTACKED_BY_OBJECTTYPE", UNIT, OBJECT_TYPE)
<UNIT> has been attacked by a(n) <OBJECT_TYPE>
Unit_/ Unit is attacked by a specific unit type.

EvaluateCondition("TEAM_ATTACKED_BY_OBJECTTYPE", TEAM, OBJECT_TYPE)
<TEAM> has been attacked by a(n) <OBJECT_TYPE>
Team_/ Team is attacked by a specific unit type.

EvaluateCondition("NAMED_ATTACKED_BY_PLAYER", UNIT, PLAYER)
<UNIT> has been attacked by <PLAYER>
Unit_/ Unit has been attacked by a player.

EvaluateCondition("TEAM_ATTACKED_BY_PLAYER", TEAM, PLAYER)
<TEAM> has been attacked by <PLAYER>
Team_/ Team has been attacked by a player.

EvaluateCondition("BUILT_BY_PLAYER", OBJECT_TYPE, PLAYER)
<OBJECT_TYPE> has been built by <PLAYER>
Player_/ Player has built an object type.

EvaluateCondition("NAMED_CREATED", UNIT)
<UNIT> has been created.
Unit_/ Unit has been created.

EvaluateCondition("TEAM_CREATED", TEAM)
<TEAM> has been created.
Team_/ Team has been created.

EvaluateCondition("PLAYER_HAS_CREDITS", INT, COMPARISON, PLAYER)
<INT> is <COMPARISON> the number of credits possessed by <PLAYER>
Player_/ Player has (comparison) to a number of credits.

EvaluateCondition("NAMED_DISCOVERED", UNIT, PLAYER)
<UNIT> has been discovered by <PLAYER>
Player_/ Player has discovered a specific unit.

EvaluateCondition("NAMED_BUILDING_IS_EMPTY", UNIT)
<UNIT> is empty.
Unit_/ A specific building is empty.

EvaluateCondition("BUILDING_ENTERED_BY_PLAYER", PLAYER, UNIT)
<PLAYER> has entered building named <UNIT>
Player_/ Player has entered a specific building.

EvaluateCondition("ENEMY_SIGHTED", UNIT, RELATION, PLAYER)
<UNIT> sees a(n) <RELATION> unit belonging to <PLAYER>.
Unit_/ Unit has sighted a(n) friendly/neutral/enemy unit belonging to a side.

EvaluateCondition("ENEMY_SIGHTED_BY_TEAM", TEAM, RELATION, PLAYER)
<TEAM> sees a(n) <RELATION> unit belonging to <PLAYER>.
Team/ Team has sighted a(n) friendly/neutral/enemy unit belonging to a side.

EvaluateCondition("TYPE_SIGHTED", UNIT, OBJECT_TYPE, PLAYER)
<UNIT> sees a(n) <OBJECT_TYPE> belonging to <PLAYER>.
Unit_/ Unit has sighted a type of unit belonging to a side.

EvaluateCondition("TEAM_DISCOVERED", TEAM, PLAYER)
<TEAM> has been discovered by <PLAYER>
Player_/ Player has discovered a team.

EvaluateCondition("MISSION_ATTEMPTS", PLAYER, COMPARISON, INT)
<PLAYER> has attempted the mission <COMPARISON> <INT> times.
Player_/ Player has attempted the mission a number of times.

EvaluateCondition("NAMED_OWNED_BY_PLAYER", UNIT, PLAYER)
<UNIT> is owned by <PLAYER>
Player/Owns/ Player owns the specific Unit.

EvaluateCondition("TEAM_OWNED_BY_PLAYER", TEAM, PLAYER)
<TEAM> is owned by <PLAYER>
Player/Owns/ Player owns a specific team.

EvaluateCondition("PLAYER_HAS_N_OR_FEWER_FACTION_BUILDINGS", PLAYER, INT)
<PLAYER> currently owns <INT> or fewer faction buildings.
Player/Owns/ Player currently owns N or fewer faction buildings.

EvaluateCondition("PLAYER_HAS_N_OR_FEWER_BASES", PLAYER, INT)
<PLAYER> currently controls <INT> or fewer bases.
Player/Owns/ Player currently controls N or fewer bases.

EvaluateCondition("PLAYER_HAS_POWER", PLAYER)
<PLAYER> buildings are powered.
Player_/ Player's base currently has power.

EvaluateCondition("PLAYER_HAS_NO_POWER", PLAYER)
<PLAYER> buildings are not powered.
Player_/ Player's base currently has no power.

EvaluateCondition("NAMED_REACHED_WAYPOINTS_END", UNIT, WAYPOINT_PATH)
<UNIT> has reached the end of <WAYPOINT_PATH>
Unit_/ Unit has reached the end of a specific waypoint path.

EvaluateCondition("TEAM_REACHED_WAYPOINTS_END", TEAM, WAYPOINT_PATH)
<TEAM> has reached the end of <WAYPOINT_PATH>
Team_/ Team has reached the end of a specific waypoint path.

EvaluateCondition("NAMED_SELECTED", UNIT)
<UNIT> is currently selected.
Unit_/ Unit currently selected.

EvaluateCondition("NAMED_ENTERED_AREA", UNIT, TRIGGER_AREA)
<UNIT> enters <TRIGGER_AREA>
Unit_/ Unit enters an area.

EvaluateCondition("NAMED_EXITED_AREA", UNIT, TRIGGER_AREA)
<UNIT> exits <TRIGGER_AREA>
Unit_/ Unit exits an area.

EvaluateCondition("TEAM_ENTERED_AREA_ENTIRELY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
<TEAM> all enter <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ Team entirely enters an area.

EvaluateCondition("NAMED_BASE_UNPACKABLE_FOR_PLAYER", UNIT, PLAYER)
<UNIT> is unpackable for the player: <PLAYER>.
Base/ Player is allowed to unpack a base.

EvaluateCondition("TEAM_ENTERED_AREA_PARTIALLY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
One unit from <TEAM> enters <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ One unit enters an area.

EvaluateCondition("TEAM_EXITED_AREA_ENTIRELY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
<TEAM> all exit <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ Team entirely exits an area.

EvaluateCondition("TEAM_EXITED_AREA_PARTIALLY", TEAM, TRIGGER_AREA, SURFACE_TYPE)
One unit from <TEAM> exits <TRIGGER_AREA> (<SURFACE_TYPE>).
Team_/ One unit exits an area.

EvaluateCondition("MULTIPLAYER_ALLIED_VICTORY")
The multiplayer game has ended in victory for the local player and his allies.
Multiplayer_/ Multiplayer allied victory.

EvaluateCondition("MULTIPLAYER_ALLIED_DEFEAT")
The multiplayer game has ended in defeat for the local player and his allies.
Multiplayer_/ Multiplayer allied defeat.

EvaluateCondition("MULTIPLAYER_PLAYER_DEFEAT")
Everything belonging to the local player has been destroyed, but his allies may or may not have been defeated.
Multiplayer_/ Multiplayer local player defeat check.

EvaluateCondition("HAS_FINISHED_VIDEO", MOVIE)
<MOVIE> has completed playing.
Multimedia_/ Video has completed playing.

EvaluateCondition("HAS_FINISHED_SPEECH", DIALOG)
<DIALOG> has completed playing.
Multimedia_/ Speech has completed playing.

EvaluateCondition("HAS_FINISHED_AUDIO", SOUND)
<SOUND> has completed playing.
Multimedia_/ Sound has completed playing.

EvaluateCondition("PLAYER_TRIGGERED_SPECIAL_POWER", PLAYER, SPECIAL_POWER)
Player <PLAYER> starts using <SPECIAL_POWER>.
Player_/ Player starts using a special power.

EvaluateCondition("PLAYER_TRIGGERED_SPECIAL_POWER_FROM_NAMED", PLAYER, SPECIAL_POWER, UNIT)
Player <PLAYER> starts using <SPECIAL_POWER> from <UNIT>.
Player_/ Player start using a special power from a named unit.

EvaluateCondition("PLAYER_MIDWAY_SPECIAL_POWER", PLAYER, SPECIAL_POWER)
Player <PLAYER> is midway using <SPECIAL_POWER>.
Player_/ Player is midway through using a special power.

EvaluateCondition("PLAYER_MIDWAY_SPECIAL_POWER_FROM_NAMED", PLAYER, SPECIAL_POWER, UNIT)
Player <PLAYER> is midway using <SPECIAL_POWER> from <UNIT>.
Player_/ Player is midway through using a special power from a named unit.

EvaluateCondition("PLAYER_COMPLETED_SPECIAL_POWER", PLAYER, SPECIAL_POWER)
Player <PLAYER> completed using <SPECIAL_POWER>.
Player_/ Player completed using a special power.

EvaluateCondition("PLAYER_COMPLETED_SPECIAL_POWER_FROM_NAMED", PLAYER, SPECIAL_POWER, UNIT)
Player <PLAYER> completed using <SPECIAL_POWER> from <UNIT>.
Player_/ Player completed using a special power from a named unit.

EvaluateCondition("PLAYER_ACQUIRED_SCIENCE", PLAYER, SCIENCE)
Player <PLAYER> acquired <SCIENCE>.
Player_/ Player acquired a Science.

EvaluateCondition("PLAYER_CAN_PURCHASE_SCIENCE", PLAYER, SCIENCE)
Player <PLAYER> can purchase <SCIENCE>.
Player_/ Player can purchase a particular Science (has all prereqs & points).

EvaluateCondition("PLAYER_HAS_REACHED_LEVEL_CAP", PLAYER)
<PLAYER> has reached his level cap (cannot gain any more Science Purchace Points)
Player_/Upgrades & Sciences/Has Player Reached Level Cap

EvaluateCondition("PLAYER_HAS_SCIENCEPURCHASEPOINTS", PLAYER, INT)
Player <PLAYER> has at least <INT> Science Purchase Points available.
Player_/ Player has a certain number of Science Purchase Points available.

EvaluateCondition("PLAYER_BUILT_UPGRADE", PLAYER, UPGRADE)
Player <PLAYER> built <UPGRADE>.
Player_/ Player built an upgrade.

EvaluateCondition("PLAYER_BUILT_UPGRADE_FROM_NAMED", PLAYER, UPGRADE, UNIT)
Player <PLAYER> built <UPGRADE> from <UNIT>.
Player_/ Player built an upgrade from a named unit.

EvaluateCondition("PLAYER_HAS_N_OR_FEWER_BUILDINGS", PLAYER, INT)
<PLAYER> currently owns <INT> or fewer buildings.
Player/Owns/ Player currently owns N or fewer buildings.

EvaluateCondition("PLAYER_DESTROYED_N_BUILDINGS_PLAYER", PLAYER, INT, PLAYER)
Player <PLAYER> destroyed <INT> or more buildings owned by <PLAYER>.
Player_/ Player destroyed N or more of an opponent's buildings.

EvaluateCondition("PLAYER_HAS_OBJECT_COMPARISON", PLAYER, COMPARISON, INT, OBJECT_TYPE)
<PLAYER> has <COMPARISON> <INT> unit or structure of type <OBJECT_TYPE>
Player_/ Player has (comparison) unit type.

EvaluateCondition("PLAYER_HAS_COMPARISON_UNIT_TYPE_IN_TRIGGER_AREA_WITH_UPGRADE", PLAYER, COMPARISON, INT, OBJECT_TYPE, TRIGGER_AREA, UPGRADE)
<PLAYER> has <COMPARISON> <INT> unit or structure with <OBJECT_TYPE> in the <TRIGGER_AREA> with upgrade <UPGRADE>
Player_/ Player has (comparison) kind of unit or structure in an area with a specified upgrade.

EvaluateCondition("PLAYER_HAS_COMPARISON_UNIT_TYPE_IN_TRIGGER_AREA", PLAYER, COMPARISON, INT, OBJECT_TYPE, TRIGGER_AREA)
<PLAYER> has <COMPARISON> <INT> unit or structure of type <OBJECT_TYPE> in the <TRIGGER_AREA>
Player_/ Player has (comparison) unit type in an area.

EvaluateCondition("PLAYER_HAS_NUMBER_OBJECTS_WITH_MODELCONDITION", PLAYER, MODEL_CONDITION, COMPARISON, INT)
# of objects owned by player <PLAYER> with model condition <MODEL_CONDITION> is <COMPARISON> <INT>.
Player_/ Player has (comparison) objects with model condition

EvaluateCondition("PLAYER_HAS_NUMBER_UNITS_DISTANCE_FROM_OBJECT", PLAYER, COMPARISON, INT, REAL, UNIT)
Player <PLAYER> has <COMPARISON> <INT> units at least <REAL> yards from <UNIT>.
Player_/ Player has (comparison) units more than x distance from object

EvaluateCondition("COMPARISON_TREES_IN_TRIGGER_AREA", COMPARISON, INT, TRIGGER_AREA)
There are <COMPARISON> <INT> trees in the <TRIGGER_AREA> .
Trees_/ There are (comparison) trees in an area.

EvaluateCondition("PLAYER_HAS_COMPARISON_UNIT_KIND_IN_TRIGGER_AREA", PLAYER, COMPARISON, INT, KIND_OF, TRIGGER_AREA)
<PLAYER> has <COMPARISON> <INT> unit or structure with <KIND_OF> in the <TRIGGER_AREA>
Player_/ Player has (comparison) kind of unit or structure in an area.

EvaluateCondition("PLAYER_POWER_COMPARE_PERCENT", PLAYER, COMPARISON, INT)
<PLAYER> has <COMPARISON> <INT> percent power supply ratio.
Player_/ Player has (comparison) percent power supply to consumption.

EvaluateCondition("PLAYER_EXCESS_POWER_COMPARE_VALUE", PLAYER, COMPARISON, INT)
<PLAYER> has <COMPARISON> <INT> excess kilowatts power supply.
Player_/ Player has (comparison) kilowatts excess power supply.

EvaluateCondition("UNIT_EMPTIED", UNIT)
<UNIT> emptied its contents.
Unit_/ Unit has emptied its contents.

EvaluateCondition("SKIRMISH_SPECIAL_POWER_READY", PLAYER, SPECIAL_POWER)
<PLAYER> is ready to fire <SPECIAL_POWER>.
Skirmish_/ Player's special power is ready to fire.

EvaluateCondition("SKIRMISH_FIRE_SPECIAL_POWER_ON_TEAM", PLAYER, SPECIAL_POWER, TEAM)
<PLAYER> can perform special power <SPECIAL_POWER> at team location <TEAM>.
Skirmish_/ Player's special power is able to fire on team.

EvaluateCondition("UNIT_HAS_OBJECT_STATUS", UNIT, OBJECT_STATUS)
<UNIT> has <OBJECT_STATUS>
Unit_/ Unit has object status.

EvaluateCondition("TEAM_ALL_HAS_OBJECT_STATUS", TEAM, OBJECT_STATUS)
<TEAM> has <OBJECT_STATUS>
Team_/ Team has object status - all.

EvaluateCondition("TEAM_SOME_HAVE_OBJECT_STATUS", TEAM, OBJECT_STATUS)
<TEAM> has <OBJECT_STATUS>
Team_/ Team has object status - partial.

EvaluateCondition("SKIRMISH_VALUE_IN_AREA", PLAYER, COMPARISON, REAL, TRIGGER_AREA)
<PLAYER> has <COMPARISON> <REAL> threat within area <TRIGGER_AREA>
Skirmish Only_/ Player has (condition) threat level in area.

EvaluateCondition("SKIRMISH_PLAYER_FACTION", PLAYER, FACTION)
<PLAYER> is <FACTION>
Skirmish_/ Player is faction. - untested

EvaluateCondition("SKIRMISH_SUPPLIES_VALUE_WITHIN_DISTANCE", PLAYER, REAL, TRIGGER_AREA, REAL)
<PLAYER> has supplies within <REAL> of <TRIGGER_AREA> worth at least <REAL>
Skirmish Only_/ Supplies are within specified distance.

EvaluateCondition("SKIRMISH_COMMAND_BUTTON_READY_ALL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<PLAYER>'s <TEAM> are ready to use <COMMANDBUTTON_ABILITY_TEAM> (all applicable members).
Skirmish_/ Command Ability is ready - all.

EvaluateCondition("SKIRMISH_COMMAND_BUTTON_READY_PARTIAL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_TEAM)
<PLAYER>'s <TEAM> are ready to use <COMMANDBUTTON_ABILITY_TEAM> (at least one member).
Skirmish_/ Command Ability is ready - partial

EvaluateCondition("SKIRMISH_UNOWNED_FACTION_UNIT_EXISTS", PLAYER, COMPARISON, INT)
<PLAYER>. There are <COMPARISON> <INT> unowned faction units.
Skirmish_/ Unowned faction unit -- comparison.

EvaluateCondition("SKIRMISH_PLAYER_HAS_PREREQUISITE_TO_BUILD", PLAYER, OBJECT_TYPE)
<PLAYER> can build <OBJECT_TYPE>.
Skirmish_/ Player has prerequisites to build an object type.

EvaluateCondition("SKIRMISH_PLAYER_HAS_COMPARISON_GARRISONED", PLAYER, COMPARISON, INT)
<PLAYER> has <COMPARISON> <INT> garrisoned buildings.
Skirmish_/ Player has garrisoned buildings -- comparison.

EvaluateCondition("SKIRMISH_PLAYER_HAS_COMPARISON_CAPTURED_UNITS", PLAYER, COMPARISON, INT)
<PLAYER> has captured <COMPARISON> <INT> units.
Skirmish_/ Player has captured units -- comparison

EvaluateCondition("SKIRMISH_NAMED_AREA_EXIST", PLAYER, TRIGGER_AREA)
<PLAYER>. <TRIGGER_AREA> exists.
Skirmish_/ Area exists.

EvaluateCondition("SKIRMISH_PLAYER_HAS_UNITS_IN_AREA", PLAYER, TRIGGER_AREA)
<PLAYER> has units in <TRIGGER_AREA>.
Skirmish_/ Player has units in an area

EvaluateCondition("SKIRMISH_PLAYER_HAS_BEEN_ATTACKED_BY_PLAYER", PLAYER, PLAYER)
<PLAYER> has been attacked by <PLAYER>.
Skirmish_/ Player has been attacked by player.

EvaluateCondition("SKIRMISH_PLAYER_IS_OUTSIDE_AREA", PLAYER, TRIGGER_AREA)
<PLAYER> has doesn't have units in <TRIGGER_AREA>.
Skirmish_/ Player doesn't have units in an area.

EvaluateCondition("SKIRMISH_PLAYER_HAS_DISCOVERED_PLAYER", PLAYER, PLAYER)
<PLAYER> has discovered <PLAYER>.
Skirmish_/ Player has discovered another player.

EvaluateCondition("MUSIC_TRACK_HAS_COMPLETED", MUSIC, INT)
<MUSIC> has completed at least <INT> times. (NOTE: This can only be used to start other music. USING THIS SCRIPT IN ANY OTHER WAY WILL CAUSE REPLAYS TO NOT WORK.)
Multimedia_/ Music track has completed some number of times.

EvaluateCondition("SUPPLY_SOURCE_SAFE", PLAYER, INT)
<PLAYER> closest supply src with at least <INT> available resources is SAFE from enemy influence.
Skirmish_/ Supply source is safe.

EvaluateCondition("SUPPLY_SOURCE_ATTACKED", PLAYER)
<PLAYER> supply source is under attack.
Skirmish_/ Supply source is attacked.

EvaluateCondition("START_POSITION_IS", PLAYER, INT)
<PLAYER> starting position is <INT> .
Skirmish_/ Start position.

EvaluateCondition("ZONE_FOCUS_MORE_THAN", TEXT_STRING, INT)
Zone named <TEXT_STRING> has been entered at least <INT> times.
LivingWorld_/ Zone Focus Check.

EvaluateCondition("IS_SEIGE_ATTACHED_TO_WALL", UNIT)
Is Siege Unit named <UNIT> attached to a wall. 
Unit_/ CHeck if Siege Unit is attached to wall.

EvaluateCondition("BANNER_PRESSED", TEXT_STRING)
Banner button <TEXT_STRING> was pressed.
LivingWorld_/Banner pressed.

EvaluateCondition("PLAYER_LOST_OBJECT_TYPE", PLAYER, OBJECT_TYPE)
<PLAYER> has lost an object of type <OBJECT_TYPE> (can be an object type list).
Player_/ Player has lost an object of type.

EvaluateCondition("CAMERA_HIT_SPECIFIC_SPLINE_WAYPOINT", WAYPOINT)
Camera following spline path hits <WAYPOINT> waypoint.
Camera_/Camera following spline path hits specified waypoint.

EvaluateCondition("CAMERA_ENTERED_AREA", TRIGGER_AREA)
Camera enters <TRIGGER_AREA>
Camera_/Camera entered a specific area.

EvaluateCondition("TEAM_IS_LED_BY_UNIT", TEAM, UNIT)
Is team <TEAM> affected by leadership ability from unit <UNIT>
Team_/ Is Team affected by leadership ability from unit.

EvaluateCondition("PLAYER_COMPARE_LIGHT_POINTS", PLAYER, COMPARISON, INT)
<PLAYER> has light points <COMPARISON> to the value <INT>
Player_/ Player has light points (comparison) to a value.

EvaluateCondition("HAS_COMMAND_POINTS_TO_BUILD_TEAM", PLAYER, TEAM)
<PLAYER> has enough command points to build team <TEAM>
Player_/ Player has enough command points to build a team.

EvaluateCondition("HAS_COMMAND_POINTS_TO_BUILD_UNIT", PLAYER, OBJECT_TYPE)
<PLAYER> has enough command points to build unit <OBJECT_TYPE>
Player_/ Player has enough command points to build a unit.

EvaluateCondition("CAN_BUILD_AT_BASE", PLAYER, UNIT)
Can player <PLAYER> build at base <UNIT>
Player_/ Can build at base.

EvaluateCondition("CAN_BUILD_OBJECTTYPE_AT_BASE", PLAYER, UNIT, OBJECT_TYPE)
Can player <PLAYER> build at base<UNIT> an object of type, <OBJECT_TYPE>
Player_/ Can build a particular type of structure at base.

EvaluateCondition("PLAYER_HAS_KILLED_KINDOF_UNITS", PLAYER, INT, KIND_OF)
<PLAYER> has killed <INT> or more units of kindof <KIND_OF>
Player_/ Player currently has killed N or more units of KindOf.

EvaluateCondition("PLAYER_HAS_KILLED_TYPE_UNITS", PLAYER, INT, OBJECT_TYPE)
<PLAYER> has killed <INT> or more units of type <OBJECT_TYPE>
Player_/ Player currently has killed N or more units of type.

EvaluateCondition("NAMED_DESTROYED_BY_OBJECTTYPE", UNIT, OBJECT_TYPE)
<UNIT> has been destroyed by a(n) <OBJECT_TYPE>
Unit_/ Unit is destroyzed by a specific unit type.

EvaluateCondition("GATE_IS_OPEN", UNIT)
The unit (presumed a gate) referenced as <UNIT> is OPEN.
Unit (includes Structures)/ Check if a gate is open. (False, if not a gate, or closed)

EvaluateCondition("MUSIC_IS_PLAYING_FROM_SCRIPT")
The music scripting system is on.
Audio_/Music/MUSIC_IS_PLAYING_FROM_SCRIPT

EvaluateCondition("UNIT_CAN_PATH_TO_WAYPOINT", UNIT, WAYPOINT)
<UNIT> can path to waypoint <WAYPOINT>
Unit_/ Unit can path to waypoint.

EvaluateCondition("UNIT_CAN_PATH_TO_OBJECT", UNIT, UNIT)
<UNIT> can path to unit/object <UNIT>
Unit_/ Unit can path to object.

EvaluateCondition("TEAM_CAN_PATH_TO_WAYPOINT", TEAM, WAYPOINT)
The first unit of team <TEAM> can path to waypoint <WAYPOINT>
Team_/ Team can path to waypoint.

EvaluateCondition("TEAM_CAN_PATH_TO_OBJECT", TEAM, UNIT)
The first unit of team <TEAM> can path to unit/object <UNIT>
Team_/ Team can path to object.

EvaluateCondition("UNIT_CAN_PATH_INTO_PLAYERS_NEAREST_BASE", UNIT, PLAYER)
Unit<UNIT> is inside, or can path into the nearest base owned by player, <PLAYER>
Unit/ Unit can path into (Player's) nearest base. Or is already inside it :-)

EvaluateCondition("TEAM_CAN_PATH_INTO_PLAYERS_NEAREST_BASE", TEAM, PLAYER)
The first unit of team <TEAM> is inside, or can path into the nearest base owned by player, <PLAYER>
Team/ Team can path into (Player's) nearest base. Or is already inside it :-).

EvaluateCondition("UNIT_COMPARE_RANK", UNIT, COMPARISON, INT)
Does unit <UNIT> have rank <COMPARISON> to <INT>
Unit_/ Unit compared to rank level.

EvaluateCondition("PLAYER_COMPARE_RANK", PLAYER, COMPARISON, INT)
Does player <PLAYER> have rank <COMPARISON> to <INT>
Player_/ Player compared to rank level.

EvaluateCondition("EVAL_TEAM_HEALTH", TEAM, COMPARISON, INT)
Check if Team <TEAM> has health <COMPARISON> to <INT> percent
Team_/ Compare team health.

EvaluateCondition("UNIT_HAS_GAINED_LEVEL", UNIT)
<UNIT>has gained a level
Unit_/Experience/Unit gained experience level.

EvaluateCondition("UNIT_IS_AT_LEVEL", UNIT, TEXT_STRING)
<UNIT> is at experience level <TEXT_STRING>
Unit_/Experience/Unit is at a specified experience level.

EvaluateCondition("UNIT_HAS_NUM_SKILL_POINTS", UNIT, COMPARISON, INT)
<UNIT> has <COMPARISON> <INT> skill points
Unit_/Skill Points/Unit has (comparison) number of skill points.

EvaluateCondition("PLAYER_HAS_OBJECT_OF_VETERANCY", PLAYER, OBJECT_TYPE, COMPARISON, INT)
Player <PLAYER> has obvject of type <OBJECT_TYPE> with rank level <COMPARISON> to <INT>
Player/Experience/Player has object of rank level.

EvaluateCondition("OBJECT_OF_TYPE_OR_LIST_INSIDE_REFD_BASE", OBJECT_TYPE, UNIT_REF)
There is a unit of type (or list) <OBJECT_TYPE> inside the base <UNIT_REF>
Base/There is an object of given type (or list) inside the base.

EvaluateCondition("TEAM_ENTERED_REFD_BASE_ENTIRELY", TEAM, UNIT_REF)
Team <TEAM> has entered the base <UNIT_REF> entirely.
Base/Team/Team entered a base, entirely.

EvaluateCondition("TEAM_ENTERED_REFD_BASE_PARTIALLY", TEAM, UNIT_REF)
Team <TEAM> has entered the base <UNIT_REF> partially.
Base/Team/Team entered a base, partially.

EvaluateCondition("TEAM_EXITED_REFD_BASE_ENTIRELY", TEAM, UNIT_REF)
Team <TEAM> has exited the base <UNIT_REF> entirely.
Base/Team/Team exited a base, entirely.

EvaluateCondition("TEAM_EXITED_REFD_BASE_PARTIALLY", TEAM, UNIT_REF)
Team <TEAM> has exited the base <UNIT_REF> partially.
Base/Team/Team exited a base, partially.

EvaluateCondition("NAMED_ENTERED_REFD_BASE", UNIT, UNIT_REF)
Unit <UNIT> has entered the base <UNIT_REF> entirely.
Base/Unit/Unit entered a base.

EvaluateCondition("NAMED_EXITED_REFD_BASE", UNIT, UNIT_REF)
Unit <UNIT> has exited the base <UNIT_REF> entirely.
Base/Unit/Unit exited a base.

EvaluateCondition("TEAM_ENTERED_NEAREST_BASE_ENTIRELY", TEAM, PLAYER)
Team <TEAM> has entered the nearest base owned by player <PLAYER> entirely.
Base/Team/Team entered (Player's) nearest base, entirely.

EvaluateCondition("TEAM_ENTERED_NEAREST_BASE_PARTIALLY", TEAM, PLAYER)
Team <TEAM> has entered the nearest base owned by player <PLAYER> partially.
Base/Team/Team entered (Player's) nearest base, partially.

EvaluateCondition("TEAM_EXITED_NEAREST_BASE_ENTIRELY", TEAM, PLAYER)
Team <TEAM> has exited the nearest base owned by player <PLAYER> entirely.
Base/Team/Team exited (Player's) nearest base, entirely.

EvaluateCondition("TEAM_EXITED_NEAREST_BASE_PARTIALLY", TEAM, PLAYER)
Team <TEAM> has exited the nearest base owned by player <PLAYER> partially.
Base/Team/Team exited (Player's) nearest base, partially.

EvaluateCondition("NAMED_ENTERED_NEAREST_BASE", UNIT, PLAYER)
Unit <UNIT> has entered the nearest base owned by player <PLAYER> entirely.
Base/Unit/Unit entered (Player's) nearest base.

EvaluateCondition("NAMED_EXITED_NEAREST_BASE", UNIT, PLAYER)
Unit <UNIT> has exited the nearest base owned by player <PLAYER> entirely.
Base/Unit/Unit exited (Player's) nearest base.

EvaluateCondition("UNIT_HAS_PASSENGER", UNIT)
Evaluate if <UNIT> is containing any passengers.
Unit_/Unit/Unit has passenger.

EvaluateCondition("UNIT_IS_ATTACKED_AND_CANNOT_RETALIATE", UNIT)
Evaluate if <UNIT> is being attacked and cannot retaliate.
Unit_/Unit is being attacked but cannot retaliate.

EvaluateCondition("TEAM_IS_ATTACKED_AND_CANNOT_RETALIATE_ANY", TEAM)
Evaluate if any team member of <TEAM> is being attacked and cannot retaliate.
Team_/Any Team meember is being attacked but cannot retaliate.

EvaluateCondition("TEAM_IS_ATTACKED_AND_CANNOT_RETALIATE_ALL", TEAM)
Evaluate if all team members of <TEAM> who are being attacked and cannot retaliate.
Team_/All Team members who are being attacked cannot retaliate.

EvaluateCondition("IS_GAME_IN_SKIRMISH_OR_MULTIPLAYER", BOOLEAN)
Is the game in a skirmish or multiplayer mode == <BOOLEAN>
GameType/Is game in a skirmish or multiplayer game.

EvaluateCondition("REGION_CAMPS_SHOULD_UNPACK")
Should camps in this region map unpack?
Base/ Should camps unpack for this region map?

EvaluateCondition("COMPARE_NUM_PLAYERS_IN_GAME", COMPARISON, INT)
Is this a <COMPARISON> <INT> player game.
GameType/Compares the number of players in game to a value.

EvaluateCondition("IS_UNIT_WEBBED", UNIT, BOOLEAN)
Is webbed status of <UNIT> == <BOOLEAN>
Unit_/Test webbed status of a unit.

EvaluateCondition("ANY_HERO_REACHED_RANK", PLAYER, INT, INT)
Does <PLAYER> have <INT> Heroes that have reached rank <INT>
ObjectivesTest/Num heroes reached level during game.

EvaluateCondition("NUM_UNITS_LEVELED_UP", PLAYER, INT, BOOLEAN)
Does <PLAYER> have <INT> units that has gained a level this game --> should include Heroes <BOOLEAN>
ObjectivesTest/Num units leveled up during game.

EvaluateCondition("PLAYER_HAS_NUM_UNITS_WITH_UPGRADE", PLAYER, INT, UPGRADE)
Does <PLAYER> have <INT> units that has upgrade <UPGRADE>
ObjectivesTest/Num units has specified upgrade.

EvaluateCondition("PLAYER_HAS_NUM_UNITS_LOADED_WITH_OBJECT", PLAYER, INT, OBJECT_TYPE, OBJECT_TYPE)
Does <PLAYER> have <INT> units of type <OBJECT_TYPE> loaded on transport of type <OBJECT_TYPE>
ObjectivesTest/Num units of type loaded on transport.

EvaluateCondition("UNIT_HAS_TOGGLED_WEAPON", PLAYER, OBJECT_TYPE)
Does <PLAYER> have <OBJECT_TYPE> that have toggled weapon set.
ObjectivesTest/Does Player have Units that have Toggled Weapon set.

EvaluateCondition("UNIT_IN_ALT_FORMATION", PLAYER, OBJECT_TYPE)
Does <PLAYER> have <OBJECT_TYPE> that is currently in alternate formation.
ObjectivesTest/Does Player have Units that are in alternate formation.

EvaluateCondition("UNIT_USING_AUTOPICKUP", PLAYER, OBJECT_TYPE)
Does <PLAYER> have <OBJECT_TYPE> that has triggered auto pickup.
ObjectivesTest/Does Player have Units that have triggered auto pickup.

EvaluateCondition("ANY_UNITS_USING_BLOODTHIRSTY", PLAYER)
Does <PLAYER> have any units that are currently bloodthirsty
ObjectivesTest/Does Player have Units that are bloodthirsty.

--CONDTIONS ONLY IN C&C ZERO HOUR (NON LUA GAME)--
EvaluateCondition("NAMED_HAS_FREE_CONTAINER_SLOTS", UNIT)
EvaluateCondition("SKIRMISH_TECH_BUILDING_WITHIN_DISTANCE", PLAYER, REAL, AREA)

--CONDTIONS ONLY BFME2ROTWK--
EvaluateCondition("BRIDGE_BROKEN", BRIDGE)
<BRIDGE> has been broken.
Unit_/ Bridge is broken.

EvaluateCondition("BRIDGE_REPAIRED", BRIDGE)
<BRIDGE> has been repaired.
Unit_/ Bridge is repaired.

--CONDTIONS ONLY IN BFME2ROTWK, CNC3TWKW, RA3U, C&C4 (NOT IN BFME1 AND C&CZH)--
EvaluateCondition("TYPE_SELECTED", OBJECT_TYPE)
<OBJECT_TYPE> is currently selected.
Unit_/ Unit type currently selected.

EvaluateCondition("CAMERA_ZOOM_DISTANCE", REAL)
Player has zoomed camera <REAL> units.
Camera_/ Camera zoom distance.

EvaluateCondition("PLAYER_HAS_COMPARISON_UNIT_TYPE_IN_TRIGGER_AREA_COMPLETELY_BUILT", PLAYER, COMPARISON, INT, OBJECT_TYPE, TRIGGER_AREA)
<PLAYER> has <COMPARISON> <INT> completely built units or structures of type <OBJECT_TYPE> in the <TRIGGER_AREA>
Player_/ Player has (comparison) of completely built unit type in an area.

EvaluateCondition("IS_GAME_MODE_ACTIVE", TEXT_STRING)
Is <TEXT_STRING> game mode active
GameType/Is game mode active?

EvaluateCondition("CAMERA_RESET")
Player has reset camera
Camera_/ Camera reset.

EvaluateCondition("PLAYER_IS_IN_PLANNING_MODE", PLAYER)
Player <PLAYER> is in planning mode.
Player_/Player is in planning mode

EvaluateCondition("SPELL_STORE_IS_OPEN")
The spell store is open.
Interface_/The spell store is open

EvaluateCondition("CAMERA_ROTATE_DISTANCE", REAL)
Player has rotated camera <REAL> degrees.
Camera_/ Camera rotate distance.

EvaluateCondition("LIVING_WORLD_IS_REGION_REF_BOUND", LIVING_WORLD_REGION_REF)
Is <LIVING_WORLD_REGION_REF> bound to a region
_Region/Is Region Ref bound to a region?

EvaluateCondition("IS_NUM_OF_UNITS_BELONGING_TO_PLAYER_NEAR_EVA_EVENT_LAST_PLAYED_LOCATION_COMPARISON_INT", PLAYER, REAL, EVA_EVENT, COMPARISON, INT)
Is the number of units belong to <PLAYER> within <REAL> feet of the location where <EVA_EVENT> last played <COMPARISON> <INT>
Player_/Is number of units belonging to a player near EVA event's last played location greater than, less than, or equal to a fixed value

EvaluateCondition("UNIT_USING_STANCE", UNIT, STANCE)
Is <UNIT> in the <STANCE> stance.
Unit_/Is named unit in a stance.

EvaluateCondition("HAS_DELAYED_CARRYOVER_UNIT_OF_TYPE", OBJECT_TYPE, PLAYER)
Is there a delayed-carryover object of type <OBJECT_TYPE> belonging to <PLAYER> still waiting to spawn
Unit_/Is there a delayed-carryover unit of type

EvaluateCondition("TOGGLE_STANCE_SUBMENU_IS_OPEN")
The toggle stance command sub-menu is open.
Interface_/The toggle stance command sub-menu is open

EvaluateCondition("HAS_EVA_EVENT_PLAYED_IN_LAST_N_SECONDS", EVA_EVENT, REAL)
Has <EVA_EVENT> played with in the last <REAL> seconds
Player_/Eva event played recently

EvaluateCondition("IS_AREA_ON_FIRE", TRIGGER_AREA)
Is any cell within <TRIGGER_AREA> on fire
Map_/Area on fire.

EvaluateCondition("PLAYER_ISSUED_FORMATION_ORDER")
Player has issued formation order
Player_/ Player has issued formation order

EvaluateCondition("OBJECTIVES_SCREEN_IS_OPEN")
The objectives screen is open.
Interface_/The objectives screen is open

EvaluateCondition("PLAYER_HAS_UNIT_TYPE_IN_TRIGGER_AREA_UNDER_ATTACK", PLAYER, OBJECT_TYPE, TRIGGER_AREA)
<PLAYER> unit or structure of type <OBJECT_TYPE> in the <TRIGGER_AREA>
Player_/ Player has unit type in an area under attack.

EvaluateCondition("CAMERA_SCROLL_DISTANCE", REAL)
Player has scrolled camera <REAL> units.
Camera_/ Camera scroll distance.

--CONDITIONS ONLY CNC3KW--
EvaluateCondition("BUILDING_GARRISONNED_BY_OBJECT_TYPE", UNIT, OBJECT_TYPE, PLAYER)
EvaluateCondition("BUILDING_IS_DEFAULT_PRODUCTION", UNIT)
EvaluateCondition("LOCAL_PLAYER_TARGETING_SPECIAL_POWER", SPECIAL_POWER)
EvaluateCondition("LOCAL_PLAYER_TARGETING_SPECIAL_POWER_FROM_OBJECT", SPECIAL_POWER, UNIT)
EvaluateCondition("METAGAME_DIALOG_STATE_CHANGE", METAGAME_DIALOG, METAGAME_DIALOG_STATE)
EvaluateCondition("MGOP_TRIGGERED_BY_NAMED", UNIT, METAGAME_OPERATION)
EvaluateCondition("MGOP_TRIGGERED_BY_NAMED_IN_AREA", UNIT, METAGAME_OPERATION, AREA)
EvaluateCondition("MGOP_TRIGGERED_BY_NAMED_ON_OBJECT", UNIT, METAGAME_OPERATION, UNIT)
EvaluateCondition("MGOP_TRIGGERED_BY_PLAYER", METAGAME_OPERATION)
EvaluateCondition("MGOP_TRIGGERED_BY_PLAYER_IN_AREA", METAGAME_OPERATION, AREA)
EvaluateCondition("MGOP_TRIGGERED_BY_PLAYER_ON_OBJECT", METAGAME_OPERATION, UNIT)
EvaluateCondition("PLAYER_HAS_NUMBER_OBJECTS_WITH_OBJECT_STATUS", PLAYER, OBJECT_STATUS, COMPARISON, INT)
EvaluateCondition("PLAYER_TRIGGERED_SCRIPT_EVENT", PLAYER, SCRIPT_EVENT)
EvaluateCondition("PLAYER_TRIGGERED_SPECIAL_POWER_IN_AREA", PLAYER, SPECIAL_POWER, AREA)
EvaluateCondition("TEAM_THREAT_LEVEL", TEAM, COMPARISON, REAL, REAL)
<TEAM> has <COMPARISON> thread level <REAL> within radius <REAL>
EvaluateCondition("TEST_CAMPAIGN_FLAG", CAMPAIGN_FLAG)
EvaluateCondition("TEST_METAGAME_KINDOF_IN_AOI_OF_KINDOF", KIND_OF, PLAYER, KIND_OF, PLAYER)
EvaluateCondition("TEST_METAGAME_KINDOF_IN_AOI_OF_UNIT", KIND_OF, PLAYER, UNIT, PLAYER)
EvaluateCondition("TEST_METAGAME_LOCAL_PLAYER_STRIKEFORCE_IN_BATTLE_WITH_UNIT", STRIKE_FORCE, UNIT)
EvaluateCondition("TEST_METAGAME_PLAYER_FLAGS", METAGAME_PLAYER_FLAG, PLAYER)
EvaluateCondition("TEST_METAGAME_TOWER_COUNT", PLAYER, INT)
EvaluateCondition("TEST_METAGAME_UNIT_IN_BATTLE_WITH_UNIT", UNIT, UNIT)
EvaluateCondition("UNIT_HAS_UPGRADE", UNIT, UPGRADE)
EvaluateCondition("UNIT_SPECIAL_POWER_READY", UNIT, SPECIAL_POWER)
EvaluateCondition("UNIT_TEST_OBJECT_PANEL_FLAGS", OBJECT_PANEL_FLAG, UNIT)
EvaluateCondition("UNIT_THREAT_LEVEL", UNIT, COMPARISON, REAL, REAL)
<UNIT> has <COMPARISON> thread level <REAL> within radius <REAL>

--CONDITIONS ONLY RA3, RA3U--
EvaluateCondition("GAME_TYPE_IS_COMMANDERS_CHALLENGE")

--CONDITIONS ONLY RA3, RA3U, CNC4--
EvaluateCondition("CURRENT_PLATFORM", PLATFORM_TYPE) 
Is game running on <PLATFORM_TYPE>.
EvaluateCondition("MISSION_HOT_SPOT_ACTIVE", STRING)
EvaluateCondition("NAMED_HAS_KILLED_COMPARISON_UNIT_TYPE", UNIT, COMPARISON, INT, OBJECT_TYPE)
EvaluateCondition("OBJECT_IS_DISGUISED_AS_TYPE", UNIT, OBJECT_TYPE)
EvaluateCondition("PLAYER_HAS_COMPARISON_POWER_POINTS", PLAYER, COMPARISON, INT)
EvaluateCondition("PLAYER_HAS_COMPARISON_UNIT_KIND", PLAYER, COMPARISON, INT, KIND_OF)
EvaluateCondition("PLAYER_HAS_COMPARISON_UNIT_TYPE_IN_TRIGGER_AREA_WITH_MODELCONDITION", PLAYER, COMPARISON, INT, AREA, MODEL_CONDITION)
EvaluateCondition("PLAYER_HAS_KILLED_NAMED_UNIT", PLAYER, UNIT)
EvaluateCondition("PLAYER_HAS_PLAYER_TECH", PLAYER, PLAYER_TECH_TYPE)
EvaluateCondition("PLAYER_IS_HUMAN_OR_AI_PERSONALITY", PLAYER, AI_PERSONALITY_TYPE)
EvaluateCondition("PLAYER_RED_ALERT_ACTIVATED", PLAYER)
EvaluateCondition("TEAM_COMPARE_NUM_MEMBERS", TEAM, COMPARISON, INT)
EvaluateCondition("UNIT_HAS_MODELCONDITION", UNIT, MODEL_CONDITION)

--CONDITIONS ONLY CNC4-
EvaluateCondition("CAMERA_IN_AREA_TRIGGER", AREA)
EvaluateCondition("IS_AUDIO_COMPLETE", SOUND)
EvaluateCondition("IS_CRYSTAL_CAPTURED", PLAYER)
EvaluateCondition("IS_ESC_OR_SPACE_PRESSED")
EvaluateCondition("IS_GAME_COOP")
EvaluateCondition("IS_MOVIE_COMPLETE", MOVIE)
EvaluateCondition("IS_OBJECT_OF_TYPE", UNIT, OBJECT_TYPE)
EvaluateCondition("IS_OBJECT_UNLOCKED_BY_PLAYER", OBJECT_TYPE, PLAYER)
EvaluateCondition("IS_TECHSTRUCTURE_DESTROYED", UNIT)
EvaluateCondition("IS_UNIT_TYPE_BUILDING", OBJECT_TYPE)
EvaluateCondition("OBJECT_SELECTED", UNIT)
EvaluateCondition("PLAYER_CLASS", PLAYER, PLAYER_CLASS_TYPE)
EvaluateCondition("PLAYER_DOCKED_STRUCTURE", PLAYER, COMPARISON, INT, UNIT)
EvaluateCondition("PLAYER_HAS_ANY_OBJECT_ENTITLEMENT", PLAYER, OBJECT_TYPE_LIST)
<PLAYER> is able to build any <OBJECT_TYPE_LIST>.
EvaluateCondition("PLAYER_HAS_COMPARISON_COMMAND_POINTS", PLAYER, COMPARISON, INT)
EvaluateCondition("PLAYER_HAS_COMPARISON_PERCENT_COMMAND_POINTS", PLAYER, COMPARISON, INT)
EvaluateCondition("PLAYER_HAS_NUMBER_TEAMS", PLAYER, COMPARISON, INT)
EvaluateCondition("PLAYER_HAS_NUMBER_TEAM_SLOTS_OPEN", PLAYER, COMPARISON, INT)
EvaluateCondition("PLAYER_HAS_OBJECT_ENTITLEMENT", PLAYER, OBJECT_TYPE)
<PLAYER> is able to build <OBJECT_TYPE>.
EvaluateCondition("PLAYER_REDEPLOYMENT_COUNT", PLAYER, COMPARISON, INT)
Player <PLAYER> number of respawns is <COMPARISON> to <INT>.
EvaluateCondition("SKIRMISH_LOGIC_COMMAND_READY_ALL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_UNIT)
EvaluateCondition("SKIRMISH_LOGIC_COMMAND_READY_PARTIAL", PLAYER, TEAM, COMMANDBUTTON_ABILITY_UNIT)
EvaluateCondition("UI_STATE_PROPOSITION_STATE", UI_STATE_PROPOSITION)

-----------------------------------------------------------
--PARAMETER TYPES FOR ExecuteAction and EvaluateCondition--
-----------------------------------------------------------

TEAM = {
"/team", --neutral team
"PlyrCivilian/teamPlyrCivilian",
"PlyrCreeps/teamPlyrCreeps",
"ReplayObserver/teamReplayObserver",
"Player_1/teamPlayer_1",
"Player_2/teamPlayer_2",
"Player_3/teamPlayer_3",
"Player_4/teamPlayer_4",
"Player_5/teamPlayer_5",
"Player_6/teamPlayer_6",
"Player_7/teamPlayer_7",
"Player_8/teamPlayer_8",
"Player_1/defaultSkirmishTeamPlayer_1",
"Player_2/defaultSkirmishTeamPlayer_2",
"Player_3/defaultSkirmishTeamPlayer_3",
"Player_4/defaultSkirmishTeamPlayer_4",
"Player_5/defaultSkirmishTeamPlayer_5",
"Player_6/defaultSkirmishTeamPlayer_6",
"Player_7/defaultSkirmishTeamPlayer_7",
"Player_8/defaultSkirmishTeamPlayer_8",
"SkirmishNeutral/teamSkirmishNeutral",
"SkirmishCivilian/teamSkirmishCivilian",
"SkirmishNull/teamSkirmishNull",
"TeamManager1/teamTeamManager1", --RA3 + C&C4
"TeamManager2/teamTeamManager2",  --RA3 + C&C4
"Player/teamPlayer"  --C&C4
}

PLAYER = { --ONLY WOKRING in scripts immediately on map start
"<All Players>",
"<Local Player>",
"<Local Player's Allies incl Self>",
"<Local Player's Allies>",
"<Local Player's Enemies>",
"<Local Player's Enemy>",
"<This Player>",
"<This Player's Allies incl Self>",
"<This Player's Allies>",
"<This Player's Enemies>",
"<This Player's Enemy>",
"Player_1",
"Player_2",
"Player_3",
"Player_4",
"Player_5",
"Player_6",
"Player_7",
"Player_8",
"SkirmishGDI",
"SkirmishAlien",
"SkirmishBlackHand",
"SkirmishMarkedOfKane",
"SkirmishNod",
"SkirmishObserver",
"SkirmishReaper17",
"SkirmishSteelTalons",
"SkirmishTraveler59",
"SkirmishZOCOM",
"PlyrCivilian",
"PlyrCreeps",
"SkirmishNeutral",
"SkirmishNull",
"PlyrNeutral",
"Skirmish",
"SkirmishCivilian",
"SkirmishCommentator"
} 

PLAYER = { --RA3 + C&C4
"<1st Human Player>",
"<1st Human Player's Allies incl Self>",
"<1st Human Player's Allies>",
"<1st Human Player's Enemies>",
"<All Human Players>", --CNC4
"<All Players>",
"<This Player>",
"<This Player's Allies incl Self>",
"<This Player's Allies>",
"<This Player's Enemies>",
"<This Player's Enemy>",
"Player",
"TeamManager1",
"TeamManager2"
}

COMPARISON    	  			= { LT=0, LE=1, EQ=2, GE=3, GT=4, NE=5, ["<"]=0, ["<="]=1, ["=="]=2, [">="]=3, [">"]=4, ["~="]=5 }

BOOLEAN   	  				= { ["false"]=0, ["true"]=1 }

RELATION	    	  		= { ["Enemy"]=0, ["Neutral"]= 1, ["Friend"]=2 }	

AI_MOOD      	      		= { ["Peaceful"]=0, ["Sleep"]=1, ["Passive"]=2, ["Normal"]=3, ["Alert"]=4, ["Agressive"]=5 }

SKIRMISH_APPROACH_PATH   	= { ["Center"]=0, ["Backdoor"]=1, ["Flank"]=2, ["Special"]=3 }

RADAR_EVENT		 	  		= { ["Information"]=0, ["Construction"]=1, ["Upgrade"]=2, ["UnderAttack"]=3, ["Infiltration"]=4, ["Banner"]=5 }	

MATH_OPERATOR     	  		= { ["Add"]=0, ["Subtract"]=1, ["Multiply"]=2, ["Divide"]=3 }	

NEAR_OR_FAR		   	  		= { ["near"]=0, ["far"]= 1 }	

SHAKE_INTENSITY       		= { ["SUBTLE"]=0, ["NORMAL"]=1, ["STRONG"]=2, ["SEVERE"]=3, ["CINE_EXTREME"]=4, ["CINE_INSANE"]=5 }	

STANCE_TYPE           		= { ["GUARD"]=0, ["AGGRESSIVE"]=1, ["HOLD_POSITION"]=2, ["HOLD_FIRE"]=3 }		

MAP_BOUNDARY        		= { "Orange", "Red", "Yellow", "Green", "Blue" }

AUDIO_REVERB_ROOM_TYPE		= { "Alley","Arena","Auditorium","Bathroom","Carpeted Hallway","Cave","City","Concert Hall","Dizzy","Drugged","Forest","Hallway","Hangar","Living Room","Mountains","Padded Cell","Parking Lot","Plain","Psychotic","Quarry","Room","Sewer Pipe","Stone Corridor","Stone Room","Underwater"}

MISSION_OBJECTIVE_STATUS	= { ["HIDDEN"]=0, ["ACTIVE"]=1, ["COMPLETED"]=2, ["FAILED"]=3 }

COLOR 						= { ["normal"]=0, ["blue"]=255,["red"]=1,["purple"]=50,["yellow"]=-256,["white"]=-1 }

GAMEMODE					= { "ringheroes" }  

NOTIFICATION_BOX_TYPE	 	= { "BonusObjectiveCompleted", "Generic", "HeroDeath", "HeroEarnedAward", "HeroGranted", "HeroInitialSpawn", "HeroRespawn", "Hint", "Instructional", "NewBonusObjective", "NewObjective", "ObjectiveCompleted", "ObjectiveReminder"}

AREA						= { "SiegeGameplayBarrier", "CombatZone", "InnerPerimeter1", "InnerPerimeter2", "InnerPerimeter3", "InnerPerimeter4", "InnerPerimeter5", "InnerPerimeter6", "InnerPerimeter7", "InnerPerimeter8", "OuterPerimeter1", "OuterPerimeter2", "OuterPerimeter3", "OuterPerimeter4", "OuterPerimeter5", "OuterPerimeter6", "OuterPerimeter7", "OuterPerimeter8", "Water Grid", "[Skirmish]EnemyInnerPerimeter", "[Skirmish]EnemyOuterPerimeter", "[Skirmish]MyInnerPerimeter", "[Skirmish]MyOuterPerimeter"}

WAYPOINT					= { "Player_1_Start","Player_2_Start","Player_3_Start","Player_4_Start","Player_5_Start","Player_6_Start","Player_7_Start","Player_8_Start","InitialCameraPosition","Waypoint 1","Waypoint 2","Waypoint 3","Waypoint 4","Waypoint 5","Waypoint 6","Waypoint 7", }

OBJECT_PANEL_FLAG			= { "AI Recruitable","Enabled","Indestructible","Player Targetable","Powered","Selectable","Unsellable" } 

SURFACE_TYPE	  	  		= { ["GROUND"]=0, ["WATER"]= 1, ["CLIFF"]=2, ["AIR"]=3, ["RUBBLE"]=4 ["OBSTACLE"]= 5, ["IMPASSABLE"]=6, ["DEEP_WATER"]= 7, ["WALL_RAILING"]= 8, ["CRUSHABLE_OBSTACLE"]= 9 }	

SCIENCE_AVAILABILITY		= { "Available", "Disabled", "Hidden" }  

PRODUCTION_QUEUE_TAB  		= { ["MAIN_STRUCTURE"]=0, ["OTHER_STRUCTURE"]=1, ["INFANTRY"]=2, ["VEHICLE"]=3, ["AIRCRAFT"]=4, ["UPGRADE"]=5 }

UI_SUDS_ELEMENT				= { "MINIMAP","RESOURCE_BAR","POWER_METER","PORTRAIT_UI","TAB_BAR","TAB_BUTTON_GROUPS","TAB_BUTTON_POWER","TAB_BUTTON_INFANTRY","TAB_BUTTON_VEHICLE","TAB_BUTTON_AIRCRAFT","TAB_BUTTON_STRUCTURE","TAB_BUTTON_SUPPORT","UNITCAP"}

UI_FIXED_ELEMENT			= { "INVALID","ENERGY_METER","SELL_BUTTON","TOGGLE_REPAIR_BUTTON","TOGGLE_POWER_BUTTON","ATTACK_MOVE_BUTTON","FORCE_ATTACK_BUTTON","FORCE_MOVE_BUTTON","REVERSE_MOVE_BUTTON","WAYPOINT_MODE_BUTTON","PLANNING_MODE_BUTTON","STANCE_AGGRESSIVE_BUTTON","STANCE_GUARD_BUTTON","STANCE_HOLD_GROUND_BUTTON","STANCE_HOLD_FIRE_BUTTON","MAIN_STRUCTURE_TAB","OTHER_STRUCTURE_TAB","INFANTRY_TAB","VEHICLE_TAB","AIRCRAFT_TAB","DEBUG_A_BUTTON","DEBUG_B_BUTTON","DEBUG_C_BUTTON","DEBUG_D_BUTTON"}

BUILDABILITY_TYPE     		= { ["YES"]=0, ["IGNORE_PREREQUISITES"]=1, ["NO"]=2, ["ONLY_BY_AI"]=3 }	

VALID_SOURCE	       		= { ["first_valid_source"]=0, ["all_valid_source"]=1 }

CAMPAIGN_FLAG_CNC3KW	    = { ["MM_General_Activate"]=96,["MM_General_PreTacticalCheck"]=97,["MM_General_PostTacticalCheck"]=98,["MM_MetagameActive"]=99}

EMOTICON 					= { ["EMOTION_UNCONTROLLABLY_AFRAID"]=0, ["EMOTION_TAUNTING"]=1, ["EMOTION_QUARRELSOME"]=2, ["EMOTION_POINTING"]=3, ["EMOTION_PANIC"]=4, ["EMOTION_MORALE_LOW"]=5, ["EMOTION_MORALE_HIGH"]=6, ["EMOTION_LOOK_TO_SKY"]=7, ["EMOTION_GUNG_HO"]=8, ["EMOTION_DOOM"]=9, ["EMOTION_DISSIDENT"]=10, ["EMOTION_COWER"]=11, ["EMOTION_CHEER_FOR_ABOUT_TO_CRUSH"]=12, ["EMOTION_CELEBRATING"]=13, ["EMOTION_BRACE_FOR_BEING_CRUSHED"]=14, ["EMOTION_AMUSED"]=15, ["EMOTION_ALERT"]=16, ["EMOTION_AFRAID"]=17 }                                           

EMOTION  					= { ["TAUNT"]=0, ["CHEER"]=1, ["HERO_CHEER"]=2, ["POINT"]=3, ["FEAR"]=4, ["UNCONTROLLABLE_FEAR"]=5, ["TERROR"]=6, ["DOOM"]=7, ["QUARRELSOME"]=8, ["BRACE_FOR_BEING_CRUSHED"]=9, ["ALERT"]=10, ["CHEER_FOR_ABOUT_TO_CRUSH"]=11 }

FACTION_CNC3KW       	  	= { ["CCA0AB62"]="GDI", ["38EA5BC0"]="SteelTalons", ["8E3D36F8"]="ZOCOM", ["ED46C05A"]="Nod",  ["5D10A932"]="BlackHand", ["FB53CCFD"]="MarkedOfKane", ["5B7BAA66"]="Scrin", ["30883A9F"]="Reaper-17", ["92CC2C04"]="Traveler-59", ["C884591E"]="MetaTechCorporation" }

PLAYER_CLASS_TYPE 			= { ["HEAVY"]=0, ["SUPPORT"]=1, ["DEFENSIVE"]=2 }

PLATFORM_TYPE 				= { "360", "PC", "PS3" } 

PLAYER_TECH_TYPE 			= { "PlayerTech_Redeployment" }

AI_PERSONALITY_TYPE			= { "Human" }

SPECIAL_POWER_AVAILABILITY 	= { "Available", "Disabled", "ForcedAvailable", "Hidden" }

SCRIPT_EVENT 				= { ["ATTACK_MOVE_ISSUED"]=0, ["WAYPOINT_MODE_ENTERED"]=1, ["CONTROL_GROUP_CREATED"]=2 }

INTELLIGENCE_DATABASE_CATEGORY = { ["008_Nod_Field_Recon-0101_TibResearchA"]=0, ["..."]=1, ["..."]=2 }

UI_SUDS_ELEMENT_STATUS 		= { "ENABLED", "FLASH" }

METAGAME_BATTLE_RESOLUTION 	= { ["Autoresolve"]=0, ["Real-Time"]=1, ["Disengage"]=2 }

METAGAME_PLAYER_FLAG 		= { ["Traitor"]=0, ["EliminatedEarly"]=1, ["Ion_Superstorm"]=2 }

METAGAME_OPERATION 			= { ["INVALID"]=0, ["CONSTRUCT_NEW_TIER_1_BASE"]=1, ["..."]=2 }

METAGAME_DIALOG 			= { ["BUILD_STRIKEFORCE"]=0, ["BUILD_STRATEGIC_BUILDING"]=1, ["BATTLE_RESOLUTION"]=2, ["BATTLE_RESULTS"]=3 }

METAGAME_DIALOG_STATE 		= { ["INVALID"]=0, ["OPENED"]=1, ["CANCELED"]=2, ["CONFIRMED"]=3 }

ENEMY_SORTING_METHOD 		= { "Flat", "NearestFirst_AllowTies", "NearestFirst_BreakTies", "StrongestFirst_AllowTies", "StrongestFirst_BreakTies" }

DISABLED_TYPE  				= { "DEFAULT", "EMP", "FREEFALL", "FROZEN", "HELD", "HUB_DISCONNECTED", "INFILTRATED", "PARALYZED", "PRODUCTION_IN_PROGRESS", "SCRIPT_DISABLED", "SCRIPT_UNDERPOWERED", "STASIS_FIELD", "TEMPORARILY_BUSY", "UNDERPOWERED", "UNMANNED", "USER_PARALYZED" }

BEACON_TYPE 				= { "Assault", "HoldObject", "HoldPosition" }

PC_HUD_FIXED_ELEMENT 		= { ["Radar"]=0, ["MainStructuresTab"]=1, ...}

CONSOLE_HUD_FIXED_ELEMENT 	= { }

FACTION_CNC4 				= { ["Null"]=0, ["Observer"]=1, ["Alien"]=2, ["Commentator"]=3, ["Neutral"]=4, ["Civilian"]=5, ["Random"]=6, ["Manager"]=7, ["GDI"]=8, ["NOD"]=9 }

PATH_MUSIC_DYNAMIC_STATE_SET = { "PM_CombatOnly_NoLeadIn", "PM_CombatOnly_WithFirstFight_NoLeadIn", "PM_SmallCombatOnly_NoLeadIn", "PM_SmallCombatOnly_WithFirstFight_NoLeadIn", "PM_Standard_Full", "PM_Standard_Observer" }

PATH_MUSIC_EVENT 			= { "S_EndMissionLose", "S_EndMissionWin", "S_GDI1_1Action", "S_GDI1_1Ambush", "S_GDI1_1Finale", "S_GDI1_1Intro", ...}

PLAYER_TECH 				= { "PlayerTech_Redeployment" }

AUDIOMIXER_DYNAMIC_STATE_SET = { "AM_Standard_Full" }

AUDIOMIXER_SNAPSHOT_SET 	= { "AlienTowerBlast", "Combat", "Default", "Explore", "MusicOnly", "Shell" }

EVACUATE_CONTAINER_SIDE_CHOICE = { ["Left"]=0, ["Right"]=1, ["Center (Default)"]=2 } --C&CZH

KINDOF_CNC3KW = {
["OBSTACLE"]=0,["SELECTABLE"]=1,["TARGETABLE"]=2,["ALLY_TARGETABLE"]=3,["IMMOBILE"]=4,["CAN_ATTACK"]=5,["STICK_TO_TERRAIN_SLOPE"]=6,["CAN_CAST_REFLECTIONS"]=7,["SHRUBBERY"]=8,["STRUCTURE"]=9,["INFANTRY"]=10,["CAVALRY"]=11,["MONSTER"]=12,["MACHINE"]=13,["AIRCRAFT"]=14,["HUGE_VEHICLE"]=15,["DOZER"]=16,["SWARM_DOZER"]=17,["HARVESTER"]=18,["COMMANDCENTER"]=19,["CASTLE_CENTER"]=20,["SALVAGER"]=21,["WEAPON_SALVAGER"]=22,["TRANSPORT"]=23,["BRIDGE"]=24,["CANT_TOGGLE_POWER"]=25,["SIEGE_WEAPON"]=26,
["PROJECTILE"]=27,["PRELOAD"]=28,["NO_GARRISON"]=29,["CASTLE_KEEP"]=30,["SHADOW_ULTRA_HIGH_ONLY"]=31,["NO_COLLIDE"]=32,["REPAIR_PAD"]=33,["HEAL_PAD"]=34,["STEALTH_GARRISON"]=35,["SUPPLY_GATHERING_CENTER"]=36,["AIRFIELD"]=37,["DRAWABLE_ONLY"]=38,["MP_COUNT_FOR_VICTORY"]=39,["REBUILD_HOLE"]=40,["SCORE"]=41,["SCORE_CREATE"]=42,["SCORE_DESTROY"]=43,["NO_HEAL_ICON"]=44,["CAN_RAPPEL"]=45,["PARACHUTABLE"]=46,["CAN_BE_REPULSED"]=47,["MOB_NEXUS"]=48,["IGNORED_IN_GUI"]=49,["CRATE"]=50,["CAPTURABLE"]=51,
["LINKED_TO_FLAG"]=52,["CLEARED_BY_BUILD"]=53,["SMALL_MISSILE"]=54,["ALWAYS_VISIBLE"]=55,["UNATTACKABLE"]=56,["MINE"]=57,["CAN_PLACE_CHARGE"]=58,["PORTABLE_STRUCTURE"]=59,["ALWAYS_SELECTABLE"]=60,["ATTACK_NEEDS_LINE_OF_SIGHT"]=61,["WALK_ON_TOP_OF_WALL"]=62,["DEFENSIVE_WALL"]=63,["FS_POWER"]=64,["FS_FACTORY"]=65,["FS_BASE_DEFENSE"]=66,["FS_TECHNOLOGY"]=67,["AIRCRAFT_PATH_AROUND"]=68,["LOW_OVERLAPPABLE"]=69,["FORCEATTACKABLE"]=70,["AUTO_RALLYPOINT"]=71,["CAN_CAPTURE"]=72,["POWERED"]=73,
["PRODUCED_AT_HELIPAD"]=74,["DRONE"]=75,["CAN_SEE_THROUGH_STRUCTURE"]=76,["BALLISTIC_MISSILE"]=77,["CLICK_THROUGH"]=78,["SUPPLY_SOURCE_ON_PREVIEW"]=79,["PARACHUTE"]=80,["GARRISONABLE_UNTIL_DESTROYED"]=81,["BOAT"]=82,["IMMUNE_TO_CAPTURE"]=83,["HULK"]=84,["CAN_PLACE_MANIPULATOR"]=85,["SPAWNS_ARE_THE_WEAPONS"]=86,["CANNOT_BUILD_NEAR_SUPPLIES"]=87,["SUPPLY_SOURCE"]=88,["REVEAL_TO_ALL"]=89,["DISGUISER"]=90,["INERT"]=91,["HERO"]=92,["IGNORES_SELECT_ALL"]=93,["DONT_AUTO_CRUSH_INFANTRY"]=94,["SIEGE_TOWER"]=95,
["TREE"]=96,["SHRUB"]=97,["CLUB"]=98,["ROCK"]=99,["THROWN_OBJECT"]=100,["GRAB_AND_KILL"]=101,["OPTIMIZED_PROP"]=102,["ENVIRONMENT"]=103,["DEFLECT_BY_SPECIAL_POWER"]=104,["WORKING_PASSENGER"]=105,["BASE_FOUNDATION"]=106,["NEED_BASE_FOUNDATION"]=107,["REACT_WHEN_SELECTED"]=108,["CAN_BE_CAPTURED"]=109,["IGNORED_IN_FINDPOSITIONAROUND"]=110,["HORDE"]=111,["COMBO_HORDE"]=112,["NONOCCLUDING"]=113,["NO_FREEWILL_ENTER"]=114,["TIBERIUM_FIELD"]=115,["BEAM_TARGET"]=116,["BEAM_TARGET_REFLECTOR"]=117,
["TACTICAL_MARKER"]=118,["PATH_THROUGH_EACH_OTHER"]=119,["NOTIFY_OF_PREATTACK"]=120,["GARRISON"]=121,["MELEE_HORDE"]=122,["BASE_SITE"]=123,["INERT_SHROUD_REVEALER"]=124,["OCL_BIT"]=125,["SPELL_BOOK"]=126,["DEPRECATED"]=127,["PATH_THROUGH_INFANTRY"]=128,["NO_FORMATION_MOVEMENT"]=129,["NO_BASE_CAPTURE"]=130,["ARMY_SUMMARY"]=131,["CIVILIAN_UNIT"]=132,["NOT_AUTOACQUIRABLE"]=133,["KEEP_CLASSIFIED_WHEN_DEAD"]=134,["CHUNK_VENDOR"]=135,["ARCHER"]=136,["MOVE_ONLY"]=137,["FS_CASH_PRODUCER"]=138,
["ROCK_VENDOR"]=139,["BLOCKING_GATE"]=140,["CRANE"]=141,["SIEGE_LADDER"]=142,["MINE_TRIGGER"]=143,["BUFF"]=144,["GRAB_AND_DROP"]=145,["PORTER"]=146,["SCARY"]=147,["CRITTER_EMITTER"]=148,["BROADCASTS_INVISIBILITY"]=149,["CAN_ATTACK_WALLS"]=150,["IGNORE_FOR_VICTORY"]=151,["DO_NOT_CLASSIFY"]=152,["WALL_UPGRADE"]=153,["ARMY_OF_DEAD"]=154,["TAINT"]=155,["BASE_DEFENSE_FOUNDATION"]=156,["NOT_SELLABLE"]=157,["WEBBED"]=158,["WALL_HUB"]=159,["BUILD_FOR_FREE"]=160,["IGNORE_FOR_EVA_SPEECH_POSITION"]=161,
["MADE_OF_WOOD"]=162,["MADE_OF_METAL"]=163,["MADE_OF_STONE"]=164,["MADE_OF_DIRT"]=165,["FACE_AWAY_FROM_CASTLE_KEEP"]=166,["BANNER"]=167,["META_HORDE"]=168,["CAN_REVERSE_MOVE"]=169,["PASS_EXPERIENCE_TO_SLAVER"]=170,["HAS_HEALTH_BAR"]=171,["BIG_MONSTER"]=172,["DEPLOYED_MINE"]=173,["CANNOT_RETALIATE"]=174,["CREEP"]=175,["TAINTEFFECT"]=176,["POWERED_POWERS_ONLY"]=177,["VITAL_FOR_BASE_SURVIVAL"]=178,["DO_NOT_PICK_ME_WHEN_BUILDING"]=179,["SUMMONED"]=180,["HIDE_IF_FOGGED"]=181,["ALWAYS_SHOW_HOUSE_COLOR"]=182,
["MOVE_FOR_NOONE"]=183,["WB_DISPLAY_SCRIPT_NAME"]=184,["CAN_CLIMB_WALLS"]=185,["NO_SHADOW"]=186,["LARGE_RECTANGLE_PATHFIND"]=187,["SUBMARINE"]=188,["PORT"]=189,["WALL_SEGMENT"]=190,["SIMPLE_OBJECT_PROP"]=191,["SHIP"]=192,["OPTIMIZED_SOUND"]=193,["PASS_EXPERIENCE_TO_CONTAINED"]=194,["DOZER_FACTORY"]=195,["THREAT_FINDER"]=196,["ECONOMY_STRUCTURE"]=197,["LIVING_WORLD_BUILDING_MIRROR"]=198,["CAN_TOPPLE"]=199,["NONCOM"]=200,["CAN_SKIP_SHADOW"]=201,["SCALEABLE_WALL"]=202,["SKYBOX"]=203,["WALL_GATE"]=204,
["CAPTUREFLAG"]=205,["NEUTRALGOLLUM"]=206,["PASS_EXPERIENCE_TO_CONTAINER"]=207,["RESIST_EMP"]=208,["ORIENTS_TO_CAMERA"]=209,["NEVER_CULL_FOR_MP"]=210,["DONT_USE_CANCEL_BUILD_BUTTON"]=211,["CIVILIAN_BUILDING"]=212,["HEAVY_MELEE_HITTER"]=213,["DONT_HIDE_IF_FOGGED"]=214,["VEHICLE"]=215,["HARVESTABLE"]=216,["GRABBABLE"]=217,["CONSTRUCTION_YARD"]=218,["CAN_SHOOT_OVER_WALLS"]=219,["PASS_EXPERIENCE_TO_PRODUCER"]=220,["EXPANSION_PAD"]=221,["AMPHIBIOUS"]=222,["SHOW_BEHIND_OCCLUDERS"]=223,["FS_MONEY_STORAGE"]=224,
["VALID_TARGET_FOR_C4"]=225,["UNIQUE_UNIT"]=226,["SURPRISE_ATTACKER"]=227,["COVER"]=228,["INFILTRATOR"]=229,["BRIDGE_SEGMENT"]=230,["FS_WAR_FACTORY"]=231,["FS_BARRACKS"]=232,["FS_RADAR"]=233,["FS_AIR_FIELD"]=234,["FS_TECH_CENTER"]=235,["TIBERIUM_BASED"]=236,["TIBERIUM"]=237,["CAN_ATTACK_STEALTHED"]=238,["IMMUNE_TO_CYCLONIC_SHOCKWAVE"]=239,["CANNOT_BE_DETECTED"]=240,["AUTO_ACQUIRABLE_BY_AI"]=241,["CRUSHABLE_OBSTACLE"]=242,["NEUTRAL_TECH"]=243,["SUPER_WEAPON"]=244,["HEALED_BY_TIBERIUM"]=245,
["IGNORE_CAN_NOT_BUILD"]=246,["SKIRMISH_AI_DONT_GARRISON"]=247,["ASSAULT_AIRCRAFT"]=248,["BOMBER_AIRCRAFT"]=249,["ANTI_GARRISON"]=250,["ENGINEER"]=251,["EXPANSION_UNIT"]=252,["OUTPOST"]=253,["BEACON"]=254,["HUSK"]=255,["IGNORE_FORCE_MOVE"]=256,["LINE_OF_SIGHT_IGNORES_BUILDINGS"]=257,["MOTHERSHIP"]=258,["SNIPER"]=259,["ATTACK_FROM_STRUCTURE_ONLY_WHEN_GARRISONED"]=260,["SKIP_DEFECT_IF_UNCOMBINED"]=261,["SKIP_IDLE_WHEN_CAPTURED"]=262,["BRIDGE_ENDCAP"]=263,["BRIDGE_GATEHOUSE"]=264,["CAN_BE_FAVORITE_UNIT"]=265,
["SLAVE_OWNER"]=266,["MCV"]=267,["CAN_HEAL_ALLIES"]=268,["METAUNIT"]=269,["META_BASE"]=270,["META_CITY"]=271,["META_STRIKEFORCE"]=272,["META_TIBERIUM_NODE"]=273,["META_ICMUMO"]=274,["META_ALIEN_TOWER"]=275,["PROJECT_BUILDABILITY_FOR_ALLIES"]=276,["AA_STRUCT"]=277,["NOD_SUPER_STRUCTURE"]=278,["RELOAD_AIRCRAFT"]=279,["USE_STRICT_PATHING"]=280,["CAN_FIRE_EVEN_IF_CONTAINED_ARE_NOT_IN_RANGE"]=281,["AI_BUZZERS_CANT_ATTACH_TO_ME"]=282
}

KINDOF_BFMEIIROTWK = {
["OBSTACLE"]=0, ["SELECTABLE"]=1, ["IMMOBILE"]=2, ["CAN_ATTACK"]=3, ["STICK_TO_TERRAIN_SLOPE"]=4, ["CAN_CAST_REFLECTIONS"]=5, ["SHRUBBERY"]=6, ["STRUCTURE"]=7, ["INFANTRY"]=8, ["CAVALRY"]=9, ["MONSTER"]=10, ["MACHINE"]=11, ["AIRCRAFT"]=12, ["HUGE_VEHICLE"]=13, ["DOZER"]=14, ["SWARM_DOZER"]=15, ["HARVESTER"]=16, ["COMMANDCENTER"]=17, 
["CASTLE_CENTER"]=18, ["SALVAGER"]=19, ["WEAPON_SALVAGER"]=20, ["TRANSPORT"]=21, ["BRIDGE"]=22, ["LANDMARK_BRIDGE"]=23, ["BRIDGE_TOWER"]=24, ["PROJECTILE"]=25, ["PRELOAD"]=26, ["NO_GARRISON"]=27, ["CASTLE_KEEP"]=28, ["WAVE_EFFECT"]=29, ["NO_COLLIDE"]=30, ["REPAIR_PAD"]=31, ["HEAL_PAD"]=32, ["STEALTH_GARRISON"]=33, ["SUPPLY_GATHERING_CENTER"]=34, ["AIRFIELD"]=35, 
["DRAWABLE_ONLY"]=36, ["MP_COUNT_FOR_VICTORY"]=37, ["REBUILD_HOLE"]=38, ["SCORE"]=39, ["SCORE_CREATE"]=40, ["SCORE_DESTROY"]=41, ["NO_HEAL_ICON"]=42, ["CAN_RAPPEL"]=43, ["PARACHUTABLE"]=44, ["CAN_BE_REPULSED"]=45, ["MOB_NEXUS"]=46, ["IGNORED_IN_GUI"]=47, ["CRATE"]=48, ["CAPTURABLE"]=49, ["LINKED_TO_FLAG"]=50, ["CLEARED_BY_BUILD"]=51, ["SMALL_MISSILE"]=52, ["ALWAYS_VISIBLE"]=53, 
["UNATTACKABLE"]=54, ["MINE"]=55, ["CLEANUP_HAZARD"]=56, ["PORTABLE_STRUCTURE"]=57, ["ALWAYS_SELECTABLE"]=58, ["ATTACK_NEEDS_LINE_OF_SIGHT"]=59, ["WALK_ON_TOP_OF_WALL"]=60, ["DEFENSIVE_WALL"]=61, ["FS_POWER"]=62, ["FS_FACTORY"]=63, ["FS_BASE_DEFENSE"]=64, ["FS_TECHNOLOGY"]=65, ["AIRCRAFT_PATH_AROUND"]=66, ["LOW_OVERLAPPABLE"]=67, ["FORCEATTACKABLE"]=68, ["AUTO_RALLYPOINT"]=69, ["OATHBREAKER"]=70, ["POWERED"]=71, 
["PRODUCED_AT_HELIPAD"]=72, ["DRONE"]=73, ["CAN_SEE_THROUGH_STRUCTURE"]=74, ["BALLISTIC_MISSILE"]=75, ["CLICK_THROUGH"]=76, ["SUPPLY_SOURCE_ON_PREVIEW"]=77, ["PARACHUTE"]=78, ["GARRISONABLE_UNTIL_DESTROYED"]=79, ["BOAT"]=80, ["IMMUNE_TO_CAPTURE"]=81, ["HULK"]=82, ["SHOW_PORTRAIT_WHEN_CONTROLLED"]=83, ["SPAWNS_ARE_THE_WEAPONS"]=84, ["CANNOT_BUILD_NEAR_SUPPLIES"]=85, ["SUPPLY_SOURCE"]=86, ["REVEAL_TO_ALL"]=87, ["DISGUISER"]=88, ["INERT"]=89, 
["HERO"]=90, ["IGNORES_SELECT_ALL"]=91, ["DONT_AUTO_CRUSH_INFANTRY"]=92, ["SIEGE_TOWER"]=93, ["TREE"]=94, ["SHRUB"]=95, ["CLUB"]=96, ["ROCK"]=97, ["THROWN_OBJECT"]=98, ["GRAB_AND_KILL"]=99, ["OPTIMIZED_PROP"]=100, ["ENVIRONMENT"]=101, ["DEFLECT_BY_SPECIAL_POWER"]=102, ["WORKING_PASSENGER"]=103, ["BASE_FOUNDATION"]=104, ["NEED_BASE_FOUNDATION"]=105, ["REACT_WHEN_SELECTED"]=106, ["GIMLI"]=107, 
["ORC"]=108, ["HORDE"]=109, ["COMBO_HORDE"]=110, ["NONOCCLUDING"]=111, ["NO_FREEWILL_ENTER"]=112, ["CAN_USE_SIEGE_TOWER"]=113, ["CAN_RIDE_SIEGE_LADDER"]=114, ["TACTICAL_MARKER"]=115, ["PATH_THROUGH_EACH_OTHER"]=116, ["NOTIFY_OF_PREATTACK"]=117, ["GARRISON"]=118, ["MELEE_HORDE"]=119, ["BASE_SITE"]=120, ["INERT_SHROUD_REVEALER"]=121, ["OCL_BIT"]=122, ["SPELL_BOOK"]=123, ["DEPRECATED"]=124, ["PATH_THROUGH_INFANTRY"]=125, 
["NO_FORMATION_MOVEMENT"]=126, ["NO_BASE_CAPTURE"]=127, ["ARMY_SUMMARY"]=128, ["HOBBIT"]=129, ["NOT_AUTOACQUIRABLE"]=130, ["URUK"]=131, ["CHUNK_VENDOR"]=132, ["ARCHER"]=133, ["MOVE_ONLY"]=134, ["FS_CASH_PRODUCER"]=135, ["ROCK_VENDOR"]=136, ["BLOCKING_GATE"]=137, ["CAN_RIDE_BATTERING_RAM"]=138, ["SIEGE_LADDER"]=139, ["MINE_TRIGGER"]=140, ["BUFF"]=141, ["GRAB_AND_DROP"]=142, ["PORTER"]=143, 
["SCARY"]=144, ["CRITTER_EMITTER"]=145, ["SALT_LICK"]=146, ["CAN_ATTACK_WALLS"]=147, ["IGNORE_FOR_VICTORY"]=148, ["DO_NOT_CLASSIFY"]=149, ["WALL_UPGRADE"]=150, ["ARMY_OF_DEAD"]=151, ["TAINT"]=152, ["BASE_DEFENSE_FOUNDATION"]=153, ["NOT_SELLABLE"]=154, ["WEBBED"]=155, ["WALL_HUB"]=156, ["BUILD_FOR_FREE"]=157, ["IGNORE_FOR_EVA_SPEECH_POSITION"]=158, ["MADE_OF_WOOD"]=159, ["MADE_OF_METAL"]=160, ["MADE_OF_STONE"]=161, 
["MADE_OF_DIRT"]=162, ["FACE_AWAY_FROM_CASTLE_KEEP"]=163, ["BANNER"]=164, ["I_WANT_TO_EAT_YOU"]=165, ["INDUSTRY_AFFECTED"]=166, ["DWARVENRICHES_AFFECTED"]=167, ["GANDALF"]=168, ["ARAGORN"]=169, ["HAS_HEALTH_BAR"]=170, ["BIG_MONSTER"]=171, ["DEPLOYED_MINE"]=172, ["CANNOT_RETALIATE"]=173, ["CREEP"]=174, ["TAINTEFFECT"]=175, ["TROLL_BUFF_NUGGET"]=176, ["VITAL_FOR_BASE_SURVIVAL"]=177, ["DO_NOT_PICK_ME_WHEN_BUILDING"]=178, ["SUMMONED"]=179, 
["HIDE_IF_FOGGED"]=180, ["ALWAYS_SHOW_HOUSE_COLOR"]=181, ["MOVE_FOR_NOONE"]=182, ["WB_DISPLAY_SCRIPT_NAME"]=183, ["CAN_CLIMB_WALLS"]=184, ["MUMAKIL_BUFF_NUGGET"]=185, ["LARGE_RECTANGLE_PATHFIND"]=186, ["SUBMARINE"]=187, ["PORT"]=188, ["WALL_SEGMENT"]=189, ["CREATE_A_HERO"]=190, ["SHIP"]=191, ["OPTIMIZED_SOUND"]=192, ["PASS_EXPERIENCE_TO_CONTAINED"]=193, ["DOZER_FACTORY"]=194, ["THREAT_FINDER"]=195, ["ECONOMY_STRUCTURE"]=196, ["LIVING_WORLD_BUILDING_MIRROR"]=197, 
["PIKE"]=198, ["NONCOM"]=199, ["OBSOLETE"]=200, ["SCALEABLE_WALL"]=201, ["SKYBOX"]=202, ["WALL_GATE"]=203, ["CAPTUREFLAG"]=204, ["NEUTRALGOLLUM"]=205, ["PASS_EXPERIENCE_TO_CONTAINER"]=206, ["GIANT_BIRD"]=207, ["ORIENTS_TO_CAMERA"]=208, ["NEVER_CULL_FOR_MP"]=209, ["DONT_USE_CANCEL_BUILD_BUTTON"]=210, ["ONE_RING"]=211, ["HEAVY_MELEE_HITTER"]=212, ["DONT_HIDE_IF_FOGGED"]=213, ["CAN_SHOOT_OVER_WALLS"]=214, ["PASS_EXPERIENCE_TO_PRODUCER"]=215, 
["EXPANSION_PAD"]=216, ["AMPHIBIOUS"]=217, ["SUPPORT"]=218, ["TROLL"]=219, ["SIEGEENGINE"]=220, ["HORDE_MONSTER"]=221 
}

OBJECT_STATUS_CNC3KW = {
["DESTROYED"]=0,["CAN_ATTACK"]=1,["UNDER_CONSTRUCTION"]=2,["UNSELECTABLE"]=3,["NO_COLLISIONS"]=4,["NO_ATTACK"]=5,["AIRBORNE_TARGET"]=6,["PARACHUTING"]=7,["REPULSOR"]=8,["DECOY"]=9,["AFLAME"]=10,["BURNED"]=11,["CANNOT_BE_SOLD"]=12,["IS_FIRING_WEAPON"]=13,["IS_BRAKING"]=14,["STEALTHED"]=15,["HIDDEN"]=16,["DETECTED"]=17,["CAN_STEALTH"]=18,["SOLD"]=19,["UNDERGOING_REPAIR"]=20,["RECONSTRUCTING"]=21,["IS_ATTACKING"]=22,["NO_AUTO_ACQUIRE"]=23,
["USING_ABILITY"]=24,["IS_AIMING_WEAPON"]=25,["NO_ATTACK_FROM_AI"]=26,["IGNORING_STEALTH"]=27,["IS_MELEE_ATTACKING"]=28,["GUARD_SELECTION"]=29,["LEASHED_RETURNING"]=30,["DEATH_1"]=31,["DEATH_2"]=32,["DEATH_3"]=33,["DEATH_4"]=34,["DEATH_5"]=35,["CONTESTED"]=36,["CONTESTING_BUILDING"]=37,["HORDE_MEMBER"]=38,["RIDERLESS"]=39,["RIDER_IS_PILOT"]=40,["RIDER1"]=41,["RIDER2"]=42,["RIDER3"]=43,["RIDER4"]=44,["NO_SHADOW"]=45,["IN_STASIS"]=46,
["OUT_OF_PHASE"]=47,["NEXT_MOVE_IS_REVERSE"]=48,["IMMOBILE"]=49,["FLEE_OFF_MAP"]=50,["NOT_IN_WORLD"]=51,["INAUDIBLE"]=52,["CHANTING"]=53,["ENRAGED"]=54,["CREATE_DRAWABLE_WITH_LOW_DETAIL"]=55,["SINKING"]=56,["RAMPAGING"]=57,["INSIDE_GARRISON"]=58,["DEPLOYED"]=59,["UNATTACKABLE"]=60,["ENCLOSED"]=61,["TEMPORARILY_DEFECTED"]=62,["TAGGED"]=63,["DEPLOYING"]=64,["PRIMARY_MEMBER_PRESENT"]=65,["PORTER_TAGGED"]=66,["GRAB_AND_DROP"]=67,["STAND_GROUND"]=68,
["UNCONTROLLABLY_SCARED"]=69,["SPECIAL_ABILITY_PACKING_UNPACKING_OR_USING"]=70,["TIBERIUM_VIBRATING"]=71,["UPDATING_AI"]=72,["CLONED"]=73,["IGNORE_AI_COMMAND"]=74,["RUNNING_DOWN_FROM_BEHIND"]=75,["DO_NOT_SCORE"]=76,["CAN_NOT_WALK_ON"]=77,["MARCH_OF_DEATH"]=78,["DO_NOT_PICK_ME"]=79,["INHERITED_FROM_ALLY_TEAM"]=80,["SWITCHED_WEAPONS"]=81,["END_FIRE_STATE"]=82,["BOOKENDING"]=83,["ELVISH_EXPRESSLY"]=84,["INSIDE_CASTLE"]=85,["BUILD_BEING_CANCELED"]=86,
["PENDING_CONSTRUCTION"]=87,["PHANTOM_STRUCTURE"]=88,["IN_FORMATION_TEMPLATE"]=89,["IS_LEAVING_FACTORY"]=90,["MOVING_TO_DISMOUNT"]=91,["NO_HERO_PROPERTIES"]=92,["CAN_ENTER_ANYTHING"]=93,["HOLDING_THE_RING"]=94,["INVISIBLE_DETECTED_BY_FRIEND"]=95,["INVISIBLE_DETECTED"]=96,["WORKER_REPAIRING"]=97,["ATTACHED"]=98,["WONT_RIDE_WITH_YOU"]=99,["COMMAND_BUTTON_TOGGLED"]=100,["OCLMONITOR_COMPLETED_TASK"]=101,["OCLMONITOR_MONITOR_RELEASED"]=102,
["USER_POWERED_DOWN"]=103,["GARRISONED"]=104,["BOOBY_TRAPPED"]=105,["IS_HIDEOUT"]=106,["SUICIDE_BOMBER_HAS_TARGET"]=107,["UNIT_WANTS_TO_REGARRISON"]=108,["IN_COVER"]=109,["DONT_CLEAR_FOR_BUILD"]=110,["MATCH_TARGETS_SPEED"]=111,["HAS_TIBERIUM_GROWTH_MOD"]=112,["HAS_TIBERIUM_UPGRADE"]=113,["STEAL_NEXT_UNIT_TRAPPED"]=114,["DOES_CONTAIN_TIBERIUM"]=115,["IS_BEING_HARVESTED"]=116,["HAS_TIBERIUM_AMMO"]=117,["SHIELDBODY_ENABLED"]=118,["HEALTH_PERCENT_0"]=119,
["HEALTH_PERCENT_25"]=120,["HEALTH_PERCENT_50"]=121,["HEALTH_PERCENT_75"]=122,["HEALTH_PERCENT_100"]=123,["WEAPON_UPGRADED_01"]=124,["WEAPON_UPGRADED_02"]=125,["WEAPON_UPGRADED_03"]=126,["COMBINED_PARENT"]=127,["COMBINED_CHILD"]=128,["COMBINED_ATTACHED"]=129,["LOADED_FROM_MAP"]=130,["ATTACKING_GARRISONED_STRUCTURE"]=131,["EXITING_COMBINED"]=132,["DELAYED_ENTER_STRUCTURE"]=133,["DOCKING"]=134,["HARVESTING"]=135,["BRIDGE_IMPASSABLE"]=136,["POWERED_DOWN_EMP"]=137,
["FORCE_ATTACKING"]=138,["FORCE_ATTACK_MOVING"]=139,["SCARED_CIVILIAN_CAR"]=140,["USER_PARALYZED"]=141,["BOOBY_TRAP_EXPLODE"]=142,["IS_ENGAGED"]=143,["CARRYING_FLAG"]=144,["IS_MOVING_TO_RALLY_POINT"]=145,["CAN_SPOT_FOR_BOMBARD"]=146,["AIRCRAFT_IGNORE_SAMEPLAYER_HANGAR_RULE"]=147,["NEXT_MOVE_IS_FORCE_ATTACK_MOVE"]=148,["SPECIALABILITY_ACTIVE"]=149,["CAN_STEALTH_FROM_PRODUCER"]=150,["CAPTURING"]=151,["TIER_2_BASE"]=152,["TIER_3_BASE"]=153,["UPGRADE_BASE_POWER"]=154,
["UPGRADE_BASE_DEFENSE"]=155,["UPGRADE_BASE_STRAT_1"]=156,["UPGRADE_BASE_STRAT_2"]=157,["UPGRADE_BASE_STRAT_3"]=158,["UPGRADE_BASE_STRAT_4"]=159,["UPGRADE_BASE_STRAT_5"]=160
}

MODEL_CONDITION_CNC3KW = {
"INVALID","TOPPLED","FRONTCRUSHED","BACKCRUSHED","DAMAGED","REALLYDAMAGED","RUBBLE","SPECIAL_DAMAGED","NIGHT","SNOW","PARACHUTING","GARRISONED","ENEMYNEAR","WEAPONSET_VETERAN","WEAPONSET_ELITE","WEAPONSET_HERO","WEAPONSET_PASSENGER_TYPE_ONE","WEAPONSET_PASSENGER_TYPE_TWO","WEAPONSET_PLAYER_UPGRADE","WEAPONSTATE_ONE","WEAPONSTATE_TWO","WEAPONSTATE_THREE","DOOR_1_OPENING","DOOR_1_CLOSING","DOOR_1_WAITING_OPEN","DOOR_1_WAITING_TO_CLOSE",
"DOOR_2_OPENING","DOOR_2_CLOSING","DOOR_2_WAITING_OPEN","DOOR_2_WAITING_TO_CLOSE","DOOR_3_OPENING","DOOR_3_CLOSING","DOOR_3_WAITING_OPEN","DOOR_3_WAITING_TO_CLOSE","DOOR_4_OPENING","DOOR_4_CLOSING","DOOR_4_WAITING_OPEN","DOOR_4_WAITING_TO_CLOSE","ATTACKING","ATTACKING_STRUCTURE","ATTACKING_POSITION","PREATTACK_A","FIRING_A","FIRING_OR_PREATTACK_A","FIRING_OR_RELOADING_A","BETWEEN_FIRING_SHOTS_A","RELOADING_A","PREATTACK_B","FIRING_B",
"FIRING_OR_PREATTACK_B","FIRING_OR_RELOADING_B","BETWEEN_FIRING_SHOTS_B","RELOADING_B","PREATTACK_C","FIRING_C","FIRING_OR_PREATTACK_C","FIRING_OR_RELOADING_C","BETWEEN_FIRING_SHOTS_C","RELOADING_C","TURRET_ROTATE","POST_RUBBLE","POST_COLLAPSE","MOVING","DYING","EMOTION_ALERT","EMOTION_AFRAID","EMOTION_TERROR","EMOTION_PANIC","AWAITING_CONSTRUCTION","PARTIALLY_CONSTRUCTED","ACTIVELY_BEING_CONSTRUCTED","UNIT_ACTIVELY_BEING_CONSTRUCTED",
"PRONE","FREEFALL","ACTIVELY_CONSTRUCTING","CONSTRUCTION_COMPLETE","RADAR_EXTENDING","RADAR_UPGRADED","PANICKING","AFLAME","SMOLDERING","BURNED","DOCKING","DOCKING_BEGINNING","DOCKING_ACTIVE","DOCKING_ENDING","CARRYING","FLOODED","LOADED","PASSENGER","TRANSPORT_MOVING","TRANSPORT_STOPPED","CLUB","JETAFTERBURNER","JETEXHAUST","PACKING","PREPARING","UNPACKING","PACKING_TYPE_1","PACKING_TYPE_2","PACKING_TYPE_3","DEPLOYED","OVER_WATER",
"POWER_PLANT_UPGRADED","CLIMBING","SOLD","RAPPELLING","ARMED","POWER_PLANT_UPGRADING","BUILD_PLACEMENT_CURSOR","PHANTOM_STRUCTURE","START_CAPTURE","CANCEL_CAPTURE","CAPTURING","MOVING_OUT_OF_THE_WAY","SPECIAL_CHEERING","CONTINUOUS_FIRE_SLOW","CONTINUOUS_FIRE_MEAN","CONTINUOUS_FIRE_FAST","RAISING_FLAG","CAPTURED","EXPLODED_FLAILING","EXPLODED_BOUNCING","SPLATTED","USING_WEAPON_A","USING_WEAPON_B","USING_WEAPON_C","PREORDER","STUNNED_FLAILING",
"STUNNED","STONED","WANDER","WALKING","CHARGING","TURN_LEFT","TURN_RIGHT","ACCELERATE","DECELERATE","TURN_LEFT_HIGH_SPEED","TURN_RIGHT_HIGH_SPEED","DESTROYED_FRONT","DESTROYED_RIGHT","DESTROYED_BACK","DESTROYED_LEFT","WEAPONSET_GARRISONED","WEAPONLOCK_PRIMARY","WEAPONLOCK_SECONDARY","WEAPONLOCK_TERTIARY","WEAPONLOCK_QUATERNARY","WEAPONLOCK_QUINARY","DEATH_1","DEATH_2","DEATH_3","DEATH_4","DECAY","THROWN_PROJECTILE","ABOUT_TO_HIT","BACKING_UP",
"ENGAGED","DEFLECT_SPECIAL_POWER","WEAPONSET_CLOSE_RANGE","WEAPONSTATE_CLOSE_RANGE","WEAPONSET_RAMPAGE","RAMPAGE_ANIMATION_ONLY","STUNNED_STANDING_UP","REACT_1","REACT_2","REACT_3","REACT_4","REACT_5","REACT_6","SELECTED","GUARDING","HIT_REACTION","HIT_LEVEL_1","HIT_LEVEL_2","HIT_LEVEL_3","GRAB_BUILDING_CHUNK","DEATH_5","AIM_HIGH","AIM_STRAIGHT","AIM_LOW","AIM_NEAR","AIM_FAR","DIVING","USER_1","USER_2","USER_3","USER_4","USER_5","SWOOPING","BURNT_MODEL",
"BURNT_TEXTURE","WEAPONSET_CONTESTING_BUILDING","DEBUG","PASSENGER_VARIATION_1","PASSENGER_VARIATION_2","PASSENGER_VARIATION_3","PASSENGER_VARIATION_4","PASSENGER_VARIATION_5","EMOTION_GUNG_HO","EMOTION_LOOK_TO_SKY","EMOTION_CELEBRATING","EMOTION_AMUSED","EMOTION_MORALE_HIGH","EMOTION_MORALE_LOW","EMOTION_COWER","EMOTION_DISSIDENT","USING_SPECIAL_ABILITY","WORLD_BUILDER","SIEGE_CONTAIN","LEVELED","SPECIAL_POWER_1","SPECIAL_POWER_2","SPECIAL_POWER_3","MOUNTED",
"OATH_FULLFILLED","RESURRECTED","DESTROYED_WEAPON","JUST_BUILT","BASE_BUILD","HERO","RIDER1","RIDER2","RIDER3","RIDER4","RIDER5","RIDER6","RIDER7","RIDER8","WEAPONSET_RIDER1","WEAPONSET_RIDER2","WEAPONSET_RIDER3","WEAPONSET_RIDER4","WEAPONSET_RIDER5","WEAPONSET_RIDER6","WEAPONSET_RIDER7","WEAPONSET_RIDER8","WEAPONSET_SPECIAL_ONE","WEAPONSET_SPECIAL_TWO","WADING","SWIMMING","WEAPONSET_CONTAINED","WEAPONSTATE_CONTAINED","HORDE_EMPTY","SPECIAL_WEAPON_ONE",
"SPECIAL_WEAPON_TWO","SPECIAL_WEAPON_THREE","WEAPONSET_MOUNTED","EATING","CHANT_FOR_GROND","WEAPONSET_ENRAGED","WEAPONSET_SPECIAL_UPGRADE","RUNNING_OFF_MAP","ATTACHED","PRIMARY_FORMATION","ALTERNATE_FORMATION","HARVEST_PREPARATION","HARVEST_ACTION","SPECIAL_ENEMY_NEAR","HIDDEN","PUTTING_ON_RING","TAKING_OFF_RING","CAPTURE_100","CAPTURE_75","CAPTURE_50","CAPTURE_25","CAPTURE_0","UPGRADE_IVORY_TOWER","UPGRADE_HOUSE_OF_HEALING","UPGRADE_BLANK4","UPGRADE_FORTRESS_MONUMENT",
"SPECIALPOWER1_READY","SPECIALPOWER2_READY","SPECIALPOWER3_READY","SPECIALPOWER4_READY","SPECIALPOWER5_READY","SPECIALPOWER6_READY","SPECIALPOWER7_READY","SPECIALPOWER8_READY","SPECIALPOWER9_READY","FORTRESS_IMPROVEMENT_1_BUILDING","FORTRESS_IMPROVEMENT_2_BUILDING","FORTRESS_IMPROVEMENT_3_BUILDING","FORTRESS_IMPROVEMENT_4_BUILDING","FORTRESS_IMPROVEMENT_5_BUILDING","FORTRESS_IMPROVEMENT_6_BUILDING","FORTRESS_IMPROVEMENT_7_BUILDING","FORTRESS_IMPROVEMENT_8_BUILDING",
"FORTRESS_IMPROVEMENT_9_BUILDING","FORTRESS_MONUMENT_CREATURE_AVAILABLE","FORTRESS_MONUMENT_CREATURE_UNAVAILABLE","FORTRESS_MONUMENT_UNDER_CONSTRUCTION","DRILL0","DRILL1","DRILL2","DRILL3","DRILL4","RIDERLESS","DRAFTED","UPGRADED_ARMOR","DISGUISED","WEAPONSET_TOGGLE_1","WEAPONSET_TOGGLE_2","WEAPONSET_TOGGLE_3","WEAPONSET_HERO_MODE","DOCKING_PRE_DOCK","TURRET_ANGLE_0","TURRET_ANGLE_90","TURRET_ANGLE_180","TURRET_ANGLE_270","USING_COMBO_LOCOMOTOR","WAR_CHANT","EMOTION_QUARRELSOME",
"QUARRELSOME_FIGHTING","UNCONTROLLABLE","INITIAL_ENRAGED","ARMORSET_VETERAN","ARMORSET_ELITE","ARMORSET_HERO","ARMORSET_WEAK_VERSUS_BASEDEFENSES","ARMORSET_ALTERNATE_FORMATION","ARMORSET_MOUNTED","ARMORSET_PLAYER_UPGRADE","ARMORSET_PLAYER_UPGRADE_2","ARMORSET_PLAYER_UPGRADE_3","ARMORSET_UNBESIEGEABLE","EMOTION_TAUNTING","EMOTION_DOOM","EMOTION_POINTING","WEAPON_TOGGLING","INVULNERABLE","MARCHING","UPGRADE_ECONOMY_BONUS","COMING_OUT_OF_FACTORY","DESTROYED_WHILST_BEING_CONSTRUCTED",
"COLLAPSING","EMOTION_UNCONTROLLABLY_AFRAID","SAIL_FLAPPING","SAIL_BLOWN_RIGHT","SAIL_BLOWN_LEFT","BUILD_VARIATION_ONE","BUILD_VARIATION_TWO","LEASHED_RETURNING","WEAPONSLOTID_01","WEAPONSLOTID_02","WEAPONSLOTID_03","WEAPONSLOTID_04","WEAPONSLOTID_05","DYING_WASMOVING","POPULATION_FULL","POPULATION_SLIGHTLY_LOW","POPULATION_LOW","POPULATION_REALLY_LOW","POPULATION_ZERO","UNREST_FULL","UNREST_SLIGHTLY_LOW","UNREST_LOW","UNREST_REALLY_LOW","UNREST_ZERO","TIBERIUM_FULL","TIBERIUM_SLIGHTLY_LOW",
"TIBERIUM_LOW","TIBERIUM_REALLY_LOW","TIBERIUM_ZERO","BUILDING_A_METAUNIT","CONSTRUCTING_A_METAUNIT","UNUSED_23","UNUSED_24","UNUSED_25","UNUSED_26","UNUSED_27","UNUSED_28","UNUSED_29","UNUSED_30","UNUSED_31","UNUSED_32","UNUSED_33","UNUSED_34","UNUSED_35","UNUSED_36","UNUSED_37","UNUSED_38","UNUSED_39","UNUSED_40","UNUSED_41","UNUSED_42","UNUSED_43","UNUSED_44","UNUSED_45","UNUSED_46","UNUSED_47","UNUSED_48","UNUSED_49","UNUSED_50","UNUSED_51","UNUSED_52","UNUSED_53","UNUSED_54","UNUSED_55",
"BASE_TIER_1","BASE_TIER_2","BASE_TIER_3","BASE_POWER","BASE_DEFENSES","BASE_STRATEGIC_BUILDING_1","BASE_STRATEGIC_BUILDING_2","BASE_STRATEGIC_BUILDING_3","BASE_STRATEGIC_BUILDING_4","BASE_STRATEGIC_BUILDING_5","WEAPONSET_UNUSED_WS_01","WEAPONSET_UNUSED_WS_02","WEAPONSET_UNUSED_WS_03","WEAPONSET_UNUSED_WS_04","WEAPONSET_UNUSED_WS_05","WEAPONSET_UNUSED_WS_06","WEAPONSET_UNUSED_WS_07","WEAPONSET_UNUSED_WS_08","WEAPONSET_UNUSED_WS_09","WEAPONSET_UNUSED_WS_10","WEAPONSET_UNUSED_WS_11",
"WEAPONSET_UNUSED_WS_12","WEAPONSET_UNUSED_WS_13","WEAPONSET_UNUSED_WS_14","WEAPONSET_UNUSED_WS_15","WEAPONSET_UNUSED_WS_16","WEAPONSET_UNUSED_WS_17","WEAPONSET_UNUSED_WS_18","WEAPONSET_UNUSED_WS_19","WEAPONSET_UNUSED_WS_20","WEAPONSET_UNUSED_WS_21","WEAPONSET_UNUSED_WS_22","WEAPONSET_UNUSED_WS_23","WEAPONSET_UNUSED_WS_24","WEAPONSET_UNUSED_WS_25","WEAPONSET_UNUSED_WS_26","WEAPONSET_UNUSED_WS_27","WEAPONSET_UNUSED_WS_28","WEAPONSET_UNUSED_WS_29",
"WEAPONSET_UNUSED_WS_30","WEAPONSET_UNUSED_WS_31","WEAPONSET_UNUSED_WS_32","FORMATION_PREVIEW","SCALING_WALL","SCALING_WALL_HORDE","ATTACK_MOVING","SWAPPING_TO_WEAPONSET_1","SWAPPING_TO_WEAPONSET_2","SWAPPING_TO_WEAPONSET_3","ARMORSET_UNUSED_01","ARMORSET_UNUSED_02","ARMORSET_UNUSED_03","ARMORSET_UNUSED_04","ARMORSET_UNUSED_05","ARMORSET_UNUSED_06","ARMORSET_UNUSED_07","ARMORSET_UNUSED_08","ARMORSET_UNUSED_09","ARMORSET_UNUSED_10","USER_6","USER_7","USER_8","USER_9","USER_10","USER_11",
"USER_12","USER_13","USER_14","USER_15","USER_16","USER_17","USER_18","USER_19","USER_20","USER_21","USER_22","USER_23","USER_24","USER_25","USER_26","USER_27","USER_28","USER_29","USER_30","USER_31","USER_32","USER_33","USER_34","USER_35","USER_36","USER_37","USER_38","USER_39","USER_40","USER_41","USER_42","USER_43","USER_44","USER_45","USER_46","USER_47","USER_48","USER_49","USER_50","USER_51","USER_52","USER_53","USER_54","USER_55","USER_56","USER_57","USER_58","USER_59","USER_60","USER_61",
"USER_62","USER_63","USER_64","USER_65","USER_66","USER_67","USER_68","USER_69","USER_70","USER_71","USER_72","USER_73","USER_74","USER_75","EMOTION_BRACE_FOR_BEING_CRUSHED","PARALYZED","FIRING_D","FIRING_E","BETWEEN_FIRING_SHOTS_D","BETWEEN_FIRING_SHOTS_E","RELOADING_D","RELOADING_E","PREATTACK_D","PREATTACK_E","USING_WEAPON_D","USING_WEAPON_E","FIRING_OR_PREATTACK_D","FIRING_OR_PREATTACK_E","FIRING_OR_RELOADING_D","FIRING_OR_RELOADING_E","BURNINGDEATH","EMOTION_CHEER_FOR_ABOUT_TO_CRUSH",
"INVISIBLE_STEALTH","INVISIBLE_CAMOUFLAGE","AFFECTED_BY_EMP","UNUSED_EXAMINE_WEAPON_LEFT","UNUSED_EXAMINE_WEAPON_RIGHT","UNUSED_SELECTED_CHEER","UNUSED_IN_CREATION_SCREEN","WEAPONSET_UNUSED_WS_33","WEAPONSET_UNUSED_WS_34","WEAPONSET_UNUSED_WS_35","WEAPONSET_UNUSED_WS_36","WEAPONSET_UNUSED_WS_37","WEAPONSET_UNUSED_WS_38","WEAPONSET_UNUSED_WS_39","WEAPONSET_UNUSED_WS_40","WEAPONSET_UNUSED_WS_41","WEAPONSET_UNUSED_WS_42","WEAPONSET_UNUSED_WS_43","WEAPONSET_UNUSED_WS_44","WEAPONSET_UNUSED_WS_45",
"WEAPONSET_UNUSED_WS_46","WEAPONSET_UNUSED_WS_47","WEAPONSET_UNUSED_WS_48","WEAPONSET_UNUSED_WS_49","WEAPONSET_UNUSED_WS_50","WEAPONSET_UNUSED_WS_51","WEAPONSET_UNUSED_WS_52","WEAPONSET_UNUSED_WS_53","WEAPONSET_UNUSED_WS_54","WEAPONSET_UNUSED_WS_55","WEAPONSET_UNUSED_WS_56","WEAPONSET_UNUSED_WS_57","WEAPONSET_UNUSED_WS_58","WEAPONSET_UNUSED_WS_59","WEAPONSET_UNUSED_WS_60","WEAPONSET_UNUSED_WS_61","WEAPONSET_UNUSED_WS_62","WEAPONSET_UNUSED_WS_63","WEAPONSET_UNUSED_WS_64","PACKING_TYPE_4","PACKING_TYPE_5",
"PACKING_TYPE_6","SPECIAL_WEAPON_FOUR","SPECIAL_WEAPON_FIVE","SPECIAL_WEAPON_SIX","INSIDE_GARRISON","TIBERIUM_CRYSTAL_TYPE1","TIBERIUM_CRYSTAL_TYPE2","TIBERIUM_CRYSTAL_TYPE3","TIBERIUM_CRYSTAL_TYPE4","TIBERIUM_CRYSTAL_TYPE5","MARKED_FOR_HUNT_TACTIC","MARKED_FOR_NO_SKIRMISH_RECRUIT","LOCOMOTOR_NORMAL_UPGRADED","LOCOMOTOR_FREEFALL","LOCOMOTOR_WANDER","LOCOMOTOR_PANIC","LOCOMOTOR_TAXIING","LOCOMOTOR_SUPERSONIC","LOCOMOTOR_MOUNTED","LOCOMOTOR_ENRAGED","LOCOMOTOR_SCARED","LOCOMOTOR_CONTAINED","LOCOMOTOR_COMBO",
"LOCOMOTOR_COMBO2","LOCOMOTOR_COMBO3","LOCOMOTOR_WALL_SCALING","LOCOMOTOR_CHANGING_FIRINGARC","LOCOMOTOR_BURNINGDEATH","SUPPRESSED","MONEY_STORED_AMOUNT_1","MONEY_STORED_AMOUNT_2","MONEY_STORED_AMOUNT_3","MONEY_STORED_AMOUNT_4","PARKINGPLACE_1_DOOR_OPENING","PARKINGPLACE_1_DOOR_OPEN","PARKINGPLACE_1_DOOR_CLOSING","PARKINGPLACE_1_DOOR_CLOSED","PARKINGPLACE_2_DOOR_OPENING","PARKINGPLACE_2_DOOR_OPEN","PARKINGPLACE_2_DOOR_CLOSING","PARKINGPLACE_2_DOOR_CLOSED","PARKINGPLACE_3_DOOR_OPENING",
"PARKINGPLACE_3_DOOR_OPEN","PARKINGPLACE_3_DOOR_CLOSING","PARKINGPLACE_3_DOOR_CLOSED","PARKINGPLACE_4_DOOR_OPENING","PARKINGPLACE_4_DOOR_OPEN","PARKINGPLACE_4_DOOR_CLOSING","PARKINGPLACE_4_DOOR_CLOSED","VEHICLE_CRUSH_LEFT","VEHICLE_CRUSH_RIGHT","VEHICLE_CRUSH_CENTER","COVER","TIBERIUM_GROWING","HEALTH_PERCENT_0","HEALTH_PERCENT_25","HEALTH_PERCENT_50","HEALTH_PERCENT_75","HEALTH_PERCENT_100","STRUCTURE_UNPACKING","COMBINED_PARENT","COMBINED_CHILD","FLYING","TAKING_OFF","LANDING","UNDERPOWERED","REPAIRING_DISABLED"
}

EVA_EVENT_CNC3KW = {
"AircraftOutOfAmmoDamage","AlliedIonCannonActivated","AlliedIonCannonActivated","AlliedIonCannonDetected","AlliedNuclearMissileLaunched","AlliedRiftGeneratorActivated",
"AlliedTempleOfNodDetected","AllyCampDestroyed","AllyDefeated","BeaconPlacedAlly","BeaconPlacedPlayer","BridgeRepaired","BuildCancelled","BuildingBeingStolen","BuildingConstructionComplete",
"BuildingConstructionStarted","BuildingManuallyPoweredDown","BuildingManuallyPoweredUp","BuildingRepaired","BuildingStolen","BuildOnHold","BuildQueuePausedDueToCPLimit",
"BuildQueuePausedDueToFunds","CampDestroyed","CannotBuildDueToCPLimit","CannotRepairDueToFunds","CannotUsePowerDueToFunds","CastleBreached","CompletedBonusMissionObjective",
"CompletedMissionObjective","ControlPointCaptured","ControlPointHasBeenCaptured","ControlPointLost","Countdown01","Countdown02","Countdown03","Countdown04","Countdown05",
"Countdown06","Countdown07","Countdown08","Countdown09","Countdown10MinsInGame","Countdown10SecsInGame","Countdown15MinsInGame","Countdown1MinsInGame",
"Countdown20MinsInGame","Countdown30SecsInGame","Countdown3MinsInGame","Countdown5MinsInGame","CTFEnemyCapturedFlag","CTFEnemyDroppedFlag","CTFEnemyHasFlag","CTFFlagCaptured",
"CTFFlagDropped","CTFYouHaveFlag","DamagedByTiberium","DefaultEvaEvent","EmptyEva","EnemyBuildingCaptured","EnemyCampDestroyed","EnemyCampSighted","EnemyCommandoDetected",
"EnemyDefeated","EnemyEngineerDetected","EnemyIonCannonActivated","EnemyIonCannonDetected","EnemyNuclearMissileLaunched","EnemyRiftGeneratorActivated","EnemyRiftGeneratorDetected",
"EnemyStealthUnitDiscovered","EnemyTempleOfNodDetected","GeneralLevelUp","GenericEnemyUnitSighted","GenericUnitBeingBurned","HarvesterLost","HarvesterUnderAttack","HuskRepaired",
"IncomingRadarTransmission","IncomingTransmission","IntelDatabaseEntryReceived","IonCannonReady","LiquidTiberiumBombReady","LocalPlayerDefeated","LocalPlayerVictorious","LowPower",
"Meva_AutoResolve","Meva_AutoResolveBattleLost","Meva_AutoResolveBattleWon","Meva_BuildBase","Meva_BuildSF","Meva_Cancel","Meva_DecBase","Meva_DecSF","Meva_MoveSF",
"Meva_Patrola","Meva_Patrolb","Meva_RepairBase","Meva_RepairSF","Meva_UpgBaseDef","Meva_UpgBasePow","Meva_UpgBaseTier","Meva_UpgSF","Meva_YouFiredIC","Meva_YouFiredNuke",
"Meva_YouFiredRift","MothershipDeployed","NewBonusObjective","NewConstructionOptions","NewMissionObjective","NuclearMissileReady","ObservedPlayerDefeated","OwnIonCannonActivated",
"OwnLiquidTiberiumBombLaunched","OwnNuclearMissileLaunched","OwnRiftGeneratorActivated","ReinforcementsReady","RiftGeneratorReady","SelectDecoyUnit","SelectSpecialPowerTarget",
"SelectUnit","SelectWormholeLocation","SiegeBarrierDisengaged","SiegeBarrierEngaged","SiegeCountdown10Mins","SiegeCountdown10Secs","SiegeCountdown15Mins","SiegeCountdown1Mins",
"SiegeCountdown20Mins","SiegeCountdown30Secs","SiegeCountdown3Mins","SiegeCountdown5Mins","SilosNeeded","StructureCannotBuildDueToFullBuildQueue","StructurePlacementFailed",
"StructureRepairing","StructureSold","StructureUnderAttack","TiberiumFieldDepleted","UnitAmbushed","UnitConstructionStarted","UnitLost","UnitPromoted","UnitUnderAttack",
"UnitUnderAttackFromShroudedUnit","UpgradeComplete","WallsBeingClimbed","WarningMothershipDeployed","WorldMustBattle","WorldMustChooseOwner","WorldMustRetreat","WorldRegionLostUncontested"	
}

--------------------------------------------------------------
--NATIVE LUA FUNCTIONS (see https://www.lua.org/manual/4.0/)--
--------------------------------------------------------------

openfile(filename, mode)
closefile(filehandle)
readfrom(filename)
read([filehandle,] format1, ...)
writeto(filename)
write[filehandle, ] value1, ...)
appendto(filename)
remove(filename)
rename(filename, filename_new)
flush([filehandle])
seek(filehandle [, whence] [, offset])
tmpname()
dofile(filepath)
dostring(string)
tremove(table, position)
tinsert(table, entry)
sort(table, sort_helper_function)
getn(table)
globals()
getglobal(globals_index)
setglobal(globals_index)
rawgetglobal(globals_index)
rawsetglobal(globals_index)
rawget(table, index)
rawset(table, index, value)
rawgettable(table, index)
rawsettable(table, index, value)
strlen(string)
strfind(string, pattern [, init [, plain]])
strupper(string)
strlower(string)
strchar(i1, i2, ...)
strbyte(string [, i])
strrep(string, n)
strsub(string, index_begin , index_end_optional)
gsub(string, pat, repl [, n])
tostring(anything)
tonumber(e [, base])
format(formatstring, e1, e2, ...)
ascii
sin(number)
cos(number)
tan(number)
asin(number)
acos(number)
atan(number)
atan2(number)
mod(number, number2)
deg(number)
rad(number)
exp(number)
ldexp(number)
frexp(number)
log(number)
log10(number)
floor(number)
ceil(number)
min(number1, number2, ...)
max(number1, number2, ...)
sqrt(number)
abs(number)
random(start, end)
randomseed(number)
foreachvar(function)
foreach(table, func)
foreachi(table, func)
nextvar(global_variable
next(table, [index]) 
tag(v)
settag(t, tag)
newtag()
gettagmethod(tag, event)
settagmethod(tag, event, newmethod)
copytagmethods(tagto, tagfrom)
	add
	sub
	mul
	div
	pow
	unm
	lt
	le	
	concat
	index
	getglobal
	setglobal
	gettable
	settable
	function
	gc
execute(windows cmd command)
date([format])
clock()
setlocale(locale [, category])
	numeric
	monetary
	ctype
	collate
	all
	end
	set
getenv(environment)
	USERNAME
	ComputerName
	OS
	Tmp
	...
exit([code])
type(variable)
	function
	table
	userdata
	string
	number
	nil
call(func, arg [, mode [, errhandler]])
print(string)
assert(v [, message])
error(message)
_ALERT(message)
_ERRORMESSAGE(message)
debug
getinfo(function, [what])
getlocal(level, local)
setlocal(level, local, value)
setcallhook(hook)
setlinehook(hook)
gcinfo()
collectgarbage([limit])

--GLOBAL VARIABLES--
_STDIN
_STDOUT
_STDERR
_INPUT
_OUTPUT
PI
_VERSION

--LUA SYNTAX--
true
false 
if 
else 
elseif 
and 
or 
not 
for
do 
while 
repeat
until
break
end
function
in
local
nil
return
then
~=
<=
>=
<
>
==
=
+
-
*
/
^
%
(
)
{
}
[
]
;
,
.
..
...
--

--------------------------------
--GAME SCRIPT EVENTS (NOT LUA)--
--------------------------------

(InternalEvent):
OnDamaged (self, other)
OnDestroyed (self)
OnArrived (self)
OnUnitEntered (self, areaName)
OnUnitExited (self, areaName)
OnTeamEntered (self, areaName)
OnTeamExited (self, areaName)
OnTeamDestroyed (self)
BeScary (self, ?)
DamageIncoming (self, other, delay, amount)
OnAflame (self)
OnQuenched (self)
OnCreated (self)
OnBuildingComplete (self, ?)
OnSlaughtered (self, slaughterer)
OnGenericEvent (self, string)
OnBuildVariation (self, real)
OnPowerRestore (self) 	--ONLY C&C3TWKW, RA3, C&C4
OnPowerOutage (self) 	--ONLY C&C3TWKW, RA3, C&C4
OnClipFull (self) 		--ONLY C&C3TWKW, RA3, C&C4
OnClipEmpty (self) 		--ONLY C&C3TWKW, RA3, C&C4
OnHealed (self) 		--ONLY RA3, C&C4

(ScriptedEvent via ObjectDispatchEvent or ObjectBroadcastEvent)
DispatchedEvent (self, dispatchingObject, arbitraryString)

(ObjectStatusEvent)
(ModelConditionEvent)